name: "Willow WsupApi"

on:
  push:
    branches:
      - main
      - releases/**
    paths:
      - tools/WillowWSUP/WsupApi/**
      - tools/WillowWSUP/Willow.Infrastructure.Entities/**
      - tools/WillowWSUP/lib/**

  pull_request:
    branches:
      - main
    paths:
      - tools/WillowWSUP/WsupApi/**
      - tools/WillowWSUP/Willow.Infrastructure.Entities/**
      - tools/WillowWSUP/lib/**

  workflow_dispatch:
    inputs:
      pushToDevAcr:
        type: boolean
        description: Promote Docker image to Dev ACRs
        default: false
      pushToPrdAcr:
        type: boolean
        description: Promote Docker image to Prod ACRs
        default: false
      bumpImageVersion:
        type: boolean
        description: Create PR to bump up image version in the AzurePlatform Repo.
        default: false

env:
  buildConfiguration: Release
  mainProject: WillowWSUP
  imageName: twin/wsupapi
  productName: wsupapi
  excludeLibraries: \"[*]Microsoft.*,[*]System.*,[*]Willow.Api.*,[*]Willow.Email.*,[*]Willow.Authentication.*,[*]Willow.KeyVaultSecretsProvider.*,[*]Willow.Logging.*,[*]Willow.DataAccess.*,[]Willow.Directory.Api.Infrastructure.FileIO.*\"
  majorVersion: 0.1
  projectPath: "tools/WillowWSUP/WsupApi"

jobs:

  calculate_git_version:
    runs-on: ubuntu-latest
    outputs:
      branchName: ${{ steps.gitversion.outputs.branchName }} # To use an output in another job, you have to map it to a job output.
      semVer: ${{ steps.gitversion.outputs.semVer }} # e.g. 2.1.1-wsupapi.1 from a branch
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }} # e.g. 2.1.1-wsupapi.1+3 from a branch
      assemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}
      assemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer}}
      informationalVersion: ${{ steps.gitversion.outputs.informationalVersion}}
      nugetVersion: ${{ steps.gitversion.outputs.nuGetVersion}} # e.g. 2.1.1-wsupapi0001 from a branch
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
      patch: ${{ steps.gitversion.outputs.patch }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      escapedBranchName : ${{ steps.gitversion.outputs.EscapedBranchName }}
      versionSourceSha : ${{ steps.gitversion.outputs.VersionSourceSha }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: calculate_git_version
    if: contains(needs.calculate_git_version.outputs.branchName, 'main') # Output variable accessed via `needs` context.
    steps:
      - run: |
          # Output variables can also be accessed in steps, using an expression.
          echo "Creating release notes for ${{ needs.calculate_git_version.outputs.branchName }} branch."

  display-semver:
    name: Display Semantic Version
    runs-on: ubuntu-latest
    needs: calculate_git_version
    env:
      SEMVER: ${{ needs.calculate_git_version.outputs.semVer }}
    steps:
      - name: Display version
        run: |
          echo SemVer: $SEMVER

  build_app:
    name: Build, Test and Publish
    runs-on: ubuntu-latest
    needs:
      - calculate_git_version
    env:
      DirectoryBuildPropPath: tools/WillowWSUP/Directory.Build.props
      semVer: ${{ needs.calculate_git_version.outputs.semVer }} # e.g. 2.1.1-wsupapi.1 from a branch
      fullSemVer: ${{ needs.calculate_git_version.outputs.fullSemVer }} # e.g. 2.1.1-wsupapi.1+3 from a branch
      assemblySemVer: ${{ needs.calculate_git_version.outputs.assemblySemVer }}
      assemblySemFileVer: ${{ needs.calculate_git_version.outputs.assemblySemFileVer}}
      informationalVersion: ${{ needs.calculate_git_version.outputs.informationalVersion}}
      nugetVersion: ${{ needs.calculate_git_version.outputs.nuGetVersion}} # e.g. 2.1.1-wsupapi0001 from a branch
      majorMinorPatch: ${{ needs.calculate_git_version.outputs.majorMinorPatch }}

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      # Move this to a shared action
      # See https://gitversion.net/docs/usage/msbuild for details of which versions go where in the below

      - name: stamp
        shell: bash
        run: |
          year=$(date +%Y)
          sed -i -E "s|(<Version>)([0-9]+\.[0-9]+\.[0-9]+)(<\/Version>)|\1${{env.nugetVersion}}\3|" ${{ env.DirectoryBuildPropPath }}
          sed -i -E "s|(<AssemblyVersion>)([0-9]+\.[0-9]+\.[0-9]+)(<\/AssemblyVersion>)|\1${{ env.assemblySemVer }}\3|" ${{ env.DirectoryBuildPropPath }}
          sed -i -E "s|(<AssemblyFileVersion>)([0-9]+\.[0-9]+\.[0-9]+)(<\/AssemblyFileVersion>)|\1${{ env.majorMinorPatch }}\3|" ${{ env.DirectoryBuildPropPath }}
          sed -i -E "s|(<AssemblyInformationalVersion>)([0-9]+\.[0-9]+\.[0-9]+)(<\/AssemblyInformationalVersion>)|\1${{ env.informationalVersion }}\3|" ${{ env.DirectoryBuildPropPath }}
          sed -i -E "s|(<Copyright>)(.*)(<\/Copyright>)|\1${year}\3|" ${{ env.DirectoryBuildPropPath }}
          echo Updated version numbers in Directory.Build.props ${{ env.nugetVersion }} ${{ env.fullSemVer }}
          cat ${{ env.DirectoryBuildPropPath }}

      - name: Update Nuget Config Credentials
        uses: WillowInc/TwinPlatform/.github/actions/update-nuget-credentials@main
        with:
          sourceUrl: https://nuget.pkg.github.com/willowinc/index.json
          sourceName: WillowGithub
          nugetFilePath: NuGet.Config
          patToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Set SDK version
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: NET Publish Api
        working-directory: tools/WillowWSUP/WsupApi
        run: |
          dotnet publish WsupApi.csproj -c Release -o ./dotnet-api

      - name: Upload NET Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dotnetapi
          path: tools/WillowWSUP/WsupApi/dotnet-api
          retention-days: 1

  build_push_docker:
    name: Build docker image and push to ACR
    runs-on: ubuntu-latest
    outputs:
      pushToDevAcr: ${{ steps.evaluate-push.outputs.pushToDevAcr }}
      pushToPrdAcr: ${{ steps.evaluate-push.outputs.pushToPrdAcr }}
    needs:
      - calculate_git_version
      - build_app
    env:
      semVer: ${{ needs.calculate_git_version.outputs.semVer }} # e.g. 2.1.1-wsupapi.1 from a branch
      fullSemVer: ${{ needs.calculate_git_version.outputs.fullSemVer }} # e.g. 2.1.1-wsupapi.1+3 from a branch
      nugetVersion: ${{ needs.calculate_git_version.outputs.nuGetVersion}} # e.g. 2.1.1-wsupapi0001 from a branch
      informationalVersion: ${{ needs.calculate_git_version.outputs.informationalVersion}}
      escapedBranchName: ${{ needs.calculate_git_version.outputs.escapedBranchName }}
      versionSourceSha: ${{ needs.calculate_git_version.outputs.versionSourceSha }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: Download dotnetapi artifact
        uses: actions/download-artifact@v3
        with:
          name: dotnetapi
          path: tools/WillowWSUP/WsupApi/bin/Release/net8.0/publish

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Build Init Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.projectPath }}/Dockerfile
          load: true
          tags: |
            crwildevshared01.azurecr.io/${{ env.imageName }}:${{ env.semVer }}
            crwilprdshared01.azurecr.io/${{ env.imageName }}:${{ env.semVer }}

      - name: Evaluate whether to Push
        id: evaluate-push
        shell: pwsh
        run: |
          $pushToDevAcr = 'false'
          if ($env:GITHUB_REF -eq 'refs/heads/main') { $pushToDevAcr = 'true' }
          If ('${{ github.event_name }}' -eq 'workflow_dispatch') { $pushToDevAcr = '${{ github.event.inputs.pushToDevAcr }}' }

          write-output "pushToDevAcr=$pushToDevAcr" >> $Env:GITHUB_STEP_SUMMARY
          write-output "pushToDevAcr=$pushToDevAcr" >> $Env:GITHUB_OUTPUT

          # only push to prd acr when build from release branch
          $pushToPrdAcr = '${{ github.event.inputs.pushToPrdAcr }}'
          If ('${{ github.ref }}' -like 'refs/heads/release/*') {
            $pushToPrdAcr = 'true'
          }

          write-output "pushToPrdAcr=$pushToPrdAcr" >> $Env:GITHUB_STEP_SUMMARY
          write-output "pushToPrdAcr=$pushToPrdAcr" >> $Env:GITHUB_OUTPUT

      - name: Login to Single Tenant Dev ACR if pushing
        uses: docker/login-action@v2
        if: ${{ steps.evaluate-push.outputs.pushToDevAcr == 'true' }}
        with:
          registry: crwildevshared01.azurecr.io
          username: ${{ vars.NONPROD_ACR_CLIENT_ID }}
          password: ${{ secrets.NONPROD_ACR_CLIENT_SECRET }}

      - name: Push to Single Tenant Dev
        if: ${{ steps.evaluate-push.outputs.pushToDevAcr == 'true' }}
        run: |
          docker push crwildevshared01.azurecr.io/twin/wsupapi:${{ env.semVer }}

      - name: Login to Single Tenant Prod ACR if pushing
        uses: docker/login-action@v2
        if: ${{ steps.evaluate-push.outputs.pushToPrdAcr == 'true' }}
        with:
          registry: crwilprdshared01.azurecr.io
          username: ${{ vars.PROD_ACR_CLIENT_ID }}
          password: ${{ secrets.PROD_ACR_CLIENT_SECRET }}

      - name: Push to Single Tenant Prod
        if: ${{ steps.evaluate-push.outputs.pushToPrdAcr == 'true' }}
        run: |
          docker push crwilprdshared01.azurecr.io/${{ env.imageName }}:${{ env.semVer }}

  image_bump_wsupapi:
    if: ${{ (github.event_name == 'push') || (github.event.inputs.bumpImageVersion == 'true') }}
    name: Create AzurePlatform PR
    runs-on: ubuntu-latest
    needs:
      - calculate_git_version
      - build_push_docker
    env:
      semVer: ${{ needs.calculate_git_version.outputs.semVer }} # e.g. 2.1.1-wsupapi.1 from a branch
      nugetVersion: ${{ needs.calculate_git_version.outputs.nuGetVersion}} # e.g. 2.1.1-wsupapi0001 from a branch
      informationalVersion: ${{ needs.calculate_git_version.outputs.informationalVersion}}
      escapedBranchName: ${{ needs.calculate_git_version.outputs.escapedBranchName }}
      versionSourceSha: ${{ needs.calculate_git_version.outputs.versionSourceSha }}
    steps:
      - uses: WillowInc/.github/.github/actions/bump-version@main
        if: ${{ needs.build_push_docker.outputs.pushToDevAcr == 'true' }}
        name: Bump image version - Dev
        id: bump-version-dev
        with:
          team-name: ${{ env.productName }}
          project-path: Bicep/ContainerApp
          image: "${{ env.imageName }}:${{ env.semVer }}"
          bot-token: ${{ secrets.SVC_BOT_TOKEN }}
          appsettings: "appsettings.json"
          container-name: "wsupapi"
          repository-name: "AzurePlatform"

      - uses: WillowInc/.github/.github/actions/bump-version@main
        if: ${{ needs.build_push_docker.outputs.pushToPrdAcr == 'true' }}
        name: Bump image version - Prod
        id: bump-version-prd
        with:
          team-name: ${{ env.productName }}
          project-path: Bicep/ContainerApp
          image: "${{ env.imageName }}:${{ env.semVer }}"
          bot-token: ${{ secrets.SVC_BOT_TOKEN }}
          appsettings: "appsettings.prd.json"
          container-name: "wsupapi"
          repository-name: "AzurePlatform"
