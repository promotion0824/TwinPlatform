// <auto-generated />
using System;
using ConnectorCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConnectorCore.Data.Migrations
{
    [DbContext(typeof(ConnectorCoreDbContext))]
    partial class ConnectorCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConnectorCore.Data.Models.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("ConnectorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ErrorThreshold")
                        .HasColumnType("int");

                    b.Property<bool?>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggingEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastImport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("sysutcdatetime()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RegistrationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RegistrationKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorTypeId")
                        .HasDatabaseName("Idx_Connector_ConnectorTypeId");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("Idx_Connector_SiteId");

                    b.ToTable("Connector", (string)null);
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.ConnectorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConnectorConfigurationSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceMetadataSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("PointMetadataSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScanConfigurationSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorConfigurationSchemaId")
                        .HasDatabaseName("Idx_ConnectorType_ConnectorConfigurationSchemaId");

                    b.HasIndex("DeviceMetadataSchemaId")
                        .HasDatabaseName("Idx_ConnectorType_DeviceMetadataSchemaId");

                    b.HasIndex("PointMetadataSchemaId")
                        .HasDatabaseName("Idx_ConnectorType_PointMetadataSchemaId");

                    b.HasIndex("ScanConfigurationSchemaId")
                        .HasDatabaseName("Idx_ConnectorType_ScanConfigurationSchemaId");

                    b.ToTable("ConnectorType", (string)null);
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("Errors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointCount")
                        .HasColumnType("int");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId")
                        .HasDatabaseName("Idx_Logs_ConnectorId");

                    b.HasIndex("EndTime")
                        .HasDatabaseName("IX_Logs_EndTime");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("EndTime"), new[] { "ConnectorId", "PointCount", "ErrorCount" });

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Logs_StartTime");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("StartTime"), new[] { "ConnectorId", "Source" });

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Scan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevicesToScan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId")
                        .HasDatabaseName("Idx_Scan_ConnectorId");

                    b.ToTable("Scan", (string)null);
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Schema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("Idx_Schema_ClientId");

                    b.ToTable("Schema", (string)null);
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.SchemaColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId");

                    b.ToTable("SchemaColumn", (string)null);
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Connector", b =>
                {
                    b.HasOne("ConnectorCore.Data.Models.ConnectorType", "ConnectorType")
                        .WithMany("Connectors")
                        .HasForeignKey("ConnectorTypeId")
                        .IsRequired();

                    b.Navigation("ConnectorType");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Log", b =>
                {
                    b.HasOne("ConnectorCore.Data.Models.Connector", "Connector")
                        .WithMany("Logs")
                        .HasForeignKey("ConnectorId")
                        .IsRequired();

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Scan", b =>
                {
                    b.HasOne("ConnectorCore.Data.Models.Connector", "Connector")
                        .WithMany("Scans")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.SchemaColumn", b =>
                {
                    b.HasOne("ConnectorCore.Data.Models.Schema", "Schema")
                        .WithMany("SchemaColumns")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Connector", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Scans");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.ConnectorType", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("ConnectorCore.Data.Models.Schema", b =>
                {
                    b.Navigation("SchemaColumns");
                });
#pragma warning restore 612, 618
        }
    }
}
