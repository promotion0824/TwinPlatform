// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.CommandAndControl.Tests.PostRequestedCommands
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RequestedCommandConflictResolutionFeature : object, Xunit.IClassFixture<RequestedCommandConflictResolutionFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PostRequestedCommands.feature"
#line hidden
        
        public RequestedCommandConflictResolutionFeature(RequestedCommandConflictResolutionFeature.FixtureData fixtureData, Willow_CommandAndControl_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PostRequestedCommands", "Requested Command conflict resolution", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test Transformation")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Test Transformation")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("TODAY - 1days", "TODAY - 1days", "TODAY + 1days", "TODAY + 1days", "Pending", new string[0])]
        public void TestTransformation(string existingStartTime, string newStartTime, string existingEndTime, string newEndTime, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Existing Start Time", existingStartTime);
            argumentsOfScenario.Add("New Start Time", newStartTime);
            argumentsOfScenario.Add("Existing End Time", existingEndTime);
            argumentsOfScenario.Add("New End Time", newEndTime);
            argumentsOfScenario.Add("Status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Transformation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "Status",
                            "ConnectorId"});
                table1.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", existingStartTime),
                            string.Format("{0}", existingEndTime),
                            string.Format("{0}", status),
                            "Connector"});
#line 5
 testRunner.Given("I have a command with", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "ConnectorId"});
                table2.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", newStartTime),
                            string.Format("{0}", newEndTime),
                            "Connector"});
#line 9
 testRunner.When("I receive a command with", ((string)(null)), table2, "When ");
#line hidden
#line 13
 testRunner.Then("Nothing Happens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Command received with same value and different timings within the bounds of the e" +
            "xisting command results in no change")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Command received with same value and different timings within the bounds of the e" +
            "xisting command results in no change")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "", "", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "TODAY + 1day", "TODAY + 1day", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "", "", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "", "", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "TODAY + 1day", "TODAY + 1day", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "", "", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "", "", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "TODAY + 1day", "TODAY + 1day", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 12hours", "", "", "Rejected", new string[0])]
        public void CommandReceivedWithSameValueAndDifferentTimingsWithinTheBoundsOfTheExistingCommandResultsInNoChange(string existingStartTime, string newStartTime, string existingEndTime, string newEndTime, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Existing Start Time", existingStartTime);
            argumentsOfScenario.Add("New Start Time", newStartTime);
            argumentsOfScenario.Add("Existing End Time", existingEndTime);
            argumentsOfScenario.Add("New End Time", newEndTime);
            argumentsOfScenario.Add("Status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Command received with same value and different timings within the bounds of the e" +
                    "xisting command results in no change", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "Status",
                            "ConnectorId",
                            "ExternalId",
                            "CommandName"});
                table3.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", existingStartTime),
                            string.Format("{0}", existingEndTime),
                            string.Format("{0}", status),
                            "Connector",
                            "EXT",
                            "Command 1"});
#line 24
 testRunner.Given("I have a command with", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "ConnectorId",
                            "ExternalId",
                            "CommandName"});
                table4.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", newStartTime),
                            string.Format("{0}", newEndTime),
                            "Connector",
                            "EXT",
                            "Command 1"});
#line 28
 testRunner.When("I receive a command with", ((string)(null)), table4, "When ");
#line hidden
#line 32
 testRunner.Then("Nothing Happens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Command received with same value and different timings outside the bounds of the " +
            "existing command results in a new command")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Command received with same value and different timings outside the bounds of the " +
            "existing command results in a new command")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Approved", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 1day", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Rejected", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 12hours", "TODAY - 1day", "TODAY + 1day", "TODAY + 36hours", "Rejected", new string[0])]
        public void CommandReceivedWithSameValueAndDifferentTimingsOutsideTheBoundsOfTheExistingCommandResultsInANewCommand(string existingStartTime, string newStartTime, string existingEndTime, string newEndTime, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Existing Start Time", existingStartTime);
            argumentsOfScenario.Add("New Start Time", newStartTime);
            argumentsOfScenario.Add("Existing End Time", existingEndTime);
            argumentsOfScenario.Add("New End Time", newEndTime);
            argumentsOfScenario.Add("Status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Command received with same value and different timings outside the bounds of the " +
                    "existing command results in a new command", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "Status"});
                table5.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", existingStartTime),
                            string.Format("{0}", existingEndTime),
                            string.Format("{0}", status)});
#line 65
 testRunner.Given("I have a command with", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table6.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", newStartTime),
                            string.Format("{0}", newEndTime)});
#line 69
 testRunner.When("I receive a command with", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table7.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "atLeast",
                            string.Format("{0}", newStartTime),
                            string.Format("{0}", newEndTime)});
#line 73
 testRunner.Then("A new command is created with", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Command received with different values or different RuleId")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Command received with different values or different RuleId")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("1.0", "Rule-2", new string[0])]
        [Xunit.InlineDataAttribute("2.0", "Rule-1", new string[0])]
        [Xunit.InlineDataAttribute("2.0", "Rule-2", new string[0])]
        public void CommandReceivedWithDifferentValuesOrDifferentRuleId(string newValue, string newRule, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("New Value", newValue);
            argumentsOfScenario.Add("New Rule", newRule);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Command received with different values or different RuleId", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime",
                            "Status"});
                table8.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            "exactly",
                            "TODAY - 1day",
                            "TODAY - 1day",
                            "Pending"});
#line 110
 testRunner.Given("I have a command with", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table9.AddRow(new string[] {
                            "TW-12",
                            string.Format("{0}", newRule),
                            string.Format("{0}", newValue),
                            "exactly",
                            "TODAY - 1day",
                            "TODAY - 1day"});
#line 114
 testRunner.When("I receive a command with", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table10.AddRow(new string[] {
                            "TW-12",
                            string.Format("{0}", newRule),
                            string.Format("{0}", newValue),
                            "exactly",
                            "TODAY - 1day",
                            "TODAY - 1day"});
#line 118
 testRunner.Then("A new command is created with", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Two commands received in the same batch with different values and command types")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Two commands received in the same batch with different values and command types")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("atLeast", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("atLeast", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("atLeast", "exactly", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "exactly", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "exactly", new string[0])]
        public void TwoCommandsReceivedInTheSameBatchWithDifferentValuesAndCommandTypes(string newType1, string newType2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("New Type 1", newType1);
            argumentsOfScenario.Add("New Type 2", newType2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two commands received in the same batch with different values and command types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table11.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            string.Format("{0}", newType1),
                            "TODAY - 1day",
                            "TODAY + 1day"});
                table11.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "2.0",
                            string.Format("{0}", newType2),
                            "TODAY - 1day",
                            "TODAY + 1day"});
#line 131
 testRunner.When("I receive a command with", ((string)(null)), table11, "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "StartTime",
                            "EndTime"});
                table12.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "1.0",
                            string.Format("{0}", newType1),
                            "TODAY - 1day",
                            "TODAY + 1day"});
                table12.AddRow(new string[] {
                            "TW-12",
                            "Rule-1",
                            "2.0",
                            string.Format("{0}", newType2),
                            "TODAY - 1day",
                            "TODAY + 1day"});
#line 136
 testRunner.Then("A new command is created with", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Commands received has invalid connector id, twin id, external id, endtime")]
        [Xunit.TraitAttribute("FeatureTitle", "Requested Command conflict resolution")]
        [Xunit.TraitAttribute("Description", "Commands received has invalid connector id, twin id, external id, endtime")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("atLeast", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("atLeast", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("atLeast", "exactly", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("atMost", "exactly", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "atLeast", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "atMost", new string[0])]
        [Xunit.InlineDataAttribute("exactly", "exactly", new string[0])]
        public void CommandsReceivedHasInvalidConnectorIdTwinIdExternalIdEndtime(string newType1, string newType2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("New Type 1", newType1);
            argumentsOfScenario.Add("New Type 2", newType2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Commands received has invalid connector id, twin id, external id, endtime", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalId",
                            "ConnectorId",
                            "TwinId",
                            "RuleId",
                            "Value",
                            "Type",
                            "Start",
                            "End"});
                table13.AddRow(new string[] {
                            "EXT",
                            "Connector",
                            "TW-12",
                            "Rule-1",
                            "2.0",
                            string.Format("{0}", newType2),
                            "2024-01-01T00:00:00Z",
                            "2024-01-02T00:00:00Z"});
                table13.AddRow(new string[] {
                            "EXT",
                            "Connector",
                            "TW-12",
                            "Rule-2",
                            "2.0",
                            string.Format("{0}", newType2),
                            "2024-01-01T00:00:00Z",
                            "1999-01-02T00:00:00Z"});
                table13.AddRow(new string[] {
                            "EXT",
                            "Connector",
                            "invalid-twin-id",
                            "Rule-3",
                            "1.0",
                            string.Format("{0}", newType1),
                            "2024-01-01T00:00:00Z",
                            "2024-02-02T00:00:00Z"});
                table13.AddRow(new string[] {
                            "EXT",
                            "invalid-connector-id",
                            "TW-12",
                            "Rule-4",
                            "1.0",
                            string.Format("{0}", newType1),
                            "2024-01-01T00:00:00Z",
                            "2024-02-02T00:00:00Z"});
                table13.AddRow(new string[] {
                            "invalid-external-id",
                            "Connector",
                            "TW-12",
                            "Rule-5",
                            "1.0",
                            string.Format("{0}", newType1),
                            "2024-01-01T00:00:00Z",
                            "2024-02-02T00:00:00Z"});
#line 156
    testRunner.When("I receive a command with", ((string)(null)), table13, "When ");
#line hidden
#line 164
    testRunner.Then("Nothing Happens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RequestedCommandConflictResolutionFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RequestedCommandConflictResolutionFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
