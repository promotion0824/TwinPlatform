//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.DigitalTwins.Core;
using Microsoft.AspNetCore.JsonPatch.Operations;
using Willow.Model.Async;
using Willow.Model.Adt;
using Willow.Model.Requests;
using Willow.Model.Responses;
using Willow.Model.Graph;
using Willow.DataQuality.Model.Capability;
using Willow.DataQuality.Model.Responses;
using Willow.DataQuality.Model.Validation;
using Willow.AzureDigitalTwins.SDK.JsonConverters.Factory;
using Willow.AzureDigitalTwins.SDK.JsonConverters.Converters;
using Willow.Batch;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Willow.AzureDigitalTwins.SDK.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDQCapabilityClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates status
        /// </summary>
        /// <returns>Returns when status created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateStatusAsync(System.Collections.Generic.IEnumerable<CapabilityStatusDto> status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DQCapabilityClient : BaseClient, IDQCapabilityClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DQCapabilityClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates status
        /// </summary>
        /// <returns>Returns when status created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateStatusAsync(System.Collections.Generic.IEnumerable<CapabilityStatusDto> status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(status, typeof(System.Collections.Generic.IEnumerable<CapabilityStatusDto>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQCapability"
                    urlBuilder_.Append("DQCapability");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no status provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDQRuleClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download file by name
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadRuleFileAsync(string name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete file by Rule Id
        /// <br/>Sample request: https://localhost:8001/dqrule/delete?ruleId=Asset-Validation
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRuleFileAsync(string ruleId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all Rules files
        /// <br/>Sample request: https://localhost:8001/dqrule/deleteall
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload one or more rules in JSON HTTP form files.
        /// <br/>Rules are stored by the "Id" specified in the rule-template, not by the filename that contais the rule 
        /// <br/>  it's up to the caller to make sure that multiple files don't redefine the same rule -
        /// <br/>  the last one in wins.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RuleFileUploadResponse> UploadRuleFilesAsync(System.Collections.Generic.IEnumerable<FileParameter> files = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the data quality rules. Note that these are pre-loaded so the results
        /// <br/>  will be returned immediately.
        /// </summary>
        /// <returns>A list of data quality rules</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRulesResponse> GetDataQualityRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DQRuleClient : BaseClient, IDQRuleClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DQRuleClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download file by name
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> DownloadRuleFileAsync(string name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQRule/download"
                    urlBuilder_.Append("DQRule/download");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete file by Rule Id
        /// <br/>Sample request: https://localhost:8001/dqrule/delete?ruleId=Asset-Validation
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteRuleFileAsync(string ruleId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQRule/delete"
                    urlBuilder_.Append("DQRule/delete");
                    urlBuilder_.Append('?');
                    if (ruleId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ruleId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all Rules files
        /// <br/>Sample request: https://localhost:8001/dqrule/deleteall
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAllRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQRule/deleteall"
                    urlBuilder_.Append("DQRule/deleteall");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload one or more rules in JSON HTTP form files.
        /// <br/>Rules are stored by the "Id" specified in the rule-template, not by the filename that contais the rule 
        /// <br/>  it's up to the caller to make sure that multiple files don't redefine the same rule -
        /// <br/>  the last one in wins.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RuleFileUploadResponse> UploadRuleFilesAsync(System.Collections.Generic.IEnumerable<FileParameter> files = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (files != null)
                    {
                        foreach (var item_ in files)
                        {
                            var content_files_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_files_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_files_, "files", item_.FileName ?? "files");
                        }
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQRule/upload"
                    urlBuilder_.Append("DQRule/upload");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuleFileUploadResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the data quality rules. Note that these are pre-loaded so the results
        /// <br/>  will be returned immediately.
        /// </summary>
        /// <returns>A list of data quality rules</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetRulesResponse> GetDataQualityRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQRule/rules"
                    urlBuilder_.Append("DQRule/rules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRulesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDQValidationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Write Validation results to ADX
        /// </summary>
        /// <returns>Returns when results are written to ADX</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateValidationResultsAsync(System.Collections.Generic.IEnumerable<ValidationResults> validationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<ValidationResults>> GetTwinDataQualityResultsAsync(string id, System.Collections.Generic.IEnumerable<string> dtId = null, int? pagesize = null, string continuationtoken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<ValidationResults>> GetTwinDataQualityResultsByModelIdsAsync(System.Collections.Generic.IEnumerable<string> modelIds = null, System.Collections.Generic.IEnumerable<string> resultSources = null, System.Collections.Generic.IEnumerable<Result> resultTypes = null, System.Collections.Generic.IEnumerable<CheckType> checkTypes = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, string searchString = null, string locationId = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Triggers an async twins validation job
        /// </summary>
        /// <param name="userId">User Id</param>
        /// <param name="modelIds">Model ids</param>
        /// <param name="locationId">Location Id</param>
        /// <param name="exactModelMatch">Indicates if model filter must be exact match</param>
        /// <param name="startCheckTime">Starting Export time of the Twins</param>
        /// <param name="endCheckTime">Ending Export time of the Twin</param>
        /// <returns>Twins validation job created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwinsValidationJob> TriggerTwinsValidationAsync(string userId = null, System.Collections.Generic.IEnumerable<string> modelIds = null, string locationId = null, bool? exactModelMatch = null, System.DateTimeOffset? startCheckTime = null, System.DateTimeOffset? endCheckTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search twin validation jobs filtering by query string parameters
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"jobId": "user@domain.com.Twins.2022.08.17.14.21.49",
        /// <br/>            				"details": {
        /// <br/>            					"status": "Queued"
        /// <br/>            				},
        /// <br/>            				"createTime": "2022-08-17T13:59:29.2075064Z",
        /// <br/>            				"userId": "user@domain.com",
        /// <br/>            				"target": [
        /// <br/>            					"Twins"
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="id">twin validation job Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="status">twin validation job status</param>
        /// <param name="from">twin validation job creation date time from filter</param>
        /// <param name="to">twin validation job creation date time to filter</param>
        /// <param name="fullDetails">Indicates if full details body from twin validation jobs must be retrieved</param>
        /// <returns>Returns a collection of twin validation jobs that match the provided filters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TwinsValidationJob>> FindValidationJobsAsync(string id = null, string userId = null, AsyncJobStatus? status = null, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, bool? fullDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwinsValidationJob> GetLatestValidationJobAsync(AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete twin validation jobs by jobId
        /// <br/>Sample request: https://https://localhost:8001/dqvalidation/delete?jobIds=nsmoorthy@willowinc.com.Twins.2023.03.24.18.39.26
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteValidationJobAsync(System.Collections.Generic.IEnumerable<string> jobIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DQValidationClient : BaseClient, IDQValidationClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DQValidationClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Write Validation results to ADX
        /// </summary>
        /// <returns>Returns when results are written to ADX</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateValidationResultsAsync(System.Collections.Generic.IEnumerable<ValidationResults> validationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (validationData == null)
                throw new System.ArgumentNullException("validationData");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(validationData, typeof(System.Collections.Generic.IEnumerable<ValidationResults>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation"
                    urlBuilder_.Append("DQValidation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no status provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<ValidationResults>> GetTwinDataQualityResultsAsync(string id, System.Collections.Generic.IEnumerable<string> dtId = null, int? pagesize = null, string continuationtoken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationtoken != null)
                        request_.Headers.TryAddWithoutValidation("continuationtoken", ConvertToString(continuationtoken, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/{id}"
                    urlBuilder_.Append("DQValidation/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (dtId != null)
                    {
                        foreach (var item_ in dtId) { urlBuilder_.Append(System.Uri.EscapeDataString("dtId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pagesize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pagesize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pagesize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<ValidationResults>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<ValidationResults>> GetTwinDataQualityResultsByModelIdsAsync(System.Collections.Generic.IEnumerable<string> modelIds = null, System.Collections.Generic.IEnumerable<string> resultSources = null, System.Collections.Generic.IEnumerable<Result> resultTypes = null, System.Collections.Generic.IEnumerable<CheckType> checkTypes = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, string searchString = null, string locationId = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationToken != null)
                        request_.Headers.TryAddWithoutValidation("continuationToken", ConvertToString(continuationToken, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/modelid"
                    urlBuilder_.Append("DQValidation/modelid");
                    urlBuilder_.Append('?');
                    if (modelIds != null)
                    {
                        foreach (var item_ in modelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("modelIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (resultSources != null)
                    {
                        foreach (var item_ in resultSources) { urlBuilder_.Append(System.Uri.EscapeDataString("resultSources")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (resultTypes != null)
                    {
                        foreach (var item_ in resultTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("resultTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (checkTypes != null)
                    {
                        foreach (var item_ in checkTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("checkTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchString != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchString")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("locationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<ValidationResults>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Triggers an async twins validation job
        /// </summary>
        /// <param name="userId">User Id</param>
        /// <param name="modelIds">Model ids</param>
        /// <param name="locationId">Location Id</param>
        /// <param name="exactModelMatch">Indicates if model filter must be exact match</param>
        /// <param name="startCheckTime">Starting Export time of the Twins</param>
        /// <param name="endCheckTime">Ending Export time of the Twin</param>
        /// <returns>Twins validation job created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TwinsValidationJob> TriggerTwinsValidationAsync(string userId = null, System.Collections.Generic.IEnumerable<string> modelIds = null, string locationId = null, bool? exactModelMatch = null, System.DateTimeOffset? startCheckTime = null, System.DateTimeOffset? endCheckTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/validate"
                    urlBuilder_.Append("DQValidation/validate");
                    urlBuilder_.Append('?');
                    if (modelIds != null)
                    {
                        foreach (var item_ in modelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("modelIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("locationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactModelMatch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactModelMatch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactModelMatch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startCheckTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startCheckTime")).Append('=').Append(System.Uri.EscapeDataString(startCheckTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endCheckTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endCheckTime")).Append('=').Append(System.Uri.EscapeDataString(endCheckTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TwinsValidationJob>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search twin validation jobs filtering by query string parameters
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"jobId": "user@domain.com.Twins.2022.08.17.14.21.49",
        /// <br/>            				"details": {
        /// <br/>            					"status": "Queued"
        /// <br/>            				},
        /// <br/>            				"createTime": "2022-08-17T13:59:29.2075064Z",
        /// <br/>            				"userId": "user@domain.com",
        /// <br/>            				"target": [
        /// <br/>            					"Twins"
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="id">twin validation job Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="status">twin validation job status</param>
        /// <param name="from">twin validation job creation date time from filter</param>
        /// <param name="to">twin validation job creation date time to filter</param>
        /// <param name="fullDetails">Indicates if full details body from twin validation jobs must be retrieved</param>
        /// <returns>Returns a collection of twin validation jobs that match the provided filters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TwinsValidationJob>> FindValidationJobsAsync(string id = null, string userId = null, AsyncJobStatus? status = null, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, bool? fullDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/search"
                    urlBuilder_.Append("DQValidation/search");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fullDetails != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fullDetails")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fullDetails, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TwinsValidationJob>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TwinsValidationJob> GetLatestValidationJobAsync(AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/get-latest-job"
                    urlBuilder_.Append("DQValidation/get-latest-job");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TwinsValidationJob>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete twin validation jobs by jobId
        /// <br/>Sample request: https://https://localhost:8001/dqvalidation/delete?jobIds=nsmoorthy@willowinc.com.Twins.2023.03.24.18.39.26
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteValidationJobAsync(System.Collections.Generic.IEnumerable<string> jobIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DQValidation/delete"
                    urlBuilder_.Append("DQValidation/delete");
                    urlBuilder_.Append('?');
                    if (jobIds != null)
                    {
                        foreach (var item_ in jobIds) { urlBuilder_.Append(System.Uri.EscapeDataString("jobIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICacheClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clears the cache from the memory for the supplied entity types
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST
        /// <br/>    ["twins", "relationships", "models"]
        /// </remarks>
        /// <param name="entityTypes">Array of Entity Types ["Twins","Models","Relationships"]</param>
        /// <returns>Returns the Ok result with no content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClearCacheAsync(System.Collections.Generic.IEnumerable<EntityType> entityTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clears and reloads the cache
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshCacheAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CacheClient : BaseClient, ICacheClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CacheClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clears the cache from the memory for the supplied entity types
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST
        /// <br/>    ["twins", "relationships", "models"]
        /// </remarks>
        /// <param name="entityTypes">Array of Entity Types ["Twins","Models","Relationships"]</param>
        /// <returns>Returns the Ok result with no content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClearCacheAsync(System.Collections.Generic.IEnumerable<EntityType> entityTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityTypes == null)
                throw new System.ArgumentNullException("entityTypes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(entityTypes, typeof(System.Collections.Generic.IEnumerable<EntityType>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Cache/clear"
                    urlBuilder_.Append("Cache/clear");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("When supplied entity types array is not valid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clears and reloads the cache
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RefreshCacheAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Cache/refresh"
                    urlBuilder_.Append("Cache/refresh");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDocumentsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a document twin and uploads file
        /// </summary>
        /// <returns>Document twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicDigitalTwin> CreateDocumentAsync(string twin_Id = null, ETag twin_ETag = null, System.DateTimeOffset? twin_LastUpdatedOn = null, string twin_Metadata_ModelId = null, System.Collections.Generic.IDictionary<string, DigitalTwinPropertyMetadata> twin_Metadata_PropertyMetadata = null, System.Collections.Generic.IDictionary<string, object> twin_Contents = null, bool? shareStorageForSameFile = null, FileParameter formFile = null, string userEmail = null, string uniqueId = null, string siteId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateDocumentTypeAsync(string id, string documentType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets document stream
        /// </summary>
        /// <param name="id">Document id</param>
        /// <returns>Document stream</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetDocumentStreamAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Associates document to a twin
        /// </summary>
        /// <param name="twinId">Twin id</param>
        /// <param name="documentId">Document id</param>
        /// <returns>Association created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicRelationship> LinkDocumentToTwinAsync(string twinId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete document association to twin
        /// </summary>
        /// <param name="twinId">Twin id</param>
        /// <param name="documentId">Document id</param>
        /// <returns>When association is deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnLinkDocumentFromTwinAsync(string twinId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get new blob upload info for new document
        /// </summary>
        /// <returns>container sas token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlobUploadInfo> GetBlobUploadInfoAsync(System.Collections.Generic.IEnumerable<string> fileNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a document twin - direct blob upload from client's browser approach.
        /// </summary>
        /// <param name="createDocumentTwinRequest">Instance of create document twin request.</param>
        /// <returns>Document twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicDigitalTwin> ClientCreateDocumentAsync(CreateDocumentTwinRequest createDocumentTwinRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get document blobs count
        /// </summary>
        /// <returns>Document blobs count</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetDocumentBlobsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentsClient : BaseClient, IDocumentsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DocumentsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a document twin and uploads file
        /// </summary>
        /// <returns>Document twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicDigitalTwin> CreateDocumentAsync(string twin_Id = null, ETag twin_ETag = null, System.DateTimeOffset? twin_LastUpdatedOn = null, string twin_Metadata_ModelId = null, System.Collections.Generic.IDictionary<string, DigitalTwinPropertyMetadata> twin_Metadata_PropertyMetadata = null, System.Collections.Generic.IDictionary<string, object> twin_Contents = null, bool? shareStorageForSameFile = null, FileParameter formFile = null, string userEmail = null, string uniqueId = null, string siteId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (twin_Id != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(twin_Id, System.Globalization.CultureInfo.InvariantCulture)), "Twin.Id");
                    }

                    if (twin_ETag != null)
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twin_ETag, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "Twin.ETag");
                    }

                    if (twin_LastUpdatedOn != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(twin_LastUpdatedOn, System.Globalization.CultureInfo.InvariantCulture)), "Twin.LastUpdatedOn");
                    }

                    if (twin_Metadata_ModelId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(twin_Metadata_ModelId, System.Globalization.CultureInfo.InvariantCulture)), "Twin.Metadata.ModelId");
                    }

                    if (twin_Metadata_PropertyMetadata != null)
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twin_Metadata_PropertyMetadata, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "Twin.Metadata.PropertyMetadata");
                    }

                    if (twin_Contents != null)
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twin_Contents, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "Twin.Contents");
                    }

                    if (shareStorageForSameFile == null)
                        throw new System.ArgumentNullException("shareStorageForSameFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(shareStorageForSameFile, System.Globalization.CultureInfo.InvariantCulture)), "ShareStorageForSameFile");
                    }

                    if (formFile != null)
                    {
                        var content_formFile_ = new System.Net.Http.StreamContent(formFile.Data);
                        if (!string.IsNullOrEmpty(formFile.ContentType))
                            content_formFile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(formFile.ContentType);
                        content_.Add(content_formFile_, "FormFile", formFile.FileName ?? "FormFile");
                    }

                    if (userEmail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userEmail, System.Globalization.CultureInfo.InvariantCulture)), "UserEmail");
                    }

                    if (uniqueId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(uniqueId, System.Globalization.CultureInfo.InvariantCulture)), "UniqueId");
                    }

                    if (siteId == null)
                        throw new System.ArgumentNullException("siteId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(siteId, System.Globalization.CultureInfo.InvariantCulture)), "SiteId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents"
                    urlBuilder_.Append("Documents");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicDigitalTwin>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Twin with an invalid document model", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateDocumentTypeAsync(string id, string documentType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents/{id}"
                    urlBuilder_.Append("Documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (documentType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("documentType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(documentType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets document stream
        /// </summary>
        /// <param name="id">Document id</param>
        /// <returns>Document stream</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetDocumentStreamAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents/{id}"
                    urlBuilder_.Append("Documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Twin does not contain url", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Target documen not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Associates document to a twin
        /// </summary>
        /// <param name="twinId">Twin id</param>
        /// <param name="documentId">Document id</param>
        /// <returns>Association created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicRelationship> LinkDocumentToTwinAsync(string twinId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinId == null)
                throw new System.ArgumentNullException("twinId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinId}/document/{documentId}"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/document/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicRelationship>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete document association to twin
        /// </summary>
        /// <param name="twinId">Twin id</param>
        /// <param name="documentId">Document id</param>
        /// <returns>When association is deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UnLinkDocumentFromTwinAsync(string twinId, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinId == null)
                throw new System.ArgumentNullException("twinId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinId}/document/{documentId}"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/document/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get new blob upload info for new document
        /// </summary>
        /// <returns>container sas token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BlobUploadInfo> GetBlobUploadInfoAsync(System.Collections.Generic.IEnumerable<string> fileNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents/getBlobUploadInfo"
                    urlBuilder_.Append("Documents/getBlobUploadInfo");
                    urlBuilder_.Append('?');
                    if (fileNames != null)
                    {
                        foreach (var item_ in fileNames) { urlBuilder_.Append(System.Uri.EscapeDataString("fileNames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlobUploadInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a document twin - direct blob upload from client's browser approach.
        /// </summary>
        /// <param name="createDocumentTwinRequest">Instance of create document twin request.</param>
        /// <returns>Document twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicDigitalTwin> ClientCreateDocumentAsync(CreateDocumentTwinRequest createDocumentTwinRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (createDocumentTwinRequest == null)
                throw new System.ArgumentNullException("createDocumentTwinRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(createDocumentTwinRequest, typeof(CreateDocumentTwinRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents/clientUploadDocTwin"
                    urlBuilder_.Append("Documents/clientUploadDocTwin");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicDigitalTwin>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get document blobs count
        /// </summary>
        /// <returns>Document blobs count</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetDocumentBlobsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Documents/getDocumentBlobsCount"
                    urlBuilder_.Append("Documents/getDocumentBlobsCount");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEnvClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the current version of ADT API build.
        /// </summary>
        /// <returns>Document stream</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppVersion> VersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvClient : BaseClient, IEnvClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public EnvClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the current version of ADT API build.
        /// </summary>
        /// <returns>Document stream</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppVersion> VersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Env/version"
                    urlBuilder_.Append("Env/version");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppVersion>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IGraphClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwinGraph> GetTwinGraphAsync(System.Collections.Generic.IEnumerable<string> twinIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphClient : BaseClient, IGraphClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public GraphClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TwinGraph> GetTwinGraphAsync(System.Collections.Generic.IEnumerable<string> twinIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinIds == null)
                throw new System.ArgumentNullException("twinIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twinIds, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Graph"
                    urlBuilder_.Append("Graph");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TwinGraph>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IImportClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import twins (with optional relationships) into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST twins
        /// <br/>    {
        /// <br/>            			"twins": [
        /// <br/>            				{
        /// <br/>            					"$dtId": "BPY-XX1",
        /// <br/>            					"$metadata": {
        /// <br/>            						"$model": "dtmi:com:willowinc:Building;1"
        /// <br/>            					},
        /// <br/>            					"type": "Commercial Office",
        /// <br/>            					"code": "XCODE",
        /// <br/>            					"name": "One Manhattan West"
        /// <br/>            				}
        /// <br/>            			],
        /// <br/>            			"relationships": [
        /// <br/>            				{
        /// <br/>            					"$relationshipId": "includedIn_Portfolio-XX1_BPY-XX1",
        /// <br/>            					"$targetId": "Portfolio-XX1",
        /// <br/>            					"$sourceId": "BPY-XX1",
        /// <br/>            					"$relationshipName": "includedIn"
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Twins.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="importTwins">Twins request with optional relationships</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> TriggerTwinsImportAsync(BulkImportTwinsRequest importTwins, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete twins from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE twins
        /// <br/>            		{
        /// <br/>            			"deleteAll": false,
        /// <br/>            			"twinIds": ["BPW-1MW-Person-1048693609", "BPY-1MW-L01-021"],
        /// <br/>            			"filters": {
        /// <br/>            				"siteID": "122324-34343-4434"
        /// <br/>            			}
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Twins.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> BulkDeleteTwinAsync(BulkDeleteTwinsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import relationships into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST relationships
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"$relationshipId": "includedIn_Portfolio-XX1_BPY-XX1",
        /// <br/>            				"$targetId": "Portfolio-XX1",
        /// <br/>            				"$sourceId": "BPY-XX1",
        /// <br/>            				"$relationshipName": "includedIn"
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Relationships.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="relationships">Collection of relationships to import</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> TriggerRelationshipsImportAsync(System.Collections.Generic.IEnumerable<BasicRelationship> relationships, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete relationships from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE relationships
        /// <br/>            		{
        /// <br/>            			"deleteAll": false,
        /// <br/>            			"twinIds": ["BPW-1MW-Person-1048693609", "BPY-1MW-L01-021"],
        /// <br/>            			"relationshipIds": ["includedIn_Portfolio-XX1_BPY-XX1"]
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Relationships.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> BulkDeleteRelationshipsAsync(BulkDeleteRelationshipsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import models into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST models
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"@id": "dtmi:com:willowinc:Component;1",
        /// <br/>            				"@type": "Interface",
        /// <br/>            				"displayName": {
        /// <br/>            					"en": "Component"
        /// <br/>            				},
        /// <br/>            				"@context": [
        /// <br/>            					"dtmi:dtdl:context;2"
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Models.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="models">Collection of models to import</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> TriggerModelsImportAsync(System.Collections.Generic.IEnumerable<JsonDocument> models, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete models from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE models
        /// <br/>            		{
        /// <br/>            			"modelIds": ["dtmi:com:willowinc:Generator;1"],
        /// <br/>            			"includeDependencies": true
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Models.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> BulkDeleteModelAsync(BulkDeleteModelsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportClient : BaseClient, IImportClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ImportClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import twins (with optional relationships) into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST twins
        /// <br/>    {
        /// <br/>            			"twins": [
        /// <br/>            				{
        /// <br/>            					"$dtId": "BPY-XX1",
        /// <br/>            					"$metadata": {
        /// <br/>            						"$model": "dtmi:com:willowinc:Building;1"
        /// <br/>            					},
        /// <br/>            					"type": "Commercial Office",
        /// <br/>            					"code": "XCODE",
        /// <br/>            					"name": "One Manhattan West"
        /// <br/>            				}
        /// <br/>            			],
        /// <br/>            			"relationships": [
        /// <br/>            				{
        /// <br/>            					"$relationshipId": "includedIn_Portfolio-XX1_BPY-XX1",
        /// <br/>            					"$targetId": "Portfolio-XX1",
        /// <br/>            					"$sourceId": "BPY-XX1",
        /// <br/>            					"$relationshipName": "includedIn"
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Twins.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="importTwins">Twins request with optional relationships</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> TriggerTwinsImportAsync(BulkImportTwinsRequest importTwins, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (importTwins == null)
                throw new System.ArgumentNullException("importTwins");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(importTwins, typeof(BulkImportTwinsRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/twins"
                    urlBuilder_.Append("Import/twins");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If missing twins data in the request body", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete twins from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE twins
        /// <br/>            		{
        /// <br/>            			"deleteAll": false,
        /// <br/>            			"twinIds": ["BPW-1MW-Person-1048693609", "BPY-1MW-L01-021"],
        /// <br/>            			"filters": {
        /// <br/>            				"siteID": "122324-34343-4434"
        /// <br/>            			}
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Twins.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> BulkDeleteTwinAsync(BulkDeleteTwinsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (deleteRequest == null)
                throw new System.ArgumentNullException("deleteRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(deleteRequest, typeof(BulkDeleteTwinsRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/twins"
                    urlBuilder_.Append("Import/twins");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If invalid delete configuration provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import relationships into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST relationships
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"$relationshipId": "includedIn_Portfolio-XX1_BPY-XX1",
        /// <br/>            				"$targetId": "Portfolio-XX1",
        /// <br/>            				"$sourceId": "BPY-XX1",
        /// <br/>            				"$relationshipName": "includedIn"
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Relationships.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="relationships">Collection of relationships to import</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> TriggerRelationshipsImportAsync(System.Collections.Generic.IEnumerable<BasicRelationship> relationships, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (relationships == null)
                throw new System.ArgumentNullException("relationships");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(relationships, typeof(System.Collections.Generic.IEnumerable<BasicRelationship>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/relationships"
                    urlBuilder_.Append("Import/relationships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If missing relationships data in the request body", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete relationships from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE relationships
        /// <br/>            		{
        /// <br/>            			"deleteAll": false,
        /// <br/>            			"twinIds": ["BPW-1MW-Person-1048693609", "BPY-1MW-L01-021"],
        /// <br/>            			"relationshipIds": ["includedIn_Portfolio-XX1_BPY-XX1"]
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Relationships.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> BulkDeleteRelationshipsAsync(BulkDeleteRelationshipsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (deleteRequest == null)
                throw new System.ArgumentNullException("deleteRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(deleteRequest, typeof(BulkDeleteRelationshipsRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/relationships"
                    urlBuilder_.Append("Import/relationships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If invalid delete configuration provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to import models into the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST models
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"@id": "dtmi:com:willowinc:Component;1",
        /// <br/>            				"@type": "Interface",
        /// <br/>            				"displayName": {
        /// <br/>            					"en": "Component"
        /// <br/>            				},
        /// <br/>            				"@context": [
        /// <br/>            					"dtmi:dtdl:context;2"
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Import.Models.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="models">Collection of models to import</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> TriggerModelsImportAsync(System.Collections.Generic.IEnumerable<JsonDocument> models, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (models == null)
                throw new System.ArgumentNullException("models");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(models, typeof(System.Collections.Generic.IEnumerable<JsonDocument>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/models"
                    urlBuilder_.Append("Import/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If missing models data in the request body or missing @id property in models", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete models from the adt instance
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    DELETE models
        /// <br/>            		{
        /// <br/>            			"modelIds": ["dtmi:com:willowinc:Generator;1"],
        /// <br/>            			"includeDependencies": true
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "TLM Delete.Models.user@domain.com.2024.07.29.17.29.46.0279",
        /// <br/>            			"status": "Queued"
        /// <br/>            			"timeCreated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"timeLastUpdated": "2022-08-17T14:21:49.286354Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"jobsEntryDetail":{}
        /// <br/>            		}
        /// </remarks>
        /// <param name="deleteRequest">Delete request</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User data to be stored in the async job</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> BulkDeleteModelAsync(BulkDeleteModelsRequest deleteRequest, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (deleteRequest == null)
                throw new System.ArgumentNullException("deleteRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(deleteRequest, typeof(BulkDeleteModelsRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Import/models"
                    urlBuilder_.Append("Import/models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If invalid delete configuration provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IJobsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Job info
        /// </summary>
        /// <returns>Get Job entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> GetJobsEntryAsync(string jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateOnDemandJobAsync(JsonDocument jobPayload, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates/Updates a Job entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> CreateOrUpdateJobEntryAsync(JobsEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find a Job entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsResponse> FindJobsAsync(JobSearchRequest searchJobs, bool? isPagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Jobs Entry using Willow Pagination Library.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsResponse> ListJobsAsync(BatchRequestDto batchRequestDto, bool? includeDetails = null, bool? includeTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all Job types
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetAllJobTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Jobs entries with the input job ids.
        /// <br/>Ignored bad or not found job ids.
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteJobsEntriesAsync(System.Collections.Generic.IEnumerable<string> jobIds, bool? isHardDelete = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Jobs entries with Jobs TimeCreated earlier than the input date
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteOlderJobEntriesAsync(System.DateTimeOffset? date = null, string jobType = null, bool? hardDelete = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobsClient : BaseClient, IJobsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public JobsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Job info
        /// </summary>
        /// <returns>Get Job entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> GetJobsEntryAsync(string jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/{jobId}"
                    urlBuilder_.Append("Jobs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CreateOnDemandJobAsync(JsonDocument jobPayload, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jobPayload == null)
                throw new System.ArgumentNullException("jobPayload");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jobPayload, typeof(JsonDocument), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/onDemand"
                    urlBuilder_.Append("Jobs/onDemand");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates/Updates a Job entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> CreateOrUpdateJobEntryAsync(JobsEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entry == null)
                throw new System.ArgumentNullException("entry");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(entry, typeof(JobsEntry), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs"
                    urlBuilder_.Append("Jobs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find a Job entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsResponse> FindJobsAsync(JobSearchRequest searchJobs, bool? isPagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (searchJobs == null)
                throw new System.ArgumentNullException("searchJobs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(searchJobs, typeof(JobSearchRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/FindJobs"
                    urlBuilder_.Append("Jobs/FindJobs");
                    urlBuilder_.Append('?');
                    if (isPagination != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPagination")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPagination, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Jobs Entry using Willow Pagination Library.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsResponse> ListJobsAsync(BatchRequestDto batchRequestDto, bool? includeDetails = null, bool? includeTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (batchRequestDto == null)
                throw new System.ArgumentNullException("batchRequestDto");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(batchRequestDto, typeof(BatchRequestDto), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/ListJobs"
                    urlBuilder_.Append("Jobs/ListJobs");
                    urlBuilder_.Append('?');
                    if (includeDetails != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeDetails")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeDetails, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeTotalCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeTotalCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all Job types
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetAllJobTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/JobTypes"
                    urlBuilder_.Append("Jobs/JobTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Jobs entries with the input job ids.
        /// <br/>Ignored bad or not found job ids.
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteJobsEntriesAsync(System.Collections.Generic.IEnumerable<string> jobIds, bool? isHardDelete = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jobIds == null)
                throw new System.ArgumentNullException("jobIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jobIds, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/deleteBulk"
                    urlBuilder_.Append("Jobs/deleteBulk");
                    urlBuilder_.Append('?');
                    if (isHardDelete != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isHardDelete")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHardDelete, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 428)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Jobs entries with Jobs TimeCreated earlier than the input date
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteOlderJobEntriesAsync(System.DateTimeOffset? date = null, string jobType = null, bool? hardDelete = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Jobs/deleteJobsOlderThan"
                    urlBuilder_.Append("Jobs/deleteJobsOlderThan");
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jobType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jobType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jobType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hardDelete != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hardDelete")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hardDelete, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMappingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entries
        /// </summary>
        /// <returns>Get mapped entries</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappedEntryResponse> GetMappedEntriesAsync(MappedEntryRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entries grouped by fieldName, and count of each group.
        /// </summary>
        /// <returns>List of records grouped by fieldName and its count</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MappedEntriesGroupCount>> GetGroupedCountAsync(string fieldName = null, Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entry
        /// </summary>
        /// <returns>Get mapped entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappedEntry> GetMappedEntryAsync(string mappedId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMappedEntryAsync(string mappedId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappedEntry> CreateMappedEntryAsync(CreateMappedEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappedEntry> UpdateMappedEntryAsync(UpdateMappedEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update mapped entries status to specified status.
        /// <br/>Any bad mapped ids will be ignored. Return total number of mapped entries updated.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> UpdateMappedEntryStatusAsync(UpdateMappedEntryStatusRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all mapped entries status to specified status based on MappedEntryAllRequest
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> UpdateAllMappedEntryStatusAsync(MappedEntryAllRequest request, Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete mapped entries with the input mapped ids.
        /// <br/>Ignored bad or not found mapped ids.
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteMappedEntriesAsync(System.Collections.Generic.IEnumerable<string> mappedIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all mapped entries based on MappedEntryDeleteAllRequest.
        /// </summary>
        /// <param name="request">Filter records based on request</param>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteAllMappedEntriesAsync(MappedEntryAllRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetMappedEntriesCountAsync(System.Collections.Generic.IEnumerable<Status> statuses = null, System.Collections.Generic.IEnumerable<string> prefixToMatchId = null, bool? excludePrefixes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Update twin requests
        /// </summary>
        /// <param name="offset">Used to identify the starting point to return records.</param>
        /// <param name="pageSize">Amount of records to fetch for each requests.</param>
        /// <returns>List of update twin requests</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateMappedTwinRequestResponse>> GetUpdateTwinRequestsAsync(int? offset = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the count of update twin requests.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetUpdateTwinRequestsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates update twin request
        /// </summary>
        /// <param name="jsonPatch">List of json patch operations.</param>
        /// <param name="willowTwinId">Willow twin id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateMappedTwinRequest> CreateUpdateTwinRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, string willowTwinId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a update twin request
        /// </summary>
        /// <param name="jsonPatch">List of json patch operations.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateMappedTwinRequest> UpdateTwinUpdateRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, System.Guid? id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upsert update twin request. If record with willowTwinId exists, update it. Otherwise, create a new record.
        /// </summary>
        /// <param name="jsonPatch">json patch</param>
        /// <param name="willowTwinId">willowTwinId</param>
        /// <returns>twin update request</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateMappedTwinRequest> UpsertUpdateTwinRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, string willowTwinId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete update twin requests based on ids.
        /// <br/>Ignored bad or not found ids.
        /// </summary>
        /// <param name="ids">List of updated twin request id</param>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteUpdateTwinRequestsAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all twin update requests
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> DeleteAllUpdateTwinRequestsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a MTI async job and store in storage account.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MtiAsyncJob> CreateMtiAsyncJobAsync(MtiAsyncJobRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update  MTI async job's status and last updated time.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MtiAsyncJob> UpdateMtiAsyncJobStatusAsync(MtiAsyncJob job, AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for MTI async jobs
        /// </summary>
        /// <param name="jobId">Filter by MTI async job's id</param>
        /// <param name="status">Filter by status</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MtiAsyncJob>> FindMtiAsyncJobsAsync(string jobId = null, AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get latest MTI async jobs
        /// </summary>
        /// <param name="status">Filter by status</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MtiAsyncJob> GetLatestMtiAsyncJobAsync(AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappingClient : BaseClient, IMappingClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MappingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entries
        /// </summary>
        /// <returns>Get mapped entries</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappedEntryResponse> GetMappedEntriesAsync(MappedEntryRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(MappedEntryRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/GetMappedEntriesAsync"
                    urlBuilder_.Append("Mapping/GetMappedEntriesAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappedEntryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entries grouped by fieldName, and count of each group.
        /// </summary>
        /// <returns>List of records grouped by fieldName and its count</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MappedEntriesGroupCount>> GetGroupedCountAsync(string fieldName = null, Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/GetGroupedMappedEntriesCount"
                    urlBuilder_.Append("Mapping/GetGroupedMappedEntriesCount");
                    urlBuilder_.Append('?');
                    if (fieldName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fieldName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fieldName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MappedEntriesGroupCount>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapped entry
        /// </summary>
        /// <returns>Get mapped entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappedEntry> GetMappedEntryAsync(string mappedId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (mappedId == null)
                throw new System.ArgumentNullException("mappedId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/{mappedId}"
                    urlBuilder_.Append("Mapping/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mappedId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappedEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteMappedEntryAsync(string mappedId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (mappedId == null)
                throw new System.ArgumentNullException("mappedId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/{mappedId}"
                    urlBuilder_.Append("Mapping/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mappedId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappedEntry> CreateMappedEntryAsync(CreateMappedEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entry == null)
                throw new System.ArgumentNullException("entry");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(entry, typeof(CreateMappedEntry), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping"
                    urlBuilder_.Append("Mapping");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappedEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a mapped entry
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MappedEntry> UpdateMappedEntryAsync(UpdateMappedEntry entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entry == null)
                throw new System.ArgumentNullException("entry");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(entry, typeof(UpdateMappedEntry), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping"
                    urlBuilder_.Append("Mapping");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MappedEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update mapped entries status to specified status.
        /// <br/>Any bad mapped ids will be ignored. Return total number of mapped entries updated.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> UpdateMappedEntryStatusAsync(UpdateMappedEntryStatusRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(UpdateMappedEntryStatusRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/status"
                    urlBuilder_.Append("Mapping/status");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all mapped entries status to specified status based on MappedEntryAllRequest
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> UpdateAllMappedEntryStatusAsync(MappedEntryAllRequest request, Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(MappedEntryAllRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/updateAllstatus"
                    urlBuilder_.Append("Mapping/updateAllstatus");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete mapped entries with the input mapped ids.
        /// <br/>Ignored bad or not found mapped ids.
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteMappedEntriesAsync(System.Collections.Generic.IEnumerable<string> mappedIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (mappedIds == null)
                throw new System.ArgumentNullException("mappedIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(mappedIds, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/deleteBulk"
                    urlBuilder_.Append("Mapping/deleteBulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all mapped entries based on MappedEntryDeleteAllRequest.
        /// </summary>
        /// <param name="request">Filter records based on request</param>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteAllMappedEntriesAsync(MappedEntryAllRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(MappedEntryAllRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/deleteAll"
                    urlBuilder_.Append("Mapping/deleteAll");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetMappedEntriesCountAsync(System.Collections.Generic.IEnumerable<Status> statuses = null, System.Collections.Generic.IEnumerable<string> prefixToMatchId = null, bool? excludePrefixes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/count"
                    urlBuilder_.Append("Mapping/count");
                    urlBuilder_.Append('?');
                    if (statuses != null)
                    {
                        foreach (var item_ in statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("statuses")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (prefixToMatchId != null)
                    {
                        foreach (var item_ in prefixToMatchId) { urlBuilder_.Append(System.Uri.EscapeDataString("prefixToMatchId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (excludePrefixes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludePrefixes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludePrefixes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Update twin requests
        /// </summary>
        /// <param name="offset">Used to identify the starting point to return records.</param>
        /// <param name="pageSize">Amount of records to fetch for each requests.</param>
        /// <returns>List of update twin requests</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateMappedTwinRequestResponse>> GetUpdateTwinRequestsAsync(int? offset = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/GetUpdateTwinRequests"
                    urlBuilder_.Append("Mapping/GetUpdateTwinRequests");
                    urlBuilder_.Append('?');
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UpdateMappedTwinRequestResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the count of update twin requests.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetUpdateTwinRequestsCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/updateTwinRequestsCount"
                    urlBuilder_.Append("Mapping/updateTwinRequestsCount");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates update twin request
        /// </summary>
        /// <param name="jsonPatch">List of json patch operations.</param>
        /// <param name="willowTwinId">Willow twin id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateMappedTwinRequest> CreateUpdateTwinRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, string willowTwinId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jsonPatch == null)
                throw new System.ArgumentNullException("jsonPatch");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jsonPatch, typeof(System.Collections.Generic.IEnumerable<JsonPatchOperation>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/CreateUpdateTwinRequests"
                    urlBuilder_.Append("Mapping/CreateUpdateTwinRequests");
                    urlBuilder_.Append('?');
                    if (willowTwinId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("willowTwinId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(willowTwinId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateMappedTwinRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a update twin request
        /// </summary>
        /// <param name="jsonPatch">List of json patch operations.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateMappedTwinRequest> UpdateTwinUpdateRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, System.Guid? id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jsonPatch == null)
                throw new System.ArgumentNullException("jsonPatch");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jsonPatch, typeof(System.Collections.Generic.IEnumerable<JsonPatchOperation>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/UpdateTwinUpdateRequest"
                    urlBuilder_.Append("Mapping/UpdateTwinUpdateRequest");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateMappedTwinRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upsert update twin request. If record with willowTwinId exists, update it. Otherwise, create a new record.
        /// </summary>
        /// <param name="jsonPatch">json patch</param>
        /// <param name="willowTwinId">willowTwinId</param>
        /// <returns>twin update request</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateMappedTwinRequest> UpsertUpdateTwinRequestAsync(System.Collections.Generic.IEnumerable<JsonPatchOperation> jsonPatch, string willowTwinId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (jsonPatch == null)
                throw new System.ArgumentNullException("jsonPatch");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jsonPatch, typeof(System.Collections.Generic.IEnumerable<JsonPatchOperation>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/UpsertUpdateTwinRequest"
                    urlBuilder_.Append("Mapping/UpsertUpdateTwinRequest");
                    urlBuilder_.Append('?');
                    if (willowTwinId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("willowTwinId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(willowTwinId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateMappedTwinRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete update twin requests based on ids.
        /// <br/>Ignored bad or not found ids.
        /// </summary>
        /// <param name="ids">List of updated twin request id</param>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteUpdateTwinRequestsAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(ids, typeof(System.Collections.Generic.IEnumerable<System.Guid>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/deleteBulkUpdateTwinRequests"
                    urlBuilder_.Append("Mapping/deleteBulkUpdateTwinRequests");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all twin update requests
        /// </summary>
        /// <returns>Total deleted items</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DeleteAllUpdateTwinRequestsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/deleteAllUpdateTwinRequests"
                    urlBuilder_.Append("Mapping/deleteAllUpdateTwinRequests");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a MTI async job and store in storage account.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MtiAsyncJob> CreateMtiAsyncJobAsync(MtiAsyncJobRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(MtiAsyncJobRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/CreateMtiAsyncJob"
                    urlBuilder_.Append("Mapping/CreateMtiAsyncJob");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MtiAsyncJob>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update  MTI async job's status and last updated time.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MtiAsyncJob> UpdateMtiAsyncJobStatusAsync(MtiAsyncJob job, AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (job == null)
                throw new System.ArgumentNullException("job");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(job, typeof(MtiAsyncJob), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/UpdateMtiAsyncJobStatus"
                    urlBuilder_.Append("Mapping/UpdateMtiAsyncJobStatus");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MtiAsyncJob>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for MTI async jobs
        /// </summary>
        /// <param name="jobId">Filter by MTI async job's id</param>
        /// <param name="status">Filter by status</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MtiAsyncJob>> FindMtiAsyncJobsAsync(string jobId = null, AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/FindMtiAsyncJobs"
                    urlBuilder_.Append("Mapping/FindMtiAsyncJobs");
                    urlBuilder_.Append('?');
                    if (jobId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jobId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MtiAsyncJob>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get latest MTI async jobs
        /// </summary>
        /// <param name="status">Filter by status</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MtiAsyncJob> GetLatestMtiAsyncJobAsync(AsyncJobStatus? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Mapping/getLatestMtiAsyncJob"
                    urlBuilder_.Append("Mapping/getLatestMtiAsyncJob");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MtiAsyncJob>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IModelsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get models
        /// </summary>
        /// <remarks>
        /// Sample reponse:
        /// <br/>            
        /// <br/>[
        /// <br/>	{
        /// <br/>		"id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>		"displayName": {
        /// <br/>			"en": "Compressor Run State"
        /// <br/>		},
        /// <br/>		"decommissioned": false,
        /// <br/>		"model": {
        /// <br/>			"@id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Compressor Run State"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:RunState;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		},
        /// <br/>		"twinCount": {
        /// <br/>			"exact": 7,
        /// <br/>			"total": 7
        /// <br/>		}
        /// <br/>	}
        /// <br/>	{
        /// <br/>		...
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="rootModel">Root model to get dependencies from</param>
        /// <param name="includeModelDefinitions">Indicates if full model definition must be returned</param>
        /// <param name="includeTwinCount">Returns calculated stats for twin count</param>
        /// <param name="locationId">Location Id</param>
        /// <param name="sourceType">Indicate which source type to query from</param>
        /// <returns>Returns models from instance</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelResponse>> GetModelsAsync(string rootModel = null, bool? includeModelDefinitions = null, bool? includeTwinCount = null, string locationId = null, SourceType? sourceType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates models
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>	POST
        /// <br/>	[
        /// <br/>		{
        /// <br/>			"@id": "dtmi:com:willowinc:InductanceSensor;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Inductance Sensor"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:QuantitySensor;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		}
        /// <br/>	]
        /// </remarks>
        /// <param name="models">Model definitions</param>
        /// <returns>Returns ok when models created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateModelsAsync(System.Collections.Generic.IEnumerable<JsonDocument> models, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get model by id
        /// </summary>
        /// <remarks>
        /// Sample reponse:
        /// <br/>            
        /// <br/>	{
        /// <br/>		"id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>		"displayName": {
        /// <br/>			"en": "Compressor Run State"
        /// <br/>		},
        /// <br/>		"decommissioned": false,
        /// <br/>		"model": {
        /// <br/>			"@id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Compressor Run State"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:RunState;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		},
        /// <br/>		"twinCount": {
        /// <br/>			"exact": 7,
        /// <br/>			"total": 7
        /// <br/>		}
        /// <br/>	}
        /// </remarks>
        /// <param name="id">Id of the target model</param>
        /// <param name="includeModelDefinitions">Indicates if full model definition must be returned</param>
        /// <param name="includeTwinCount">Returns calculated stats for twin count</param>
        /// <param name="locationId">Location Id</param>
        /// <returns>Returns model from instance</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ModelResponse> GetModelAsync(string id, bool? includeModelDefinitions = null, bool? includeTwinCount = null, string locationId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete model by id
        /// </summary>
        /// <param name="id">Model id to delete</param>
        /// <returns>When model is successfully delete</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteModelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to load models from repositories
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST upgrade/repo
        /// <br/>    [
        /// <br/>            			{
        /// <br/>            				"owner": "willowinc",
        /// <br/>            				"repository": "opendigitaltwins-building",
        /// <br/>            				"path": "ontology",
        /// <br/>            				"submodules": ["Ontology/opendigitaltwins-building"]
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "user@domain.com.Models.2022.08.10.15.08.16",
        /// <br/>            			"details": {
        /// <br/>            				"status": "Queued"
        /// <br/>            			},
        /// <br/>            			"createTime": "2022-08-10T15:08:16.8065658Z",
        /// <br/>            			"lastUpdateTime": "2022-08-10T15:08:22.1577255Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"target": [
        /// <br/>            				"Models"
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="repositories">Repositories information</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User Data</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> UpgradeFromReposAsync(System.Collections.Generic.IEnumerable<UpgradeModelsRepoRequest> repositories, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to load models from zip files
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "user@domain.com.Models.2022.08.10.15.08.16",
        /// <br/>            			"details": {
        /// <br/>            				"status": "Queued"
        /// <br/>            			},
        /// <br/>            			"createTime": "2022-08-10T15:08:16.8065658Z",
        /// <br/>            			"lastUpdateTime": "2022-08-10T15:08:22.1577255Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"target": [
        /// <br/>            				"Models"
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="path">Path to folder that contains model definition</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> UpgradeFromZipFilesAsync(string userId = null, string path = null, System.Collections.Generic.IEnumerable<FileParameter> zipFiles = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelsClient : BaseClient, IModelsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ModelsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get models
        /// </summary>
        /// <remarks>
        /// Sample reponse:
        /// <br/>            
        /// <br/>[
        /// <br/>	{
        /// <br/>		"id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>		"displayName": {
        /// <br/>			"en": "Compressor Run State"
        /// <br/>		},
        /// <br/>		"decommissioned": false,
        /// <br/>		"model": {
        /// <br/>			"@id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Compressor Run State"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:RunState;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		},
        /// <br/>		"twinCount": {
        /// <br/>			"exact": 7,
        /// <br/>			"total": 7
        /// <br/>		}
        /// <br/>	}
        /// <br/>	{
        /// <br/>		...
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="rootModel">Root model to get dependencies from</param>
        /// <param name="includeModelDefinitions">Indicates if full model definition must be returned</param>
        /// <param name="includeTwinCount">Returns calculated stats for twin count</param>
        /// <param name="locationId">Location Id</param>
        /// <param name="sourceType">Indicate which source type to query from</param>
        /// <returns>Returns models from instance</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelResponse>> GetModelsAsync(string rootModel = null, bool? includeModelDefinitions = null, bool? includeTwinCount = null, string locationId = null, SourceType? sourceType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models"
                    urlBuilder_.Append("Models");
                    urlBuilder_.Append('?');
                    if (rootModel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rootModel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rootModel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeModelDefinitions != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeModelDefinitions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeModelDefinitions, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeTwinCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeTwinCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeTwinCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("locationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModelResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If twin count is not requested and location id is sent", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates models
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>	POST
        /// <br/>	[
        /// <br/>		{
        /// <br/>			"@id": "dtmi:com:willowinc:InductanceSensor;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Inductance Sensor"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:QuantitySensor;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		}
        /// <br/>	]
        /// </remarks>
        /// <param name="models">Model definitions</param>
        /// <returns>Returns ok when models created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateModelsAsync(System.Collections.Generic.IEnumerable<JsonDocument> models, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (models == null)
                throw new System.ArgumentNullException("models");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(models, typeof(System.Collections.Generic.IEnumerable<JsonDocument>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models"
                    urlBuilder_.Append("Models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no models provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get model by id
        /// </summary>
        /// <remarks>
        /// Sample reponse:
        /// <br/>            
        /// <br/>	{
        /// <br/>		"id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>		"displayName": {
        /// <br/>			"en": "Compressor Run State"
        /// <br/>		},
        /// <br/>		"decommissioned": false,
        /// <br/>		"model": {
        /// <br/>			"@id": "dtmi:com:willowinc:CompressorRunState;1",
        /// <br/>			"@type": "Interface",
        /// <br/>			"displayName": {
        /// <br/>				"en": "Compressor Run State"
        /// <br/>			},
        /// <br/>			"extends": [
        /// <br/>				"dtmi:com:willowinc:RunState;1"
        /// <br/>			],
        /// <br/>			"contents": [],
        /// <br/>			"@context": [
        /// <br/>				"dtmi:dtdl:context;2"
        /// <br/>			]
        /// <br/>		},
        /// <br/>		"twinCount": {
        /// <br/>			"exact": 7,
        /// <br/>			"total": 7
        /// <br/>		}
        /// <br/>	}
        /// </remarks>
        /// <param name="id">Id of the target model</param>
        /// <param name="includeModelDefinitions">Indicates if full model definition must be returned</param>
        /// <param name="includeTwinCount">Returns calculated stats for twin count</param>
        /// <param name="locationId">Location Id</param>
        /// <returns>Returns model from instance</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ModelResponse> GetModelAsync(string id, bool? includeModelDefinitions = null, bool? includeTwinCount = null, string locationId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models/{id}"
                    urlBuilder_.Append("Models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (includeModelDefinitions != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeModelDefinitions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeModelDefinitions, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeTwinCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeTwinCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeTwinCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("locationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If twin count is not requested and location id is sent", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If model not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete model by id
        /// </summary>
        /// <param name="id">Model id to delete</param>
        /// <returns>When model is successfully delete</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteModelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models/{id}"
                    urlBuilder_.Append("Models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("When model is not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to load models from repositories
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// <br/>            
        /// <br/>    POST upgrade/repo
        /// <br/>    [
        /// <br/>            			{
        /// <br/>            				"owner": "willowinc",
        /// <br/>            				"repository": "opendigitaltwins-building",
        /// <br/>            				"path": "ontology",
        /// <br/>            				"submodules": ["Ontology/opendigitaltwins-building"]
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "user@domain.com.Models.2022.08.10.15.08.16",
        /// <br/>            			"details": {
        /// <br/>            				"status": "Queued"
        /// <br/>            			},
        /// <br/>            			"createTime": "2022-08-10T15:08:16.8065658Z",
        /// <br/>            			"lastUpdateTime": "2022-08-10T15:08:22.1577255Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"target": [
        /// <br/>            				"Models"
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="repositories">Repositories information</param>
        /// <param name="userId">User Id</param>
        /// <param name="userData">User Data</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> UpgradeFromReposAsync(System.Collections.Generic.IEnumerable<UpgradeModelsRepoRequest> repositories, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (repositories == null)
                throw new System.ArgumentNullException("repositories");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(repositories, typeof(System.Collections.Generic.IEnumerable<UpgradeModelsRepoRequest>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models/upgrade/repo"
                    urlBuilder_.Append("Models/upgrade/repo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If missing repositories data, no models are retrieved from the repos or submodules incorrect path (submodules path is case sensitive)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to load models from zip files
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"jobId": "user@domain.com.Models.2022.08.10.15.08.16",
        /// <br/>            			"details": {
        /// <br/>            				"status": "Queued"
        /// <br/>            			},
        /// <br/>            			"createTime": "2022-08-10T15:08:16.8065658Z",
        /// <br/>            			"lastUpdateTime": "2022-08-10T15:08:22.1577255Z",
        /// <br/>            			"userId": "user@domain.com",
        /// <br/>            			"target": [
        /// <br/>            				"Models"
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="path">Path to folder that contains model definition</param>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> UpgradeFromZipFilesAsync(string userId = null, string path = null, System.Collections.Generic.IEnumerable<FileParameter> zipFiles = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (zipFiles != null)
                    {
                        foreach (var item_ in zipFiles)
                        {
                            var content_zipFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_zipFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_zipFiles_, "zipFiles", item_.FileName ?? "zipFiles");
                        }
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Models/upgrade/zip"
                    urlBuilder_.Append("Models/upgrade/zip");
                    urlBuilder_.Append('?');
                    if (path != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("path")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no files provided or no models in files", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IQueryClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Executes provided query to return twins and appends relationships [Use only when other endpoints do not have satisfy your needs]
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            		POST twins for ADT
        /// <br/>            		{
        /// <br/>            			"query": "select * from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')",
        /// <br/>            			"includeRelationships": false,
        /// <br/>            			"idsOnly": false
        /// <br/>            		}
        /// <br/>            		POST twins for ADX
        /// <br/>            		{
        /// <br/>            		    "query": "ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1'",
        /// <br/>            			"includeRelationships": false,
        /// <br/>            			"idsOnly": false,
        /// <br/>            			"isAdx": false
        /// <br/>    }
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"content": [
        /// <br/>            			{
        /// <br/>            					"twin": {
        /// <br/>            						"$dtId": "BPY-1MW",
        /// <br/>            						"$metadata": {
        /// <br/>            							"$model": "dtmi:com:willowinc:Building;1
        /// <br/>            						},
        /// <br/>            						"type": "Commercial Office",
        /// <br/>            						"coordinates": {
        /// <br/>            							"latitude": 40.7528,
        /// <br/>            							"longitude": -73.997934
        /// <br/>            						},
        /// <br/>            						"elevation": 34,
        /// <br/>            						"height": 995,
        /// <br/>            						"uniqueID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            						"code": "1MX",
        /// <br/>            						"name": "One Miami West",
        /// <br/>            						"siteID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            						"address": {
        /// <br/>            							"region": "NY"
        /// <br/>            						}
        /// <br/>            					}
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="queryTwinsRequest">Query parameters</param>
        /// <param name="sourceType">Adx/AdtQuery</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>With found twins</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<TwinWithRelationships>> QueryTwinsWithRelationshipsAsync(QueryTwinsRequest queryTwinsRequest, SourceType? sourceType = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Executes provided query and returns results without parsing [Use only when other endpoints do not have satisfy your needs]
        /// </summary>
        /// <remarks>
        /// Sample ADT request 
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"select count() from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')"
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample ADX request 
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1' | count"
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"content": [
        /// <br/>            				{
        /// <br/>            					"COUNT": 1
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="query">Query to be executed</param>
        /// <param name="sourceType">Adx/AdtQuery</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>Query results</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<JsonDocument>> QueryAsync(string query, SourceType? sourceType = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryClient : BaseClient, IQueryClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public QueryClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Executes provided query to return twins and appends relationships [Use only when other endpoints do not have satisfy your needs]
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            		POST twins for ADT
        /// <br/>            		{
        /// <br/>            			"query": "select * from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')",
        /// <br/>            			"includeRelationships": false,
        /// <br/>            			"idsOnly": false
        /// <br/>            		}
        /// <br/>            		POST twins for ADX
        /// <br/>            		{
        /// <br/>            		    "query": "ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1'",
        /// <br/>            			"includeRelationships": false,
        /// <br/>            			"idsOnly": false,
        /// <br/>            			"isAdx": false
        /// <br/>    }
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"content": [
        /// <br/>            			{
        /// <br/>            					"twin": {
        /// <br/>            						"$dtId": "BPY-1MW",
        /// <br/>            						"$metadata": {
        /// <br/>            							"$model": "dtmi:com:willowinc:Building;1
        /// <br/>            						},
        /// <br/>            						"type": "Commercial Office",
        /// <br/>            						"coordinates": {
        /// <br/>            							"latitude": 40.7528,
        /// <br/>            							"longitude": -73.997934
        /// <br/>            						},
        /// <br/>            						"elevation": 34,
        /// <br/>            						"height": 995,
        /// <br/>            						"uniqueID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            						"code": "1MX",
        /// <br/>            						"name": "One Miami West",
        /// <br/>            						"siteID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            						"address": {
        /// <br/>            							"region": "NY"
        /// <br/>            						}
        /// <br/>            					}
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="queryTwinsRequest">Query parameters</param>
        /// <param name="sourceType">Adx/AdtQuery</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>With found twins</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<TwinWithRelationships>> QueryTwinsWithRelationshipsAsync(QueryTwinsRequest queryTwinsRequest, SourceType? sourceType = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (queryTwinsRequest == null)
                throw new System.ArgumentNullException("queryTwinsRequest");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationToken != null)
                        request_.Headers.TryAddWithoutValidation("continuationToken", ConvertToString(continuationToken, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(queryTwinsRequest, typeof(QueryTwinsRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Query/twins"
                    urlBuilder_.Append("Query/twins");
                    urlBuilder_.Append('?');
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<TwinWithRelationships>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Executes provided query and returns results without parsing [Use only when other endpoints do not have satisfy your needs]
        /// </summary>
        /// <remarks>
        /// Sample ADT request 
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"select count() from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')"
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample ADX request 
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1' | count"
        /// <br/>            		}
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            
        /// <br/>            		{
        /// <br/>            			"content": [
        /// <br/>            				{
        /// <br/>            					"COUNT": 1
        /// <br/>            				}
        /// <br/>            			]
        /// <br/>            		}
        /// </remarks>
        /// <param name="query">Query to be executed</param>
        /// <param name="sourceType">Adx/AdtQuery</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>Query results</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<JsonDocument>> QueryAsync(string query, SourceType? sourceType = null, int? pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (query == null)
                throw new System.ArgumentNullException("query");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationToken != null)
                        request_.Headers.TryAddWithoutValidation("continuationToken", ConvertToString(continuationToken, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(query, typeof(string), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Query"
                    urlBuilder_.Append("Query");
                    urlBuilder_.Append('?');
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<JsonDocument>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRelationshipsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or replaces relationship
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		PUT
        /// <br/>            		{
        /// <br/>            			"$relationshipId": "includedIn_Portfolio-BPY_54fcd904-44a7-4459-b43c-5f936b2717b0",
        /// <br/>            			"$targetId": "Portfolio-BPY",
        /// <br/>            			"$sourceId": "NYC-MW",
        /// <br/>            			"$relationshipName": "includedIn"
        /// <br/>            		}
        /// </remarks>
        /// <param name="relationship">Relationship data</param>
        /// <returns>Updated relationship</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicRelationship> UpsertRelationshipAsync(BasicRelationship relationship, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a twin relationship
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipid">Relationship id</param>
        /// <returns>When target relationship is deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRelationshipAsync(string twinid, string relationshipid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a twin relationship
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipid">Relationship id</param>
        /// <returns>Target relationship retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicRelationship> GetRelationshipAsync(string twinid, string relationshipid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets outgoing relationships for a twin
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipName">Target relationship name</param>
        /// <returns>Target relationships retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BasicRelationship>> GetRelationshipsAsync(string twinid, string relationshipName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets incoming relationships for a twin
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <returns>Target relationships retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BasicRelationship>> GetIncomingRelationshipsAsync(string twinid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipsClient : BaseClient, IRelationshipsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RelationshipsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or replaces relationship
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		PUT
        /// <br/>            		{
        /// <br/>            			"$relationshipId": "includedIn_Portfolio-BPY_54fcd904-44a7-4459-b43c-5f936b2717b0",
        /// <br/>            			"$targetId": "Portfolio-BPY",
        /// <br/>            			"$sourceId": "NYC-MW",
        /// <br/>            			"$relationshipName": "includedIn"
        /// <br/>            		}
        /// </remarks>
        /// <param name="relationship">Relationship data</param>
        /// <returns>Updated relationship</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicRelationship> UpsertRelationshipAsync(BasicRelationship relationship, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (relationship == null)
                throw new System.ArgumentNullException("relationship");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(relationship, typeof(BasicRelationship), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Relationships"
                    urlBuilder_.Append("Relationships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicRelationship>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If provided relationship is missing source id, target id or name", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a twin relationship
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipid">Relationship id</param>
        /// <returns>When target relationship is deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteRelationshipAsync(string twinid, string relationshipid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinid == null)
                throw new System.ArgumentNullException("twinid");

            if (relationshipid == null)
                throw new System.ArgumentNullException("relationshipid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinid}/relationship/{relationshipid}"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relationshipid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Relationship not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a twin relationship
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipid">Relationship id</param>
        /// <returns>Target relationship retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicRelationship> GetRelationshipAsync(string twinid, string relationshipid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinid == null)
                throw new System.ArgumentNullException("twinid");

            if (relationshipid == null)
                throw new System.ArgumentNullException("relationshipid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinid}/relationship/{relationshipid}"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relationshipid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicRelationship>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Relationship not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets outgoing relationships for a twin
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <param name="relationshipName">Target relationship name</param>
        /// <returns>Target relationships retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BasicRelationship>> GetRelationshipsAsync(string twinid, string relationshipName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinid == null)
                throw new System.ArgumentNullException("twinid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinid}/Relationships"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/Relationships");
                    urlBuilder_.Append('?');
                    if (relationshipName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("relationshipName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(relationshipName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BasicRelationship>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Twin not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets incoming relationships for a twin
        /// </summary>
        /// <param name="twinid">Source twin id</param>
        /// <returns>Target relationships retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BasicRelationship>> GetIncomingRelationshipsAsync(string twinid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinid == null)
                throw new System.ArgumentNullException("twinid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "twins/{twinid}/Relationships/incoming"
                    urlBuilder_.Append("twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(twinid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/Relationships/incoming");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BasicRelationship>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Twin not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISearchClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute Search against Azure Cognitive Service
        /// </summary>
        /// <remarks>
        /// To learn more about LQS, Visit
        /// </remarks>
        /// <param name="options">Search Options.</param>
        /// <param name="query">Query Expression in string format.
        /// <br/>             The query expression string use Lucene Query Syntax to Search ACS.</param>
        /// <returns>List of instances of SearchResult`1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult<UnifiedItemDto>>> QueryUnifiedIndexAsync(SearchOptions options, string query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentSearchResponse> QueryDocumentIndexAsync(string query = null, DocumentSearchMode? documentSearchMode = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchClient : BaseClient, ISearchClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SearchClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute Search against Azure Cognitive Service
        /// </summary>
        /// <remarks>
        /// To learn more about LQS, Visit
        /// </remarks>
        /// <param name="options">Search Options.</param>
        /// <param name="query">Query Expression in string format.
        /// <br/>             The query expression string use Lucene Query Syntax to Search ACS.</param>
        /// <returns>List of instances of SearchResult`1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult<UnifiedItemDto>>> QueryUnifiedIndexAsync(SearchOptions options, string query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (options == null)
                throw new System.ArgumentNullException("options");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(options, typeof(SearchOptions), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Search"
                    urlBuilder_.Append("Search");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SearchResult<UnifiedItemDto>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentSearchResponse> QueryDocumentIndexAsync(string query = null, DocumentSearchMode? documentSearchMode = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Search"
                    urlBuilder_.Append("Search");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (documentSearchMode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("documentSearchMode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(documentSearchMode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (take != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("take")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentSearchResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITimeSeriesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> TriggerImportAsync(ImportTimeSeriesHistoricalRequest request, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trigger import from blob request
        /// </summary>
        /// <param name="request">Import request object with sas url</param>
        /// <param name="userId">Request user id</param>
        /// <param name="userData">Request user data</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> TriggerImportFromBlobRequestAsync(ImportTimeSeriesHistoricalFromBlobRequest request, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search async jobs filtering by query string parameters
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"jobId": "user@domain.com.Twins.2022.08.17.14.21.49",
        /// <br/>            				"details": {
        /// <br/>            					"status": "Queued"
        /// <br/>            				},
        /// <br/>            				"createTime": "2022-08-17T13:59:29.2075064Z",
        /// <br/>            				"userId": "user@domain.com",
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="id">Async job Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="status">Async job status</param>
        /// <param name="from">Async job creation date time from filter</param>
        /// <param name="to">Async job creation date time to filter</param>
        /// <param name="fullDetails">Indicates if full details body from async jobs must be retrieved</param>
        /// <returns>Returns a collection of async jobs that match the provided filters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeSeriesImportJob>> FindImportsAsync(string id = null, string userId = null, AsyncJobStatus? status = null, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, bool? fullDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel async job by id
        /// </summary>
        /// <param name="id">Async job id</param>
        /// <param name="userId">User id</param>
        /// <returns>Async job successfully cancelled</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelImportAsync(string id, string userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get new blob upload info for new time series data
        /// </summary>
        /// <returns>container sas token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlobUploadInfo> GetBlobUploadInfoAsync(System.Collections.Generic.IEnumerable<string> fileNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSeriesClient : BaseClient, ITimeSeriesClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TimeSeriesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> TriggerImportAsync(ImportTimeSeriesHistoricalRequest request, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(ImportTimeSeriesHistoricalRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TimeSeries/import"
                    urlBuilder_.Append("TimeSeries/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trigger import from blob request
        /// </summary>
        /// <param name="request">Import request object with sas url</param>
        /// <param name="userId">Request user id</param>
        /// <param name="userData">Request user data</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> TriggerImportFromBlobRequestAsync(ImportTimeSeriesHistoricalFromBlobRequest request, string userId = null, string userData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));

                    if (userData != null)
                        request_.Headers.TryAddWithoutValidation("User-Data", ConvertToString(userData, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(ImportTimeSeriesHistoricalFromBlobRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TimeSeries/sasUriImport"
                    urlBuilder_.Append("TimeSeries/sasUriImport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search async jobs filtering by query string parameters
        /// </summary>
        /// <remarks>
        /// Sample response:
        /// <br/>            
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"jobId": "user@domain.com.Twins.2022.08.17.14.21.49",
        /// <br/>            				"details": {
        /// <br/>            					"status": "Queued"
        /// <br/>            				},
        /// <br/>            				"createTime": "2022-08-17T13:59:29.2075064Z",
        /// <br/>            				"userId": "user@domain.com",
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="id">Async job Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="status">Async job status</param>
        /// <param name="from">Async job creation date time from filter</param>
        /// <param name="to">Async job creation date time to filter</param>
        /// <param name="fullDetails">Indicates if full details body from async jobs must be retrieved</param>
        /// <returns>Returns a collection of async jobs that match the provided filters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeSeriesImportJob>> FindImportsAsync(string id = null, string userId = null, AsyncJobStatus? status = null, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, bool? fullDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TimeSeries/search"
                    urlBuilder_.Append("TimeSeries/search");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fullDetails != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fullDetails")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fullDetails, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TimeSeriesImportJob>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel async job by id
        /// </summary>
        /// <param name="id">Async job id</param>
        /// <param name="userId">User id</param>
        /// <returns>Async job successfully cancelled</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CancelImportAsync(string id, string userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TimeSeries/cancel/{id}"
                    urlBuilder_.Append("TimeSeries/cancel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Async job not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get new blob upload info for new time series data
        /// </summary>
        /// <returns>container sas token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BlobUploadInfo> GetBlobUploadInfoAsync(System.Collections.Generic.IEnumerable<string> fileNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TimeSeries/GetTimeSeriesBlobUploadInfo"
                    urlBuilder_.Append("TimeSeries/GetTimeSeriesBlobUploadInfo");
                    urlBuilder_.Append('?');
                    if (fileNames != null)
                    {
                        foreach (var item_ in fileNames) { urlBuilder_.Append(System.Uri.EscapeDataString("fileNames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlobUploadInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITwinsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query twins
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"request": {
        /// <br/>            		        "modelIds": ["dtmi:com:willowinc:AirHandlingUnit;1"],
        /// <br/>            		        "locationId": "53d380c2-d31a-4cd1-8958-795407407a82",
        /// <br/>            		        "exactModelMatch":true,
        /// <br/>            		        "includeRelationships": true,
        /// <br/>            		        "includeIncomingRelationships": true,
        /// <br/>            		        "orphanOnly": false,
        /// <br/>            		        "sourceType": "AdtQuery",
        /// <br/>            		        "relationshipsToTraverse":[],
        /// <br/>            		        "searchString": "AHU",
        /// <br/>            		        "startTime": "2023-04-15T20:37:21.0274638Z",
        /// <br/>            		        "endTime": "2023-04-25T20:37:21.0274638Z"
        /// <br/>            			}
        /// <br/>            		}
        /// </remarks>
        /// <param name="request">Query twins criteria</param>
        /// <param name="pageSize">Limit the number of twins to return.</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <param name="includeTotalCount">When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application</param>
        /// <returns>Matching twins with relationships</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<TwinWithRelationships>> QueryTwinsAsync(GetTwinsInfoRequest request, int? pageSize = null, string continuationToken = null, bool? includeTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or replaces a twin
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		PUT
        /// <br/>            		{
        /// <br/>            			"twin": {
        /// <br/>            				"$dtId": "BPY-1MW",
        /// <br/>            				"$metadata": {
        /// <br/>            					"$model": "dtmi:com:willowinc:Building;1"
        /// <br/>            				},
        /// <br/>            				"type": "Commercial Office",
        /// <br/>            				"coordinates": {
        /// <br/>            					"latitude": 40.7528,
        /// <br/>            					"longitude": -73.997934
        /// <br/>            				},
        /// <br/>            				"elevation": 34,
        /// <br/>            				"height": 995,
        /// <br/>            				"uniqueID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            				"code": "1MX",
        /// <br/>            				"name": "One Miami West",
        /// <br/>            				"siteID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            				"address": {
        /// <br/>            					 "region": "NY"
        /// <br/>            				}
        /// <br/>            			}
        /// <br/>            		}
        /// </remarks>
        /// <param name="twin">Twin information</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicDigitalTwin> UpdateTwinAsync(BasicDigitalTwin twin, bool? includeAdxUpdate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"request": {
        /// <br/>            		        "modelIds": ["dtmi:com:willowinc:AirHandlingUnit;1"],
        /// <br/>            		        "locationId": "53d380c2-d31a-4cd1-8958-795407407a82",
        /// <br/>            		        "exactModelMatch":true,
        /// <br/>            		        "includeRelationships": true,
        /// <br/>            		        "includeIncomingRelationships": true,
        /// <br/>            		        "orphanOnly": false,
        /// <br/>            		        "sourceType": "AdtQuery",
        /// <br/>            		        "relationshipsToTraverse":[],
        /// <br/>            		        "searchString": "AHU",
        /// <br/>            		        "startTime": "2023-04-15T20:37:21.0274638Z",
        /// <br/>            		        "endTime": "2023-04-25T20:37:21.0274638Z",
        /// <br/>            "QueryFilter.Filter": "Id == 'FAW-IMIC-L01-LGT-1617' and Location.SiteId == '5e2c88fb-42ce-4ede-9203-b3015a701f10'", // For ADX
        /// <br/>            		        "QueryFilter.Filter": "twins.supplyFan.nominalExternalStaticPressure = 3.25", // For ADT
        /// <br/>            		        "Type": "DIRECT"
        /// <br/>            			    }
        /// <br/>            		}
        /// </remarks>
        /// <param name="request">Request includes : modelId, locationId, exactModelMatch, includeRelationships, includeIncomingRelationships, sourceType(Adx,Adtquery,AdtMemory)
        /// <br/>             , orphanOnly, relationshipsToTraverse(IsPartOf, LocatedIn, IncludedIn), searchString,
        /// <br/>             QueryFilter (QueryFilter with Type and Filter condition;This filter is meant to only be used in special cases and when the query is not automatically
        /// <br/>             generated by ADTAPI from the rest of the GetTwinsInfoRequest properties.
        /// <br/>             A Type=Direct filter must be in the format specific to the database specified by SourceType)</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="includeTotalCount">When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>Target twins retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<TwinWithRelationships>> GetTwinsAsync(GetTwinsInfoRequest request, int? pageSize = null, bool? includeTotalCount = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins in tree form
        /// </summary>
        /// <remarks>
        /// Sample response
        /// <br/>[
        /// <br/>	{
        /// <br/>		"twin": {
        /// <br/>			"$dtId": "THE-TWIN-ID",
        /// <br/>			"$metadata": {
        /// <br/>				"$model": "dtmi:com:willowinc:OccupancyZone;1"
        /// <br/>			}
        /// <br/>		},
        /// <br/>		"children": [
        /// <br/>			{
        /// <br/>				"twin": {},
        /// <br/>				"children": []
        /// <br/>			}
        /// <br/>			{
        /// <br/>			...
        /// <br/>			}
        /// <br/>		]
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="rootModelIds">Target model ids</param>
        /// <param name="childModelIds">Child Model Ids that restricts the type of twins in the tree response.</param>
        /// <param name="outgoingRelationships">List of relationship types to be considered for traversal.
        /// <br/>                         Default Values : ["isPartOf", "locatedIn"] will be used when relationshipsToTraverse is not supplied</param>
        /// <param name="incomingRelationships">List of relationship types to be considered for traversal.</param>
        /// <param name="exactModelMatch">Indicates if model filter must be exact match</param>
        /// <returns>Twin tree</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NestedTwin>> GetTreesByModelAsync(System.Collections.Generic.IEnumerable<string> rootModelIds = null, System.Collections.Generic.IEnumerable<string> childModelIds = null, System.Collections.Generic.IEnumerable<string> outgoingRelationships = null, System.Collections.Generic.IEnumerable<string> incomingRelationships = null, bool? exactModelMatch = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins in tree form
        /// </summary>
        /// <remarks>
        /// Sample response
        /// <br/>[
        /// <br/>	{
        /// <br/>		"twin": {
        /// <br/>			"$dtId": "THE-TWIN-ID",
        /// <br/>			"$metadata": {
        /// <br/>				"$model": "dtmi:com:willowinc:OccupancyZone;1"
        /// <br/>			}
        /// <br/>		},
        /// <br/>		"children": [
        /// <br/>			{
        /// <br/>				"twin": {},
        /// <br/>				"children": []
        /// <br/>			}
        /// <br/>			{
        /// <br/>			...
        /// <br/>			}
        /// <br/>		]
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="twinScopeIds">Root twin ids</param>
        /// <param name="childModelIds">Child Model Ids that restricts the type of twins in the tree response.</param>
        /// <param name="outgoingRelationships">List of relationship types to be considered for traversal.
        /// <br/>                         Default Values : ["isPartOf", "locatedIn"] will be used when relationshipsToTraverse is not supplied</param>
        /// <param name="incomingRelationships">List of relationship types to be considered for traversal.</param>
        /// <returns>Twin tree</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NestedTwin>> GetTreesByScopeAsync(System.Collections.Generic.IEnumerable<string> twinScopeIds = null, System.Collections.Generic.IEnumerable<string> childModelIds = null, System.Collections.Generic.IEnumerable<string> outgoingRelationships = null, System.Collections.Generic.IEnumerable<string> incomingRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetTwinsCountAsync(System.Collections.Generic.IEnumerable<string> modelId = null, string locationId = null, bool? exactModelMatch = null, bool? includeRelationships = null, bool? includeIncomingRelationships = null, bool? orphanOnly = null, SourceType? sourceType = null, System.Collections.Generic.IEnumerable<string> relationshipsToTraverse = null, string searchString = null, System.DateTimeOffset? startTime = null, System.DateTimeOffset? endTime = null, QueryFilterType? queryFilter_Type = null, string queryFilter_Filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a twin
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>	PATCH
        /// <br/>	[
        /// <br/>		{
        /// <br/>			"op":"replace",
        /// <br/>			"path":"/customproperties/description",
        /// <br/>			"value":"Patched description yes 8"
        /// <br/>		}
        /// <br/>	]
        /// </remarks>
        /// <param name="id">Twin id</param>
        /// <param name="jsonPatchDocument">Patch information</param>
        /// <returns>Twin patched</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PatchTwinAsync(string id, System.Collections.Generic.IEnumerable<Operation> jsonPatchDocument, bool? includeAdxUpdate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twin by id
        /// </summary>
        /// <param name="id">Twin id</param>
        /// <param name="sourceType">ADX/AdtQuery</param>
        /// <param name="includeRelationships">true/false</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwinWithRelationships> GetTwinByIdAsync(string id, SourceType? sourceType = null, bool? includeRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins by ids
        /// </summary>
        /// <remarks>
        /// Currently queries are not chunked into multiple queries if there are a large number of IDs passed in -- it's
        /// <br/>            up to the caller to ensure that the number of IDs or total query length does not exceed the limitations of the database
        /// <br/>            that is queried. Paging is not supported. The caller can control the number of twins returned by the number of IDs passed in.
        /// <br/>            Any ids that do not reference valid twins will silently be omitted from the response -- no 404/NotFound will be generated.
        /// <br/>            Match response against your query to find any invalid IDs.
        /// </remarks>
        /// <param name="ids">Twin ids</param>
        /// <param name="sourceType">Adx,AdtQuery,AdtMemory,Acs</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Page<TwinWithRelationships>> GetTwinsByIdsAsync(System.Collections.Generic.IEnumerable<string> ids, SourceType? sourceType = null, bool? includeRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates incoming twins according to rule templates
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            		POST
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"$dtId": "BPY-1MW-Person-1048687360-Total-Count",
        /// <br/>            				"$metadata": {
        /// <br/>            					"$model": "dtmi:com:willowinc:PeopleCountSensor-TEST;1"
        /// <br/>            				},
        /// <br/>            				"trendID": "allowed-xxx",
        /// <br/>            				"name": "Total Count",
        /// <br/>            				"communication": {
        /// <br/>            					"$metadata": {}
        /// <br/>            				},
        /// <br/>            				"categorizationProperties": {
        /// <br/>            					"$metadata": {}
        /// <br/>            				}
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"twinId": "BPY-1MW-Person-1048687360-Total-Count-2",
        /// <br/>            				"results": [
        /// <br/>            					{
        /// <br/>            						"ruleId": "test-rule",
        /// <br/>            						"propertyErrors": {
        /// <br/>            							"trendID": [
        /// <br/>            								"InvalidValue"
        /// <br/>            							],
        /// <br/>            							"siteID": [
        /// <br/>            								"RequiredMissing"
        /// <br/>            							]
        /// <br/>            						}
        /// <br/>            					}
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="twins">Twins to validate</param>
        /// <returns>Validation results from invalid twins</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TwinValidationResultResponse>> ValidateTwinsAsync(System.Collections.Generic.IEnumerable<BasicDigitalTwin> twins, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete twins and optionally relationships. Return a MultipleEntityResponse with the status of each twin and relationship deletion.
        /// <br/>This API will forceably add a deletion record for the twin if it's not found in ADT, otherwise
        /// <br/>  it will depend on the event pipeline to eventually delete from ADX.
        /// </summary>
        /// <param name="twinIds">List of Twin ids to delete</param>
        /// <param name="deleteRelationships">If true, delete all incoming and outgoing relationship linked to each twin before attempting to delete the twin</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleEntityResponse> DeleteTwinsAndRelationshipsAsync(System.Collections.Generic.IEnumerable<string> twinIds, bool? deleteRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete twins from the adt instance
        /// </summary>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobsEntry> BulkDeleteTwinAsync(string userId = null, System.Collections.Generic.IEnumerable<string> modelIds = null, string locationId = null, string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwinsClient : BaseClient, ITwinsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TwinsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                settings.Converters.Add(converter);
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query twins
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"request": {
        /// <br/>            		        "modelIds": ["dtmi:com:willowinc:AirHandlingUnit;1"],
        /// <br/>            		        "locationId": "53d380c2-d31a-4cd1-8958-795407407a82",
        /// <br/>            		        "exactModelMatch":true,
        /// <br/>            		        "includeRelationships": true,
        /// <br/>            		        "includeIncomingRelationships": true,
        /// <br/>            		        "orphanOnly": false,
        /// <br/>            		        "sourceType": "AdtQuery",
        /// <br/>            		        "relationshipsToTraverse":[],
        /// <br/>            		        "searchString": "AHU",
        /// <br/>            		        "startTime": "2023-04-15T20:37:21.0274638Z",
        /// <br/>            		        "endTime": "2023-04-25T20:37:21.0274638Z"
        /// <br/>            			}
        /// <br/>            		}
        /// </remarks>
        /// <param name="request">Query twins criteria</param>
        /// <param name="pageSize">Limit the number of twins to return.</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <param name="includeTotalCount">When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application</param>
        /// <returns>Matching twins with relationships</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<TwinWithRelationships>> QueryTwinsAsync(GetTwinsInfoRequest request, int? pageSize = null, string continuationToken = null, bool? includeTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationToken != null)
                        request_.Headers.TryAddWithoutValidation("continuationToken", ConvertToString(continuationToken, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(GetTwinsInfoRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins"
                    urlBuilder_.Append("Twins");
                    urlBuilder_.Append('?');
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeTotalCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeTotalCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<TwinWithRelationships>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request. LocationId param cannot be empty when relationshipToTraverse param is specified", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or replaces a twin
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		PUT
        /// <br/>            		{
        /// <br/>            			"twin": {
        /// <br/>            				"$dtId": "BPY-1MW",
        /// <br/>            				"$metadata": {
        /// <br/>            					"$model": "dtmi:com:willowinc:Building;1"
        /// <br/>            				},
        /// <br/>            				"type": "Commercial Office",
        /// <br/>            				"coordinates": {
        /// <br/>            					"latitude": 40.7528,
        /// <br/>            					"longitude": -73.997934
        /// <br/>            				},
        /// <br/>            				"elevation": 34,
        /// <br/>            				"height": 995,
        /// <br/>            				"uniqueID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            				"code": "1MX",
        /// <br/>            				"name": "One Miami West",
        /// <br/>            				"siteID": "4e5fc229-ffd9-462a-882b-16b4a63b2a8a",
        /// <br/>            				"address": {
        /// <br/>            					 "region": "NY"
        /// <br/>            				}
        /// <br/>            			}
        /// <br/>            		}
        /// </remarks>
        /// <param name="twin">Twin information</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicDigitalTwin> UpdateTwinAsync(BasicDigitalTwin twin, bool? includeAdxUpdate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twin == null)
                throw new System.ArgumentNullException("twin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twin, typeof(BasicDigitalTwin), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins"
                    urlBuilder_.Append("Twins");
                    urlBuilder_.Append('?');
                    if (includeAdxUpdate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAdxUpdate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAdxUpdate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicDigitalTwin>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>            		POST
        /// <br/>            		{
        /// <br/>            			"request": {
        /// <br/>            		        "modelIds": ["dtmi:com:willowinc:AirHandlingUnit;1"],
        /// <br/>            		        "locationId": "53d380c2-d31a-4cd1-8958-795407407a82",
        /// <br/>            		        "exactModelMatch":true,
        /// <br/>            		        "includeRelationships": true,
        /// <br/>            		        "includeIncomingRelationships": true,
        /// <br/>            		        "orphanOnly": false,
        /// <br/>            		        "sourceType": "AdtQuery",
        /// <br/>            		        "relationshipsToTraverse":[],
        /// <br/>            		        "searchString": "AHU",
        /// <br/>            		        "startTime": "2023-04-15T20:37:21.0274638Z",
        /// <br/>            		        "endTime": "2023-04-25T20:37:21.0274638Z",
        /// <br/>            "QueryFilter.Filter": "Id == 'FAW-IMIC-L01-LGT-1617' and Location.SiteId == '5e2c88fb-42ce-4ede-9203-b3015a701f10'", // For ADX
        /// <br/>            		        "QueryFilter.Filter": "twins.supplyFan.nominalExternalStaticPressure = 3.25", // For ADT
        /// <br/>            		        "Type": "DIRECT"
        /// <br/>            			    }
        /// <br/>            		}
        /// </remarks>
        /// <param name="request">Request includes : modelId, locationId, exactModelMatch, includeRelationships, includeIncomingRelationships, sourceType(Adx,Adtquery,AdtMemory)
        /// <br/>             , orphanOnly, relationshipsToTraverse(IsPartOf, LocatedIn, IncludedIn), searchString,
        /// <br/>             QueryFilter (QueryFilter with Type and Filter condition;This filter is meant to only be used in special cases and when the query is not automatically
        /// <br/>             generated by ADTAPI from the rest of the GetTwinsInfoRequest properties.
        /// <br/>             A Type=Direct filter must be in the format specific to the database specified by SourceType)</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="includeTotalCount">When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application</param>
        /// <param name="continuationToken">Continuation token</param>
        /// <returns>Target twins retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<TwinWithRelationships>> GetTwinsAsync(GetTwinsInfoRequest request, int? pageSize = null, bool? includeTotalCount = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (continuationToken != null)
                        request_.Headers.TryAddWithoutValidation("continuationToken", ConvertToString(continuationToken, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, typeof(GetTwinsInfoRequest), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/gettwins"
                    urlBuilder_.Append("Twins/gettwins");
                    urlBuilder_.Append('?');
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeTotalCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeTotalCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<TwinWithRelationships>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request. LocationId param cannot be empty when relationshipToTraverse param is specified", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins in tree form
        /// </summary>
        /// <remarks>
        /// Sample response
        /// <br/>[
        /// <br/>	{
        /// <br/>		"twin": {
        /// <br/>			"$dtId": "THE-TWIN-ID",
        /// <br/>			"$metadata": {
        /// <br/>				"$model": "dtmi:com:willowinc:OccupancyZone;1"
        /// <br/>			}
        /// <br/>		},
        /// <br/>		"children": [
        /// <br/>			{
        /// <br/>				"twin": {},
        /// <br/>				"children": []
        /// <br/>			}
        /// <br/>			{
        /// <br/>			...
        /// <br/>			}
        /// <br/>		]
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="rootModelIds">Target model ids</param>
        /// <param name="childModelIds">Child Model Ids that restricts the type of twins in the tree response.</param>
        /// <param name="outgoingRelationships">List of relationship types to be considered for traversal.
        /// <br/>                         Default Values : ["isPartOf", "locatedIn"] will be used when relationshipsToTraverse is not supplied</param>
        /// <param name="incomingRelationships">List of relationship types to be considered for traversal.</param>
        /// <param name="exactModelMatch">Indicates if model filter must be exact match</param>
        /// <returns>Twin tree</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NestedTwin>> GetTreesByModelAsync(System.Collections.Generic.IEnumerable<string> rootModelIds = null, System.Collections.Generic.IEnumerable<string> childModelIds = null, System.Collections.Generic.IEnumerable<string> outgoingRelationships = null, System.Collections.Generic.IEnumerable<string> incomingRelationships = null, bool? exactModelMatch = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/trees/model"
                    urlBuilder_.Append("Twins/trees/model");
                    urlBuilder_.Append('?');
                    if (rootModelIds != null)
                    {
                        foreach (var item_ in rootModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("rootModelIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (childModelIds != null)
                    {
                        foreach (var item_ in childModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("childModelIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (outgoingRelationships != null)
                    {
                        foreach (var item_ in outgoingRelationships) { urlBuilder_.Append(System.Uri.EscapeDataString("outgoingRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (incomingRelationships != null)
                    {
                        foreach (var item_ in incomingRelationships) { urlBuilder_.Append(System.Uri.EscapeDataString("incomingRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (exactModelMatch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exactModelMatch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactModelMatch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NestedTwin>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no model is provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins in tree form
        /// </summary>
        /// <remarks>
        /// Sample response
        /// <br/>[
        /// <br/>	{
        /// <br/>		"twin": {
        /// <br/>			"$dtId": "THE-TWIN-ID",
        /// <br/>			"$metadata": {
        /// <br/>				"$model": "dtmi:com:willowinc:OccupancyZone;1"
        /// <br/>			}
        /// <br/>		},
        /// <br/>		"children": [
        /// <br/>			{
        /// <br/>				"twin": {},
        /// <br/>				"children": []
        /// <br/>			}
        /// <br/>			{
        /// <br/>			...
        /// <br/>			}
        /// <br/>		]
        /// <br/>	}
        /// <br/>]
        /// </remarks>
        /// <param name="twinScopeIds">Root twin ids</param>
        /// <param name="childModelIds">Child Model Ids that restricts the type of twins in the tree response.</param>
        /// <param name="outgoingRelationships">List of relationship types to be considered for traversal.
        /// <br/>                         Default Values : ["isPartOf", "locatedIn"] will be used when relationshipsToTraverse is not supplied</param>
        /// <param name="incomingRelationships">List of relationship types to be considered for traversal.</param>
        /// <returns>Twin tree</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NestedTwin>> GetTreesByScopeAsync(System.Collections.Generic.IEnumerable<string> twinScopeIds = null, System.Collections.Generic.IEnumerable<string> childModelIds = null, System.Collections.Generic.IEnumerable<string> outgoingRelationships = null, System.Collections.Generic.IEnumerable<string> incomingRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/trees/scope"
                    urlBuilder_.Append("Twins/trees/scope");
                    urlBuilder_.Append('?');
                    if (twinScopeIds != null)
                    {
                        foreach (var item_ in twinScopeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("twinScopeIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (childModelIds != null)
                    {
                        foreach (var item_ in childModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("childModelIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (outgoingRelationships != null)
                    {
                        foreach (var item_ in outgoingRelationships) { urlBuilder_.Append(System.Uri.EscapeDataString("outgoingRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (incomingRelationships != null)
                    {
                        foreach (var item_ in incomingRelationships) { urlBuilder_.Append(System.Uri.EscapeDataString("incomingRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NestedTwin>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("If no model is provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetTwinsCountAsync(System.Collections.Generic.IEnumerable<string> modelId = null, string locationId = null, bool? exactModelMatch = null, bool? includeRelationships = null, bool? includeIncomingRelationships = null, bool? orphanOnly = null, SourceType? sourceType = null, System.Collections.Generic.IEnumerable<string> relationshipsToTraverse = null, string searchString = null, System.DateTimeOffset? startTime = null, System.DateTimeOffset? endTime = null, QueryFilterType? queryFilter_Type = null, string queryFilter_Filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/count"
                    urlBuilder_.Append("Twins/count");
                    urlBuilder_.Append('?');
                    if (modelId != null)
                    {
                        foreach (var item_ in modelId) { urlBuilder_.Append(System.Uri.EscapeDataString("ModelId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LocationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (exactModelMatch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ExactModelMatch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exactModelMatch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeRelationships != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IncludeRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeRelationships, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeIncomingRelationships != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IncludeIncomingRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeIncomingRelationships, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orphanOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OrphanOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orphanOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (relationshipsToTraverse != null)
                    {
                        foreach (var item_ in relationshipsToTraverse) { urlBuilder_.Append(System.Uri.EscapeDataString("RelationshipsToTraverse")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (searchString != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SearchString")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("StartTime")).Append('=').Append(System.Uri.EscapeDataString(startTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EndTime")).Append('=').Append(System.Uri.EscapeDataString(endTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (queryFilter_Type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("QueryFilter.Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(queryFilter_Type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (queryFilter_Filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("QueryFilter.Filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(queryFilter_Filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a twin
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            
        /// <br/>	PATCH
        /// <br/>	[
        /// <br/>		{
        /// <br/>			"op":"replace",
        /// <br/>			"path":"/customproperties/description",
        /// <br/>			"value":"Patched description yes 8"
        /// <br/>		}
        /// <br/>	]
        /// </remarks>
        /// <param name="id">Twin id</param>
        /// <param name="jsonPatchDocument">Patch information</param>
        /// <returns>Twin patched</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PatchTwinAsync(string id, System.Collections.Generic.IEnumerable<Operation> jsonPatchDocument, bool? includeAdxUpdate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (jsonPatchDocument == null)
                throw new System.ArgumentNullException("jsonPatchDocument");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(jsonPatchDocument, typeof(System.Collections.Generic.IEnumerable<Operation>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/{id}"
                    urlBuilder_.Append("Twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (includeAdxUpdate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeAdxUpdate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeAdxUpdate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Twin not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twin by id
        /// </summary>
        /// <param name="id">Twin id</param>
        /// <param name="sourceType">ADX/AdtQuery</param>
        /// <param name="includeRelationships">true/false</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TwinWithRelationships> GetTwinByIdAsync(string id, SourceType? sourceType = null, bool? includeRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/{id}"
                    urlBuilder_.Append("Twins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeRelationships != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeRelationships, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TwinWithRelationships>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Twin not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get twins by ids
        /// </summary>
        /// <remarks>
        /// Currently queries are not chunked into multiple queries if there are a large number of IDs passed in -- it's
        /// <br/>            up to the caller to ensure that the number of IDs or total query length does not exceed the limitations of the database
        /// <br/>            that is queried. Paging is not supported. The caller can control the number of twins returned by the number of IDs passed in.
        /// <br/>            Any ids that do not reference valid twins will silently be omitted from the response -- no 404/NotFound will be generated.
        /// <br/>            Match response against your query to find any invalid IDs.
        /// </remarks>
        /// <param name="ids">Twin ids</param>
        /// <param name="sourceType">Adx,AdtQuery,AdtMemory,Acs</param>
        /// <returns>Twin information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Page<TwinWithRelationships>> GetTwinsByIdsAsync(System.Collections.Generic.IEnumerable<string> ids, SourceType? sourceType = null, bool? includeRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(ids, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/ids"
                    urlBuilder_.Append("Twins/ids");
                    urlBuilder_.Append('?');
                    if (sourceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeRelationships != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeRelationships, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Page<TwinWithRelationships>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates incoming twins according to rule templates
        /// </summary>
        /// <remarks>
        /// Sample request
        /// <br/>            		POST
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"$dtId": "BPY-1MW-Person-1048687360-Total-Count",
        /// <br/>            				"$metadata": {
        /// <br/>            					"$model": "dtmi:com:willowinc:PeopleCountSensor-TEST;1"
        /// <br/>            				},
        /// <br/>            				"trendID": "allowed-xxx",
        /// <br/>            				"name": "Total Count",
        /// <br/>            				"communication": {
        /// <br/>            					"$metadata": {}
        /// <br/>            				},
        /// <br/>            				"categorizationProperties": {
        /// <br/>            					"$metadata": {}
        /// <br/>            				}
        /// <br/>            			}
        /// <br/>            		]
        /// <br/>            
        /// <br/>Sample response
        /// <br/>            		[
        /// <br/>            			{
        /// <br/>            				"twinId": "BPY-1MW-Person-1048687360-Total-Count-2",
        /// <br/>            				"results": [
        /// <br/>            					{
        /// <br/>            						"ruleId": "test-rule",
        /// <br/>            						"propertyErrors": {
        /// <br/>            							"trendID": [
        /// <br/>            								"InvalidValue"
        /// <br/>            							],
        /// <br/>            							"siteID": [
        /// <br/>            								"RequiredMissing"
        /// <br/>            							]
        /// <br/>            						}
        /// <br/>            					}
        /// <br/>            				]
        /// <br/>            			}
        /// <br/>            		]
        /// </remarks>
        /// <param name="twins">Twins to validate</param>
        /// <returns>Validation results from invalid twins</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TwinValidationResultResponse>> ValidateTwinsAsync(System.Collections.Generic.IEnumerable<BasicDigitalTwin> twins, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twins == null)
                throw new System.ArgumentNullException("twins");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twins, typeof(System.Collections.Generic.IEnumerable<BasicDigitalTwin>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/validate"
                    urlBuilder_.Append("Twins/validate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TwinValidationResultResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete twins and optionally relationships. Return a MultipleEntityResponse with the status of each twin and relationship deletion.
        /// <br/>This API will forceably add a deletion record for the twin if it's not found in ADT, otherwise
        /// <br/>  it will depend on the event pipeline to eventually delete from ADX.
        /// </summary>
        /// <param name="twinIds">List of Twin ids to delete</param>
        /// <param name="deleteRelationships">If true, delete all incoming and outgoing relationship linked to each twin before attempting to delete the twin</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MultipleEntityResponse> DeleteTwinsAndRelationshipsAsync(System.Collections.Generic.IEnumerable<string> twinIds, bool? deleteRelationships = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (twinIds == null)
                throw new System.ArgumentNullException("twinIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(twinIds, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/twinsandrelationships"
                    urlBuilder_.Append("Twins/twinsandrelationships");
                    urlBuilder_.Append('?');
                    if (deleteRelationships != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deleteRelationships")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deleteRelationships, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultipleEntityResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 207)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an async job to delete twins from the adt instance
        /// </summary>
        /// <returns>Returns the newly created async job</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobsEntry> BulkDeleteTwinAsync(string userId = null, System.Collections.Generic.IEnumerable<string> modelIds = null, string locationId = null, string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (userId != null)
                        request_.Headers.TryAddWithoutValidation("User-Id", ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(modelIds, typeof(System.Collections.Generic.IEnumerable<string>), _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "Twins/delete"
                    urlBuilder_.Append("Twins/delete");
                    urlBuilder_.Append('?');
                    if (locationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("locationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchString != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchString")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobsEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProblemDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplate
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exactModelOnly")]
        public bool ExactModelOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("templateId")]
        public string TemplateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryModelId")]
        public string PrimaryModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public System.Collections.Generic.IDictionary<string, string> Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<RuleTemplateProperty> Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expressions")]
        public System.Collections.Generic.ICollection<RuleTemplateExpression> Expressions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paths")]
        public System.Collections.Generic.ICollection<RuleTemplatePath> Paths { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplate FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplate>(data, options);

        }

    }

    [JsonInheritanceConverter(typeof(RuleTemplateProperty), "type")]
    [JsonInheritanceAttribute("numericrange", typeof(RuleTemplatePropertyNumericRange))]
    [JsonInheritanceAttribute("daterange", typeof(RuleTemplatePropertyDateRange))]
    [JsonInheritanceAttribute("pattern", typeof(RuleTemplatePropertyPattern))]
    [JsonInheritanceAttribute("numericallowedvalues", typeof(RuleTemplatePropertyNumericAllowedValues))]
    [JsonInheritanceAttribute("stringallowedvalues", typeof(RuleTemplatePropertyStringAllowedValues))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool Required { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplateProperty FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplateProperty>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePropertyNumericRange : RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("minValue")]
        public double? MinValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]
        public double? MaxValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string Unit { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePropertyNumericRange FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePropertyNumericRange>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePropertyDateRange : RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("minValue")]
        public System.DateTimeOffset? MinValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]
        public System.DateTimeOffset? MaxValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePropertyDateRange FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePropertyDateRange>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePropertyPattern : RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("pattern")]
        public string Pattern { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePropertyPattern FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePropertyPattern>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePropertyNumericAllowedValues : RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("allowedValues")]
        public System.Collections.Generic.ICollection<double> AllowedValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string Unit { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePropertyNumericAllowedValues FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePropertyNumericAllowedValues>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePropertyStringAllowedValues : RuleTemplateProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("allowedValues")]
        public System.Collections.Generic.ICollection<string> AllowedValues { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePropertyStringAllowedValues FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePropertyStringAllowedValues>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplateExpression
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expression")]
        public string Expression { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplateExpression FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplateExpression>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleTemplatePath
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        public string Match { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RuleTemplatePath FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RuleTemplatePath>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DataQualityRule")]
        DataQualityRule = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationships")]
        Relationships = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwinValidationJobSummaryDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("processedEntities")]
        public int ProcessedEntities { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modelsQueried")]
        public System.Collections.Generic.ICollection<string> ModelsQueried { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorsByModel")]
        public System.Collections.Generic.IDictionary<string, TwinValidationJobSummaryDetailErrors> ErrorsByModel { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwinValidationJobSummaryDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwinValidationJobSummaryDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwinValidationJobSummaryDetailErrors
    {

        [System.Text.Json.Serialization.JsonPropertyName("numOK")]
        public int NumOK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numPropertyOK")]
        public int NumPropertyOK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numRelationshipOK")]
        public int NumRelationshipOK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numErrors")]
        public int NumErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numPropertyErrors")]
        public int NumPropertyErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numRelationshipErrors")]
        public int NumRelationshipErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numUnitErrors")]
        public int NumUnitErrors { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwinValidationJobSummaryDetailErrors FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwinValidationJobSummaryDetailErrors>(data, options);

        }

    }

    /// <summary>
    /// Represents an HTTP ETag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETag
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ETag FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ETag>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlobUploadInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("sasToken")]
        public string SasToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containerName")]
        public string ContainerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("blobPaths")]
        public System.Collections.Generic.IDictionary<string, string> BlobPaths { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BlobUploadInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<BlobUploadInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppVersion
    {

        [System.Text.Json.Serialization.JsonPropertyName("adtApiVersion")]
        public string AdtApiVersion { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AppVersion FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AppVersion>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwinGraph
    {

        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public System.Collections.Generic.ICollection<TwinNode> Nodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("edges")]
        public System.Collections.Generic.ICollection<TwinRelationship> Edges { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwinGraph FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwinGraph>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobsEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string JobId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentJobId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string ParentJobId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jobType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string JobType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AsyncJobStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("progressCurrentCount")]
        public int? ProgressCurrentCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("progressTotalCount")]
        public int? ProgressTotalCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]
        public bool IsDeleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string UserMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("progressStatusMessage")]
        public string ProgressStatusMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceResourceUri")]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string SourceResourceUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetResourceUri")]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string TargetResourceUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExternal")]
        public bool IsExternal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jobSubtype")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string JobSubtype { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeCreated")]
        public System.DateTimeOffset TimeCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeLastUpdated")]
        public System.DateTimeOffset TimeLastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processingStartTime")]
        public System.DateTimeOffset? ProcessingStartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processingEndTime")]
        public System.DateTimeOffset? ProcessingEndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jobsEntryDetail")]
        public JobsEntryDetail JobsEntryDetail { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static JobsEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<JobsEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobsEntryDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string JobId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("outputsJson")]
        public string OutputsJson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorsJson")]
        public string ErrorsJson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inputsJson")]
        public string InputsJson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public string CustomData { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static JobsEntryDetail FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<JobsEntryDetail>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobsResponse
    {
        /// <summary>
        /// Total number of jobs based on search criteria
        /// <br/>            
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; }

        /// <summary>
        /// List of jobs based on search criteria
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobs")]
        public System.Collections.Generic.ICollection<JobsEntry> Jobs { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static JobsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<JobsResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobSearchRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobTypes")]
        public System.Collections.Generic.ICollection<string> JobTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jobSubType")]
        public string JobSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jobStatuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<AsyncJobStatus> JobStatuses { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("offset")]
        public int Offset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTimeOffset? StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTimeOffset? EndDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static JobSearchRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<JobSearchRequest>(data, options);

        }

    }

    /// <summary>
    /// Sort specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortSpecificationDto
    {
        /// <summary>
        /// Gets or sets the field name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// Gets or sets the sort order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sort")]
        public string Sort { get; set; }

        /// <summary>
        /// Gets a value indicating whether the sorting is in descending order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isSortDescending")]
        public bool IsSortDescending { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SortSpecificationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SortSpecificationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappedEntryResponse
    {
        /// <summary>
        /// Total Count
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public long Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<MappedEntry> Items { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappedEntryResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MappedEntryResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappedEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("mappedId")]
        [System.ComponentModel.DataAnnotations.StringLength(48)]
        public string MappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string WillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mappedModelId")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string MappedModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowModelId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string WillowModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentMappedId")]
        [System.ComponentModel.DataAnnotations.StringLength(48)]
        public string ParentMappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentWillowId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string ParentWillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowParentRel")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string WillowParentRel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modelInformation")]
        public string ModelInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusNotes")]
        public string StatusNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("auditInformation")]
        public string AuditInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeCreated")]
        public System.DateTimeOffset TimeCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeLastUpdated")]
        public System.DateTimeOffset TimeLastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string BuildingId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExistingTwin")]
        public bool IsExistingTwin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Unit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string DataType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappedEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MappedEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ignore")]
        Ignore = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappedEntryRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("offset")]
        public int Offset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prefixToMatchId")]
        public System.Collections.Generic.ICollection<string> PrefixToMatchId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("excludePrefixes")]
        public bool? ExcludePrefixes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filterSpecifications")]
        public System.Collections.Generic.ICollection<FilterSpecificationDto> FilterSpecifications { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappedEntryRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MappedEntryRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappedEntriesGroupCount
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappedEntriesGroupCount FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MappedEntriesGroupCount>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateMappedEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("mappedId")]
        public string MappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mappedModelId")]
        public string MappedModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowModelId")]
        public string WillowModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentMappedId")]
        public string ParentMappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentWillowId")]
        public string ParentWillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowParentRel")]
        public string WillowParentRel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modelInformation")]
        public string ModelInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusNotes")]
        public string StatusNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("auditInformation")]
        public string AuditInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingId")]
        public string BuildingId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowId")]
        public string WillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExistingTwin")]
        public bool IsExistingTwin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string Unit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public string DataType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CreateMappedEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CreateMappedEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMappedEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("mappedId")]
        public string MappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mappedModelId")]
        public string MappedModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowModelId")]
        public string WillowModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentMappedId")]
        public string ParentMappedId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentWillowId")]
        public string ParentWillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowParentRel")]
        public string WillowParentRel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modelInformation")]
        public string ModelInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusNotes")]
        public string StatusNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("auditInformation")]
        public string AuditInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingId")]
        public string BuildingId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowId")]
        public string WillowId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExistingTwin")]
        public bool IsExistingTwin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string Unit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public string DataType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateMappedEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateMappedEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMappedEntryStatusRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("mappedIds")]
        public System.Collections.Generic.ICollection<string> MappedIds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateMappedEntryStatusRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateMappedEntryStatusRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappedEntryAllRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("prefixToMatchId")]
        public System.Collections.Generic.ICollection<string> PrefixToMatchId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("excludePrefixes")]
        public bool? ExcludePrefixes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statuses")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Status> Statuses { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingIds")]
        public System.Collections.Generic.ICollection<string> BuildingIds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public string ConnectorId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappedEntryAllRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MappedEntryAllRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMappedTwinRequestResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowTwinId")]
        public string WillowTwinId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedProperties")]
        public System.Collections.Generic.ICollection<JsonPatchOperation> ChangedProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeCreated")]
        public System.DateTimeOffset TimeCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeLastUpdated")]
        public System.DateTimeOffset TimeLastUpdated { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateMappedTwinRequestResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateMappedTwinRequestResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonPatchOperation
    {

        [System.Text.Json.Serialization.JsonPropertyName("op")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OperationType Op { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static JsonPatchOperation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<JsonPatchOperation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMappedTwinRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("willowTwinId")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string WillowTwinId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedProperties")]
        public string ChangedProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeCreated")]
        public System.DateTimeOffset TimeCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeLastUpdated")]
        public System.DateTimeOffset TimeLastUpdated { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateMappedTwinRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateMappedTwinRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MtiAsyncJob : AsyncJob
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MtiAsyncJobType JobType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingId")]
        public string BuildingId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public string ConnectorId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MtiAsyncJob FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MtiAsyncJob>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MtiAsyncJobType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SyncOrganization")]
        SyncOrganization = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SyncSpatial")]
        SyncSpatial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SyncConnectors")]
        SyncConnectors = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SyncAssets")]
        SyncAssets = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SyncCapabilities")]
        SyncCapabilities = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PushToMapped")]
        PushToMapped = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Ingest")]
        Ingest = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MtiAsyncJobRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MtiAsyncJobType JobType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingId")]
        public string BuildingId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public string ConnectorId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MtiAsyncJobRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MtiAsyncJobRequest>(data, options);

        }

    }

    /// <summary>
    /// A search document with a score.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult<UnifiedItemDto>
    {
        /// <summary>
        /// Gets or sets the score from Azure Cognitive Search.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double Score { get; set; }

        /// <summary>
        /// Gets or sets the document.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public UnifiedItemDto Document { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SearchResult<UnifiedItemDto> FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SearchResult<UnifiedItemDto>>(data, options);

        }

    }

    /// <summary>
    /// The twin document we store in Azure Cognitive search and retrieve in response to search queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnifiedItemDto
    {
        /// <summary>
        /// Gets or sets the key of the entity used by search.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets primary Id used for the link to the actual page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets ids of the entity for search, these are searched as a whole (keyword).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ids")]
        public Ids Ids { get; set; }

        /// <summary>
        /// Gets or sets legacy siteId required by Command.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// Gets or sets externalId - refers to the search item in some external system, e.g. timeseries, CMS, ...
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or sets the model ids of the entity, Room, Floor, ... all ancestors.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modelIds")]
        public ModelIds ModelIds { get; set; }

        /// <summary>
        /// Gets or sets the model names of the entity, Room, Floor, ... all ancestors.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modelNames")]
        public ModelNames ModelNames { get; set; }

        /// <summary>
        /// Gets or sets primary model Id for Type=twin, or empty if this is not a twin related search document.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primaryModelId")]
        public string PrimaryModelId { get; set; }

        /// <summary>
        /// Gets or sets the type of the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets tags for the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public Tags Tags { get; set; }

        /// <summary>
        /// Gets or sets the category of the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets importance to boost ranking in search results.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("importance")]
        public int Importance { get; set; }

        /// <summary>
        /// Gets or sets any names used for searching.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("names")]
        public Names Names { get; set; }

        /// <summary>
        /// Gets or sets any secondary names or descriptions (lower priority).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secondaryNames")]
        public Names SecondaryNames { get; set; }

        /// <summary>
        /// Gets or sets ancestors by spatial hierarchy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public LocationAncestorIds Location { get; set; }

        /// <summary>
        /// Gets or sets ancestor names by spatial hierarchy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("locationNames")]
        public LocationNames LocationNames { get; set; }

        /// <summary>
        /// Gets or sets ancestors that feed this twin/insight/...
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fedBy")]
        public FedByAncestorIds FedBy { get; set; }

        /// <summary>
        /// Gets or sets ancestors that are fed by this twin/insight/...
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("feeds")]
        public FeedsAncestorIds Feeds { get; set; }

        /// <summary>
        /// Gets or sets ancestors that are tenant related.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public TenantAncestorIds Tenant { get; set; }

        /// <summary>
        /// Gets or sets some kind of datetime for filtering based on a start date,
        /// <br/>e.g. an Insight's earliest occurrence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("earliest")]
        public System.DateTimeOffset? Earliest { get; set; }

        /// <summary>
        /// Gets or sets some kind of datetime for filtering based on an end date,
        /// <br/>e.g. an Insight's last occurrence, or a twin last updated date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latest")]
        public System.DateTimeOffset? Latest { get; set; }

        /// <summary>
        /// Gets or sets the date and time the document was indexed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexedDate")]
        public System.DateTimeOffset? IndexedDate { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UnifiedItemDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UnifiedItemDto>(data, options);

        }

    }

    /// <summary>
    /// The ids of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ids : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Ids FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<Ids>(data, options);

        }

    }

    /// <summary>
    /// The modelids of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelIds : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ModelIds FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ModelIds>(data, options);

        }

    }

    /// <summary>
    /// The names of models typically used for twin documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelNames : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ModelNames FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ModelNames>(data, options);

        }

    }

    /// <summary>
    /// Any other tags for the entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tags FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<Tags>(data, options);

        }

    }

    /// <summary>
    /// The names or descriptions of the entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Names : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Names FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<Names>(data, options);

        }

    }

    /// <summary>
    /// The location ancestors of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationAncestorIds : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static LocationAncestorIds FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<LocationAncestorIds>(data, options);

        }

    }

    /// <summary>
    /// The names of location ancestors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationNames : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static LocationNames FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<LocationNames>(data, options);

        }

    }

    /// <summary>
    /// The fedby ancestors of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FedByAncestorIds : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FedByAncestorIds FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FedByAncestorIds>(data, options);

        }

    }

    /// <summary>
    /// The location ancestors of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeedsAncestorIds : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FeedsAncestorIds FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<FeedsAncestorIds>(data, options);

        }

    }

    /// <summary>
    /// The tenant ancestors of the entity, these are searched as a whole (keyword).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantAncestorIds : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TenantAncestorIds FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TenantAncestorIds>(data, options);

        }

    }

    /// <summary>
    /// Parameters for filtering, sorting, faceting, paging, and other search query behaviors. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchOptions
    {
        /// <summary>
        /// A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("highlightPostTag")]
        public string HighlightPostTag { get; set; }

        /// <summary>
        /// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("highlightPreTag")]
        public string HighlightPreTag { get; set; }

        /// <summary>
        /// A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimumCoverage")]
        public double? MinimumCoverage { get; set; }

        /// <summary>
        /// A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queryType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SearchQueryType? QueryType { get; set; }

        /// <summary>
        /// A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scoringStatistics")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScoringStatistics? ScoringStatistics { get; set; }

        /// <summary>
        /// A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scoringProfile")]
        public string ScoringProfile { get; set; }

        /// <summary>
        /// A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("searchMode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SearchMode? SearchMode { get; set; }

        /// <summary>
        /// The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("skip")]
        public int? Skip { get; set; }

        /// <summary>
        /// A full-text search query expression;  Use "*" or omit this
        /// <br/>parameter to match all documents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("searchText")]
        public string SearchText { get; set; }

        /// <summary>
        /// The OData $filter expression to apply to the search query.  You can
        /// <br/>use Create to help
        /// <br/>construct the filter expression.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filter")]
        public string Filter { get; set; }

        /// <summary>
        /// The list of field names to use for hit highlights.  Only searchable
        /// <br/>fields can be used for hit highlighting.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("highlightFields")]
        public System.Collections.Generic.ICollection<string> HighlightFields { get; set; }

        /// <summary>
        /// Join HighlightFields so it can be sent as a comma separated string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("highlightFieldsRaw")]
        public string HighlightFieldsRaw { get; set; }

        /// <summary>
        /// The list of field names to which to scope the full-text search.
        /// <br/>When using fielded search (fieldName:searchExpression) in a full
        /// <br/>Lucene query, the field names of each fielded search expression
        /// <br/>take precedence over any field names listed in this parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("searchFields")]
        public System.Collections.Generic.ICollection<string> SearchFields { get; set; }

        /// <summary>
        /// Join SearchFields so it can be sent as a comma separated string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("searchFieldsRaw")]
        public string SearchFieldsRaw { get; set; }

        /// <summary>
        /// The list of fields to retrieve.  If unspecified, all fields marked
        /// <br/>as retrievable in the schema are included.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("select")]
        public System.Collections.Generic.ICollection<string> Select { get; set; }

        /// <summary>
        /// Join Select so it can be sent as a comma separated string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("selectRaw")]
        public string SelectRaw { get; set; }

        /// <summary>
        /// The number of search results to retrieve. This can be used in
        /// <br/>conjunction with Skip to implement client-side
        /// <br/>paging of search results.  If results are truncated due to
        /// <br/>server-side paging, the response will include a continuation token
        /// <br/>that can be used to issue another Search request for the next page
        /// <br/>of results.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int? Size { get; set; }

        /// <summary>
        /// The list of OData $orderby expressions by which to sort the
        /// <br/>results. Each expression can be either a field name or a call to
        /// <br/>either the geo.distance() or the search.score() functions. Each
        /// <br/>expression can be followed by asc to indicate ascending, or desc to
        /// <br/>indicate descending. The default is ascending order. Ties will be
        /// <br/>broken by the match scores of documents. If no $orderby is
        /// <br/>specified, the default sort order is descending by document match
        /// <br/>score. There can be at most 32 $orderby clauses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string> OrderBy { get; set; }

        /// <summary>
        /// Join OrderBy so it can be sent as a comma separated string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderByRaw")]
        public string OrderByRaw { get; set; }

        /// <summary>
        /// A value that specifies whether to fetch the total count of results
        /// <br/>as the TotalCount property.
        /// <br/>The default value is false.  Setting this value to true may have a
        /// <br/>performance impact.  Note that the count returned is an
        /// <br/>approximation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includeTotalCount")]
        public bool? IncludeTotalCount { get; set; }

        /// <summary>
        /// The list of facet expressions to apply to the search query. Each
        /// <br/>facet expression contains a field name, optionally followed by a
        /// <br/>comma-separated list of name:value pairs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("facets")]
        public System.Collections.Generic.ICollection<string> Facets { get; set; }

        /// <summary>
        /// The list of parameter values to be used in scoring functions (for
        /// <br/>example, referencePointParameter) using the format name-values. For
        /// <br/>example, if the scoring profile defines a function with a parameter
        /// <br/>called 'mylocation' the parameter string would be
        /// <br/>"mylocation--122.2,44.8" (without the quotes).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scoringParameters")]
        public System.Collections.Generic.ICollection<string> ScoringParameters { get; set; }

        /// <summary>
        /// Options for performing Semantic Search. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("semanticSearch")]
        public SemanticSearchOptions SemanticSearch { get; set; }

        /// <summary>
        /// Options for performing Vector Search. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorSearch")]
        public VectorSearchOptions VectorSearch { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SearchOptions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SearchOptions>(data, options);

        }

    }

    /// <summary>
    /// Specifies the syntax of the search query.  The default is "simple".
    /// <br/>Use "full" if your query uses the Lucene query syntax.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchQueryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Semantic")]
        Semantic = 2,

    }

    /// <summary>
    /// A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScoringStatistics
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 1,

    }

    /// <summary>
    /// Specifies whether any or all of the search terms must be matched in order to count the document as a match.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 1,

    }

    /// <summary>
    /// Options for performing Semantic Search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SemanticSearchOptions
    {
        /// <summary>
        /// The name of a semantic configuration that will be used when processing documents for queries of type semantic. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("semanticConfigurationName")]
        public string SemanticConfigurationName { get; set; }

        /// <summary>
        /// This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest
        /// <br/>ranked documents.The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-(number of answers)'
        /// <br/>option after the answers parameter value, such as 'extractive|count-3'. Default count is 1. The confidence threshold can be configured by appending
        /// <br/>the pipe character '|' followed by the 'threshold-(confidence threshold)' option after the answers parameter value, such as 'extractive|threshold-0.9'.
        /// <br/>Default threshold is 0.7.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queryAnswer")]
        public QueryAnswer QueryAnswer { get; set; }

        /// <summary>
        /// This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest
        /// <br/>ranked documents. When Captions is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe
        /// <br/>character '|' followed by the 'highlight-(true/false)' option, such as 'extractive|highlight-true'. Defaults to 'None'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queryCaption")]
        public QueryCaption QueryCaption { get; set; }

        /// <summary>
        /// Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("semanticQuery")]
        public string SemanticQuery { get; set; }

        /// <summary>
        /// Allows the user to choose whether a semantic call should fail completely (default / current behavior), or to return partial results. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errorMode")]
        public SemanticErrorMode ErrorMode { get; set; }

        /// <summary>
        /// Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxWait")]
        public System.TimeSpan? MaxWait { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SemanticSearchOptions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SemanticSearchOptions>(data, options);

        }

    }

    /// <summary>
    /// Configuration for how semantic search returns answers to the search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryAnswer
    {
        /// <summary>
        /// A value that specifies whether Answers should be returned as part of the search response. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("answerType")]
        public QueryAnswerType AnswerType { get; set; }

        /// <summary>
        /// A value that specifies the number of Answers that should be returned as part of the search response and will default to 1. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }

        /// <summary>
        /// A value that specifies the threshold of Answers that should be returned as part of the search response. The threshold is optional and will default to 0.7.
        /// <br/>           
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("threshold")]
        public double? Threshold { get; set; }

        /// <summary>
        /// Constructed from AnswerType, Count and Threshold. For example: "extractive|count-1,threshold-0.7"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queryAnswerRaw")]
        public string QueryAnswerRaw { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QueryAnswer FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<QueryAnswer>(data, options);

        }

    }

    /// <summary>
    /// This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-&lt;number of answers&gt;` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-&lt;confidence threshold&gt;` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryAnswerType
    {
        /// <summary>
        /// Do not return answers for the query. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("none")]
        public QueryAnswerType None { get; set; }

        /// <summary>
        /// Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("extractive")]
        public QueryAnswerType Extractive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QueryAnswerType FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<QueryAnswerType>(data, options);

        }

    }

    /// <summary>
    /// Configuration for how semantic search captions search results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryCaption
    {
        /// <summary>
        /// A value that specifies whether Captions should be returned as part of the search response.
        /// <br/>The default value is .
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("captionType")]
        public QueryCaptionType CaptionType { get; set; }

        /// <summary>
        /// If CaptionType is set to Extractive, setting this to true enables highlighting of the returned captions.
        /// <br/>It populates Highlights.
        /// <br/>The default value is true.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("highlightEnabled")]
        public bool HighlightEnabled { get; set; }

        /// <summary>
        /// Constructed from CaptionType and HighlightEnabled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queryCaptionRaw")]
        public string QueryCaptionRaw { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QueryCaption FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<QueryCaption>(data, options);

        }

    }

    /// <summary>
    /// This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-&lt;true/false&gt;` option, such as `extractive|highlight-true`. Defaults to `None`. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryCaptionType
    {
        /// <summary>
        /// Do not return captions for the query. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("none")]
        public QueryCaptionType None { get; set; }

        /// <summary>
        /// Extracts captions from the matching documents that contain passages relevant to the search query. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("extractive")]
        public QueryCaptionType Extractive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QueryCaptionType FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<QueryCaptionType>(data, options);

        }

    }

    /// <summary>
    /// Allows the user to choose whether a semantic call should fail completely, or to return partial results. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SemanticErrorMode
    {
        /// <summary>
        /// If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partial")]
        public SemanticErrorMode Partial { get; set; }

        /// <summary>
        /// If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fail")]
        public SemanticErrorMode Fail { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SemanticErrorMode FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<SemanticErrorMode>(data, options);

        }

    }

    /// <summary>
    /// Options for performing Vector Search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorSearchOptions
    {
        /// <summary>
        /// The query parameters for multi-vector search queries. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queries")]
        public System.Collections.Generic.ICollection<VectorQuery> Queries { get; set; }

        /// <summary>
        /// Determines whether or not filters are applied before or after the vector search is performed. Default is PreFilter for new indexes. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filterMode")]
        public VectorFilterMode FilterMode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VectorSearchOptions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<VectorSearchOptions>(data, options);

        }

    }

    /// <summary>
    /// The query parameters for vector and hybrid search queries.
    /// <br/>Please note VectorQuery is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// <br/>The available derived classes include VectorizableTextQuery and VectorizedQuery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class VectorQuery
    {
        /// <summary>
        /// The kind of vector query being performed. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        public VectorQueryKind Kind { get; set; }

        /// <summary>
        /// Number of nearest neighbors to return as top hits. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kNearestNeighborsCount")]
        public int? KNearestNeighborsCount { get; set; }

        /// <summary>
        /// When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exhaustive")]
        public bool? Exhaustive { get; set; }

        /// <summary>
        /// Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition. It can be set only when 'rerankWithOriginalVectors' is true. This parameter is only permitted when a compression method is used on the underlying vector field. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("oversampling")]
        public double? Oversampling { get; set; }

        /// <summary>
        /// Relative weight of the vector query when compared to other vector query and/or the text query within the same search request. This value is used when combining the results of multiple ranking lists produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the higher the documents that matched that query will be in the final ranking. Default is 1.0 and the value needs to be a positive number larger than zero. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public float? Weight { get; set; }

        /// <summary>
        /// Vector Fields of type Collection(Edm.Single) to be included in the vector searched. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        /// <summary>
        /// Join Fields so it can be sent as a comma separated string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fieldsRaw")]
        public string FieldsRaw { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VectorQuery FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<VectorQuery>(data, options);

        }

    }

    /// <summary>
    /// The kind of vector query being performed. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorQueryKind
    {
        /// <summary>
        /// Vector query where a raw vector value is provided. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vector")]
        public VectorQueryKind Vector { get; set; }

        /// <summary>
        /// Vector query where a text value that needs to be vectorized is provided. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public VectorQueryKind Text { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VectorQueryKind FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<VectorQueryKind>(data, options);

        }

    }

    /// <summary>
    /// Determines whether or not filters are applied before or after the vector search is performed. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorFilterMode
    {
        /// <summary>
        /// The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postFilter")]
        public VectorFilterMode PostFilter { get; set; }

        /// <summary>
        /// The filter will be applied before the search query. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("preFilter")]
        public VectorFilterMode PreFilter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VectorFilterMode FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<VectorFilterMode>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSearchResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("skip")]
        public int Skip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("take")]
        public int Take { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public long TotalCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IDictionary<string, DocumentSearchResult> Results { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DocumentSearchResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<DocumentSearchResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double Score { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("chunks")]
        public System.Collections.Generic.ICollection<ScoredDocumentChunk> Chunks { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        public System.DateTimeOffset? LastModified { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DocumentSearchResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<DocumentSearchResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoredDocumentChunk
    {

        [System.Text.Json.Serialization.JsonPropertyName("chunk")]
        public string Chunk { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public double Score { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ScoredDocumentChunk FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ScoredDocumentChunk>(data, options);

        }

    }

    /// <summary>
    /// Document Search Mode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentSearchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Vector")]
        Vector = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hybrid")]
        Hybrid = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportTimeSeriesHistoricalRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileNames")]
        public System.Collections.Generic.ICollection<string> FileNames { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ImportTimeSeriesHistoricalRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ImportTimeSeriesHistoricalRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportTimeSeriesHistoricalFromBlobRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("sasUri")]
        public string SasUri { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ImportTimeSeriesHistoricalFromBlobRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ImportTimeSeriesHistoricalFromBlobRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSeriesImportJob : AsyncJob
    {

        [System.Text.Json.Serialization.JsonPropertyName("entitiesError")]
        public System.Collections.Generic.IDictionary<string, string> EntitiesError { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestPath")]
        public string RequestPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processedEntities")]
        public int ProcessedEntities { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalEntities")]
        public int TotalEntities { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSasUrlImport")]
        public bool IsSasUrlImport { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TimeSeriesImportJob FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TimeSeriesImportJob>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryFilter
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public QueryFilterType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filter")]
        public string Filter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QueryFilter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<QueryFilter>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QueryFilterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Direct")]
        Direct = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
        Replace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Copy")]
        Copy = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Test")]
        Test = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultipleEntityResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("responses")]
        public System.Collections.Generic.ICollection<EntityResponse> Responses { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpStatusCode StatusCode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MultipleEntityResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<MultipleEntityResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpStatusCode StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entityId")]
        public string EntityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public string Operation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subEntityId")]
        public string SubEntityId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EntityResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new JsonResponseConverter(), new JsonStringEnumConverter(), new NestedTwinsJsonConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EntityResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HttpStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Continue")]
        Continue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SwitchingProtocols")]
        SwitchingProtocols = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EarlyHints")]
        EarlyHints = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NonAuthoritativeInformation")]
        NonAuthoritativeInformation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoContent")]
        NoContent = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ResetContent")]
        ResetContent = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PartialContent")]
        PartialContent = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiStatus")]
        MultiStatus = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlreadyReported")]
        AlreadyReported = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"IMUsed")]
        IMUsed = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MultipleChoices")]
        MultipleChoices = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MultipleChoices")]
        Ambiguous = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MovedPermanently")]
        MovedPermanently = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MovedPermanently")]
        Moved = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Found")]
        Found = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Found")]
        Redirect = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SeeOther")]
        SeeOther = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SeeOther")]
        RedirectMethod = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"NotModified")]
        NotModified = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UseProxy")]
        UseProxy = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"Unused")]
        Unused = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TemporaryRedirect")]
        TemporaryRedirect = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TemporaryRedirect")]
        RedirectKeepVerb = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PermanentRedirect")]
        PermanentRedirect = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BadRequest")]
        BadRequest = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Unauthorized")]
        Unauthorized = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentRequired")]
        PaymentRequired = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"Forbidden")]
        Forbidden = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"MethodNotAllowed")]
        MethodNotAllowed = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAcceptable")]
        NotAcceptable = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ProxyAuthenticationRequired")]
        ProxyAuthenticationRequired = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestTimeout")]
        RequestTimeout = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"Conflict")]
        Conflict = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"Gone")]
        Gone = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"LengthRequired")]
        LengthRequired = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"PreconditionFailed")]
        PreconditionFailed = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestEntityTooLarge")]
        RequestEntityTooLarge = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestUriTooLong")]
        RequestUriTooLong = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedMediaType")]
        UnsupportedMediaType = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpectationFailed")]
        ExpectationFailed = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MisdirectedRequest")]
        MisdirectedRequest = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"UnprocessableEntity")]
        UnprocessableEntity = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"UnprocessableEntity")]
        UnprocessableContent = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"FailedDependency")]
        FailedDependency = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"UpgradeRequired")]
        UpgradeRequired = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"PreconditionRequired")]
        PreconditionRequired = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"TooManyRequests")]
        TooManyRequests = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestHeaderFieldsTooLarge")]
        RequestHeaderFieldsTooLarge = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"UnavailableForLegalReasons")]
        UnavailableForLegalReasons = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalServerError")]
        InternalServerError = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"NotImplemented")]
        NotImplemented = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"BadGateway")]
        BadGateway = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceUnavailable")]
        ServiceUnavailable = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"GatewayTimeout")]
        GatewayTimeout = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpVersionNotSupported")]
        HttpVersionNotSupported = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"VariantAlsoNegotiates")]
        VariantAlsoNegotiates = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"InsufficientStorage")]
        InsufficientStorage = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"LoopDetected")]
        LoopDetected = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"NotExtended")]
        NotExtended = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"NetworkAuthenticationRequired")]
        NetworkAuthenticationRequired = 66,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class JsonInheritanceConverterAttribute : System.Text.Json.Serialization.JsonConverterAttribute
    {
        public string DiscriminatorName { get; }

        public JsonInheritanceConverterAttribute(System.Type baseType, string discriminatorName = "discriminator")
            : base(typeof(JsonInheritanceConverter<>).MakeGenericType(baseType))
        {
            DiscriminatorName = discriminatorName;
        }
    }

    public class JsonInheritanceConverter<TBase> : System.Text.Json.Serialization.JsonConverter<TBase>
    {
        private readonly string _discriminatorName;

        public JsonInheritanceConverter()
        {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<JsonInheritanceConverterAttribute>(typeof(TBase));
            _discriminatorName = attribute?.DiscriminatorName ?? "discriminator";
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override TBase Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            var hasDiscriminator = document.RootElement.TryGetProperty(_discriminatorName, out var discriminator);
            var subtype = GetDiscriminatorType(document.RootElement, typeToConvert, hasDiscriminator ? discriminator.GetString() : null);

            var bufferWriter = new System.IO.MemoryStream();
            using (var writer = new System.Text.Json.Utf8JsonWriter(bufferWriter))
            {
                document.RootElement.WriteTo(writer);
            }

            return (TBase)System.Text.Json.JsonSerializer.Deserialize(bufferWriter.ToArray(), subtype, options);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, TBase value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WriteString(_discriminatorName, GetDiscriminatorValue(value.GetType()));

            var bytes = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes((object)value, options);
            var document = System.Text.Json.JsonDocument.Parse(bytes);
            foreach (var property in document.RootElement.EnumerateObject())
            {
                property.WriteTo(writer);
            }

            writer.WriteEndObject();
        }

        public string GetDiscriminatorValue(System.Type type)
        {
            var jsonInheritanceAttributeDiscriminator = GetSubtypeDiscriminator(type);
            if (jsonInheritanceAttributeDiscriminator != null)
            {
                return jsonInheritanceAttributeDiscriminator;
            }

            return type.Name;
        }

        protected System.Type GetDiscriminatorType(System.Text.Json.JsonElement jObject, System.Type objectType, string discriminatorValue)
        {
            var jsonInheritanceAttributeSubtype = GetObjectSubtype(objectType, discriminatorValue);
            if (jsonInheritanceAttributeSubtype != null)
            {
                return jsonInheritanceAttributeSubtype;
            }

            if (objectType.Name == discriminatorValue)
            {
                return objectType;
            }

            var typeName = objectType.Namespace + "." + discriminatorValue;
            var subtype = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
            if (subtype != null)
            {
                return subtype;
            }

            throw new System.InvalidOperationException("Could not find subtype of '" + objectType.Name + "' with discriminator '" + discriminatorValue + "'.");
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
