{
  "x-generator": "NSwag v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Willow.AzureDigitalTwins.Api",
    "version": "v1"
  },
  "paths": {
    "/DQCapability": {
      "post": {
        "tags": [
          "DQCapability"
        ],
        "summary": "Creates status",
        "operationId": "DQCapability_CreateStatus",
        "requestBody": {
          "x-name": "status",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CapabilityStatusDto"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns when status created"
          },
          "400": {
            "description": "If no status provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/DQRule/download": {
      "get": {
        "tags": [
          "DQRule"
        ],
        "summary": "Download file by name",
        "operationId": "DQRule_DownloadRuleFile",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/DQRule/delete": {
      "delete": {
        "tags": [
          "DQRule"
        ],
        "summary": "Delete file by Rule Id\nSample request: https://localhost:8001/dqrule/delete?ruleId=Asset-Validation",
        "operationId": "DQRule_DeleteRuleFile",
        "parameters": [
          {
            "name": "ruleId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/DQRule/deleteall": {
      "delete": {
        "tags": [
          "DQRule"
        ],
        "summary": "Delete all Rules files\nSample request: https://localhost:8001/dqrule/deleteall",
        "operationId": "DQRule_DeleteAllRules",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/DQRule/upload": {
      "post": {
        "tags": [
          "DQRule"
        ],
        "summary": "Upload one or more rules in JSON HTTP form files.\nRules are stored by the \"Id\" specified in the rule-template, not by the filename that contais the rule \n  it's up to the caller to make sure that multiple files don't redefine the same rule -\n  the last one in wins.",
        "operationId": "DQRule_UploadRuleFiles",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleFileUploadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/DQRule/rules": {
      "get": {
        "tags": [
          "DQRule"
        ],
        "summary": "Get all the data quality rules. Note that these are pre-loaded so the results\n  will be returned immediately.",
        "operationId": "DQRule_GetDataQualityRules",
        "responses": {
          "200": {
            "description": "A list of data quality rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation": {
      "post": {
        "tags": [
          "DQValidation"
        ],
        "summary": "Write Validation results to ADX",
        "operationId": "DQValidation_CreateValidationResults",
        "requestBody": {
          "x-name": "validationData",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationResults"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Returns when results are written to ADX"
          },
          "400": {
            "description": "If no status provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/{id}": {
      "get": {
        "tags": [
          "DQValidation"
        ],
        "operationId": "DQValidation_GetTwinDataQualityResults",
        "parameters": [
          {
            "name": "dtId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "pagesize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 2
          },
          {
            "name": "continuationtoken",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfValidationResults"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/modelid": {
      "get": {
        "tags": [
          "DQValidation"
        ],
        "operationId": "DQValidation_GetTwinDataQualityResultsByModelIds",
        "parameters": [
          {
            "name": "modelIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "resultSources",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "resultTypes",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/Result"
              }
            },
            "x-position": 3
          },
          {
            "name": "checkTypes",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/CheckType"
              }
            },
            "x-position": 4
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "searchString",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "locationId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 9
          },
          {
            "name": "continuationToken",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 10
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfValidationResults"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/validate": {
      "get": {
        "tags": [
          "DQValidation"
        ],
        "summary": "Triggers an async twins validation job",
        "operationId": "DQValidation_TriggerTwinsValidation",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "modelIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Model ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "exactModelMatch",
            "in": "query",
            "description": "Indicates if model filter must be exact match",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "startCheckTime",
            "in": "query",
            "description": "Starting Export time of the Twins",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "endCheckTime",
            "in": "query",
            "description": "Ending Export time of the Twin",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Twins validation job created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwinsValidationJob"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/search": {
      "get": {
        "tags": [
          "DQValidation"
        ],
        "summary": "Search twin validation jobs filtering by query string parameters",
        "description": "Sample response:\n            \n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"jobId\": \"user@domain.com.Twins.2022.08.17.14.21.49\",\n            \t\t\t\t\"details\": {\n            \t\t\t\t\t\"status\": \"Queued\"\n            \t\t\t\t},\n            \t\t\t\t\"createTime\": \"2022-08-17T13:59:29.2075064Z\",\n            \t\t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\t\"target\": [\n            \t\t\t\t\t\"Twins\"\n            \t\t\t\t]\n            \t\t\t}\n            \t\t]",
        "operationId": "DQValidation_FindValidationJobs",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "twin validation job Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "status",
            "in": "query",
            "description": "twin validation job status",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AsyncJobStatus"
                    }
                  ]
                }
              ]
            },
            "x-position": 3
          },
          {
            "name": "from",
            "in": "query",
            "description": "twin validation job creation date time from filter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "to",
            "in": "query",
            "description": "twin validation job creation date time to filter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "fullDetails",
            "in": "query",
            "description": "Indicates if full details body from twin validation jobs must be retrieved",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of twin validation jobs that match the provided filters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TwinsValidationJob"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/get-latest-job": {
      "get": {
        "tags": [
          "DQValidation"
        ],
        "operationId": "DQValidation_GetLatestValidationJob",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AsyncJobStatus"
                    }
                  ]
                }
              ]
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwinsValidationJob"
                }
              }
            }
          }
        }
      }
    },
    "/DQValidation/delete": {
      "delete": {
        "tags": [
          "DQValidation"
        ],
        "summary": "Delete twin validation jobs by jobId\nSample request: https://https://localhost:8001/dqvalidation/delete?jobIds=nsmoorthy@willowinc.com.Twins.2023.03.24.18.39.26",
        "operationId": "DQValidation_DeleteValidationJob",
        "parameters": [
          {
            "name": "jobIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/Cache/clear": {
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Clears the cache from the memory for the supplied entity types",
        "description": "Sample request:\n            \n    POST\n    [\"twins\", \"relationships\", \"models\"]",
        "operationId": "Cache_ClearCache",
        "requestBody": {
          "x-name": "entityTypes",
          "description": "Array of Entity Types [\"Twins\",\"Models\",\"Relationships\"]",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityType"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the Ok result with no content"
          },
          "400": {
            "description": "When supplied entity types array is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Cache/refresh": {
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Clears and reloads the cache",
        "operationId": "Cache_RefreshCache",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/Documents": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Creates a document twin and uploads file",
        "operationId": "Documents_CreateDocument",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Twin.Id": {
                    "type": "string",
                    "nullable": true
                  },
                  "Twin.ETag": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ETag"
                      }
                    ]
                  },
                  "Twin.LastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "Twin.Metadata.ModelId": {
                    "type": "string",
                    "nullable": true
                  },
                  "Twin.Metadata.PropertyMetadata": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": {
                      "$ref": "#/components/schemas/DigitalTwinPropertyMetadata"
                    }
                  },
                  "Twin.Contents": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": {}
                  },
                  "ShareStorageForSameFile": {
                    "type": "boolean"
                  },
                  "FormFile": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  },
                  "UserEmail": {
                    "type": "string",
                    "nullable": true
                  },
                  "UniqueId": {
                    "type": "string",
                    "nullable": true
                  },
                  "SiteId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document twin information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicDigitalTwin"
                }
              }
            }
          },
          "400": {
            "description": "Twin with an invalid document model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Documents/{id}": {
      "put": {
        "tags": [
          "Documents"
        ],
        "operationId": "Documents_UpdateDocumentType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "documentType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Gets document stream",
        "operationId": "Documents_GetDocumentStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Document id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "422": {
            "description": "Twin does not contain url",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Target documen not found",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "200": {
            "description": "Document stream",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/twins/{twinId}/document/{documentId}": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Associates document to a twin",
        "operationId": "Documents_LinkDocumentToTwin",
        "parameters": [
          {
            "name": "twinId",
            "in": "path",
            "required": true,
            "description": "Twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "Document id",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Association created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicRelationship"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete document association to twin",
        "operationId": "Documents_UnLinkDocumentFromTwin",
        "parameters": [
          {
            "name": "twinId",
            "in": "path",
            "required": true,
            "description": "Twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "Document id",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "When association is deleted"
          }
        }
      }
    },
    "/Documents/getBlobUploadInfo": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get new blob upload info for new document",
        "operationId": "Documents_GetBlobUploadInfo",
        "parameters": [
          {
            "name": "fileNames",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "container sas token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobUploadInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Documents/clientUploadDocTwin": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Creates a document twin - direct blob upload from client's browser approach.",
        "operationId": "Documents_ClientCreateDocument",
        "requestBody": {
          "x-name": "createDocumentTwinRequest",
          "description": "Instance of create document twin request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentTwinRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Document twin information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicDigitalTwin"
                }
              }
            }
          }
        }
      }
    },
    "/Documents/getDocumentBlobsCount": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get document blobs count",
        "operationId": "Documents_GetDocumentBlobsCount",
        "responses": {
          "200": {
            "description": "Document blobs count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Env/version": {
      "get": {
        "tags": [
          "Env"
        ],
        "summary": "Get the current version of ADT API build.",
        "operationId": "Env_Version",
        "responses": {
          "200": {
            "description": "Document stream",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppVersion"
                }
              }
            }
          }
        }
      }
    },
    "/Graph": {
      "post": {
        "tags": [
          "Graph"
        ],
        "operationId": "Graph_GetTwinGraph",
        "requestBody": {
          "x-name": "twinIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwinGraph"
                }
              }
            }
          }
        }
      }
    },
    "/Import/twins": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to import twins (with optional relationships) into the adt instance",
        "description": "Sample request:\n            \n    POST twins\n    {\n            \t\t\t\"twins\": [\n            \t\t\t\t{\n            \t\t\t\t\t\"$dtId\": \"BPY-XX1\",\n            \t\t\t\t\t\"$metadata\": {\n            \t\t\t\t\t\t\"$model\": \"dtmi:com:willowinc:Building;1\"\n            \t\t\t\t\t},\n            \t\t\t\t\t\"type\": \"Commercial Office\",\n            \t\t\t\t\t\"code\": \"XCODE\",\n            \t\t\t\t\t\"name\": \"One Manhattan West\"\n            \t\t\t\t}\n            \t\t\t],\n            \t\t\t\"relationships\": [\n            \t\t\t\t{\n            \t\t\t\t\t\"$relationshipId\": \"includedIn_Portfolio-XX1_BPY-XX1\",\n            \t\t\t\t\t\"$targetId\": \"Portfolio-XX1\",\n            \t\t\t\t\t\"$sourceId\": \"BPY-XX1\",\n            \t\t\t\t\t\"$relationshipName\": \"includedIn\"\n            \t\t\t\t}\n            \t\t\t]\n            \t\t}\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Import.Twins.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_TriggerTwinsImport",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "importTwins",
          "description": "Twins request with optional relationships",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkImportTwinsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If missing twins data in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to delete twins from the adt instance",
        "description": "Sample request:\n            \n    DELETE twins\n            \t\t{\n            \t\t\t\"deleteAll\": false,\n            \t\t\t\"twinIds\": [\"BPW-1MW-Person-1048693609\", \"BPY-1MW-L01-021\"],\n            \t\t\t\"filters\": {\n            \t\t\t\t\"siteID\": \"122324-34343-4434\"\n            \t\t\t}\n            \t\t}\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Delete.Twins.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_BulkDeleteTwin",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "deleteRequest",
          "description": "Delete request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteTwinsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If invalid delete configuration provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Import/relationships": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to import relationships into the adt instance",
        "description": "Sample request:\n            \n    POST relationships\n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"$relationshipId\": \"includedIn_Portfolio-XX1_BPY-XX1\",\n            \t\t\t\t\"$targetId\": \"Portfolio-XX1\",\n            \t\t\t\t\"$sourceId\": \"BPY-XX1\",\n            \t\t\t\t\"$relationshipName\": \"includedIn\"\n            \t\t\t}\n            \t\t]\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Import.Relationships.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_TriggerRelationshipsImport",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "relationships",
          "description": "Collection of relationships to import",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BasicRelationship"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If missing relationships data in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to delete relationships from the adt instance",
        "description": "Sample request:\n            \n    DELETE relationships\n            \t\t{\n            \t\t\t\"deleteAll\": false,\n            \t\t\t\"twinIds\": [\"BPW-1MW-Person-1048693609\", \"BPY-1MW-L01-021\"],\n            \t\t\t\"relationshipIds\": [\"includedIn_Portfolio-XX1_BPY-XX1\"]\n            \t\t}\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Delete.Relationships.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_BulkDeleteRelationships",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "deleteRequest",
          "description": "Delete request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteRelationshipsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If invalid delete configuration provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Import/models": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to import models into the adt instance",
        "description": "Sample request:\n            \n    POST models\n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"@id\": \"dtmi:com:willowinc:Component;1\",\n            \t\t\t\t\"@type\": \"Interface\",\n            \t\t\t\t\"displayName\": {\n            \t\t\t\t\t\"en\": \"Component\"\n            \t\t\t\t},\n            \t\t\t\t\"@context\": [\n            \t\t\t\t\t\"dtmi:dtdl:context;2\"\n            \t\t\t\t]\n            \t\t\t}\n            \t\t]\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Import.Models.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_TriggerModelsImport",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "models",
          "description": "Collection of models to import",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonDocument"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If missing models data in the request body or missing @id property in models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Import"
        ],
        "summary": "Creates an async job to delete models from the adt instance",
        "description": "Sample request:\n            \n    DELETE models\n            \t\t{\n            \t\t\t\"modelIds\": [\"dtmi:com:willowinc:Generator;1\"],\n            \t\t\t\"includeDependencies\": true\n            \t\t}\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"TLM Delete.Models.user@domain.com.2024.07.29.17.29.46.0279\",\n            \t\t\t\"status\": \"Queued\"\n            \t\t\t\"timeCreated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"timeLastUpdated\": \"2022-08-17T14:21:49.286354Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"jobsEntryDetail\":{}\n            \t\t}",
        "operationId": "Import_BulkDeleteModel",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User data to be stored in the async job",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "deleteRequest",
          "description": "Delete request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteModelsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If invalid delete configuration provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/{jobId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get Job info",
        "operationId": "Jobs_GetJobsEntry",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Get Job entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/onDemand": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "operationId": "Jobs_CreateOnDemandJob",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "jobPayload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonDocument"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Creates/Updates a Job entry",
        "operationId": "Jobs_CreateOrUpdateJobEntry",
        "requestBody": {
          "x-name": "entry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobsEntry"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/FindJobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Find a Job entry",
        "operationId": "Jobs_FindJobs",
        "parameters": [
          {
            "name": "isPagination",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "searchJobs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/ListJobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "List Jobs Entry using Willow Pagination Library.",
        "operationId": "Jobs_ListJobs",
        "parameters": [
          {
            "name": "includeDetails",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "batchRequestDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequestDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/JobTypes": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get all Job types",
        "operationId": "Jobs_GetAllJobTypes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/deleteBulk": {
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Delete Jobs entries with the input job ids.\nIgnored bad or not found job ids.",
        "operationId": "Jobs_DeleteJobsEntries",
        "parameters": [
          {
            "name": "isHardDelete",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "jobIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "428": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/deleteJobsOlderThan": {
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Delete Jobs entries with Jobs TimeCreated earlier than the input date",
        "operationId": "Jobs_DeleteOlderJobEntries",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 1
          },
          {
            "name": "jobType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "hardDelete",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/GetMappedEntriesAsync": {
      "post": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get mapped entries",
        "operationId": "Mapping_GetMappedEntries",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MappedEntryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Get mapped entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappedEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/GetGroupedMappedEntriesCount": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get mapped entries grouped by fieldName, and count of each group.",
        "operationId": "Mapping_GetGroupedCount",
        "parameters": [
          {
            "name": "fieldName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Status"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of records grouped by fieldName and its count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MappedEntriesGroupCount"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/{mappedId}": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get mapped entry",
        "operationId": "Mapping_GetMappedEntry",
        "parameters": [
          {
            "name": "mappedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Get mapped entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappedEntry"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mapping"
        ],
        "summary": "Delete a mapped entry",
        "operationId": "Mapping_DeleteMappedEntry",
        "parameters": [
          {
            "name": "mappedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping": {
      "post": {
        "tags": [
          "Mapping"
        ],
        "summary": "Creates a mapped entry",
        "operationId": "Mapping_CreateMappedEntry",
        "requestBody": {
          "x-name": "entry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMappedEntry"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappedEntry"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mapping"
        ],
        "summary": "Update a mapped entry",
        "operationId": "Mapping_UpdateMappedEntry",
        "requestBody": {
          "x-name": "entry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMappedEntry"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappedEntry"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/status": {
      "put": {
        "tags": [
          "Mapping"
        ],
        "summary": "Update mapped entries status to specified status.\nAny bad mapped ids will be ignored. Return total number of mapped entries updated.",
        "operationId": "Mapping_UpdateMappedEntryStatus",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMappedEntryStatusRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/updateAllstatus": {
      "put": {
        "tags": [
          "Mapping"
        ],
        "summary": "Update all mapped entries status to specified status based on MappedEntryAllRequest",
        "operationId": "Mapping_UpdateAllMappedEntryStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Status"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MappedEntryAllRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/deleteBulk": {
      "delete": {
        "tags": [
          "Mapping"
        ],
        "summary": "Delete mapped entries with the input mapped ids.\nIgnored bad or not found mapped ids.",
        "operationId": "Mapping_DeleteMappedEntries",
        "requestBody": {
          "x-name": "mappedIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/deleteAll": {
      "delete": {
        "tags": [
          "Mapping"
        ],
        "summary": "Delete all mapped entries based on MappedEntryDeleteAllRequest.",
        "operationId": "Mapping_DeleteAllMappedEntries",
        "requestBody": {
          "x-name": "request",
          "description": "Filter records based on request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MappedEntryAllRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/count": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "operationId": "Mapping_GetMappedEntriesCount",
        "parameters": [
          {
            "name": "statuses",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/Status"
              }
            },
            "x-position": 1
          },
          {
            "name": "prefixToMatchId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "excludePrefixes",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/GetUpdateTwinRequests": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get Update twin requests",
        "operationId": "Mapping_GetUpdateTwinRequests",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Used to identify the starting point to return records.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Amount of records to fetch for each requests.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of update twin requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateMappedTwinRequestResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/updateTwinRequestsCount": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get the count of update twin requests.",
        "operationId": "Mapping_GetUpdateTwinRequestsCount",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/CreateUpdateTwinRequests": {
      "post": {
        "tags": [
          "Mapping"
        ],
        "summary": "Creates update twin request",
        "operationId": "Mapping_CreateUpdateTwinRequest",
        "parameters": [
          {
            "name": "willowTwinId",
            "in": "query",
            "description": "Willow twin id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "jsonPatch",
          "description": "List of json patch operations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMappedTwinRequest"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/UpdateTwinUpdateRequest": {
      "put": {
        "tags": [
          "Mapping"
        ],
        "summary": "Update a update twin request",
        "operationId": "Mapping_UpdateTwinUpdateRequest",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "jsonPatch",
          "description": "List of json patch operations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMappedTwinRequest"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/UpsertUpdateTwinRequest": {
      "put": {
        "tags": [
          "Mapping"
        ],
        "summary": "Upsert update twin request. If record with willowTwinId exists, update it. Otherwise, create a new record.",
        "operationId": "Mapping_UpsertUpdateTwinRequest",
        "parameters": [
          {
            "name": "willowTwinId",
            "in": "query",
            "description": "willowTwinId",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "jsonPatch",
          "description": "json patch",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "twin update request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMappedTwinRequest"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/deleteBulkUpdateTwinRequests": {
      "delete": {
        "tags": [
          "Mapping"
        ],
        "summary": "Delete update twin requests based on ids.\nIgnored bad or not found ids.",
        "operationId": "Mapping_DeleteUpdateTwinRequests",
        "requestBody": {
          "x-name": "ids",
          "description": "List of updated twin request id",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/deleteAllUpdateTwinRequests": {
      "delete": {
        "tags": [
          "Mapping"
        ],
        "summary": "Delete all twin update requests",
        "operationId": "Mapping_DeleteAllUpdateTwinRequests",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Total deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/CreateMtiAsyncJob": {
      "post": {
        "tags": [
          "Mapping"
        ],
        "summary": "Create a MTI async job and store in storage account.",
        "operationId": "Mapping_CreateMtiAsyncJob",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MtiAsyncJobRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtiAsyncJob"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/UpdateMtiAsyncJobStatus": {
      "post": {
        "tags": [
          "Mapping"
        ],
        "summary": "Update  MTI async job's status and last updated time.",
        "operationId": "Mapping_UpdateMtiAsyncJobStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AsyncJobStatus"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MtiAsyncJob"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtiAsyncJob"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/FindMtiAsyncJobs": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Search for MTI async jobs",
        "operationId": "Mapping_FindMtiAsyncJobs",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "Filter by MTI async job's id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AsyncJobStatus"
                    }
                  ]
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MtiAsyncJob"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Mapping/getLatestMtiAsyncJob": {
      "get": {
        "tags": [
          "Mapping"
        ],
        "summary": "Get latest MTI async jobs",
        "operationId": "Mapping_getLatestMtiAsyncJob",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AsyncJobStatus"
                    }
                  ]
                }
              ]
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MtiAsyncJob"
                }
              }
            }
          }
        }
      }
    },
    "/Models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get models",
        "description": "Sample reponse:\n            \n[\n\t{\n\t\t\"id\": \"dtmi:com:willowinc:CompressorRunState;1\",\n\t\t\"displayName\": {\n\t\t\t\"en\": \"Compressor Run State\"\n\t\t},\n\t\t\"decommissioned\": false,\n\t\t\"model\": {\n\t\t\t\"@id\": \"dtmi:com:willowinc:CompressorRunState;1\",\n\t\t\t\"@type\": \"Interface\",\n\t\t\t\"displayName\": {\n\t\t\t\t\"en\": \"Compressor Run State\"\n\t\t\t},\n\t\t\t\"extends\": [\n\t\t\t\t\"dtmi:com:willowinc:RunState;1\"\n\t\t\t],\n\t\t\t\"contents\": [],\n\t\t\t\"@context\": [\n\t\t\t\t\"dtmi:dtdl:context;2\"\n\t\t\t]\n\t\t},\n\t\t\"twinCount\": {\n\t\t\t\"exact\": 7,\n\t\t\t\"total\": 7\n\t\t}\n\t}\n\t{\n\t\t...\n\t}\n]",
        "operationId": "Models_GetModels",
        "parameters": [
          {
            "name": "rootModel",
            "in": "query",
            "description": "Root model to get dependencies from",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "includeModelDefinitions",
            "in": "query",
            "description": "Indicates if full model definition must be returned",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeTwinCount",
            "in": "query",
            "description": "Returns calculated stats for twin count",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "sourceType",
            "in": "query",
            "description": "Indicate which source type to query from",
            "schema": {
              "default": "Adx",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SourceType"
                }
              ]
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Returns models from instance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If twin count is not requested and location id is sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Creates models",
        "description": "Sample request:\n            \n\tPOST\n\t[\n\t\t{\n\t\t\t\"@id\": \"dtmi:com:willowinc:InductanceSensor;1\",\n\t\t\t\"@type\": \"Interface\",\n\t\t\t\"displayName\": {\n\t\t\t\t\"en\": \"Inductance Sensor\"\n\t\t\t},\n\t\t\t\"extends\": [\n\t\t\t\t\"dtmi:com:willowinc:QuantitySensor;1\"\n\t\t\t],\n\t\t\t\"contents\": [],\n\t\t\t\"@context\": [\n\t\t\t\t\"dtmi:dtdl:context;2\"\n\t\t\t]\n\t\t}\n\t]",
        "operationId": "Models_CreateModels",
        "requestBody": {
          "x-name": "models",
          "description": "Model definitions",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonDocument"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns ok when models created"
          },
          "400": {
            "description": "If no models provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Models/{id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get model by id",
        "description": "Sample reponse:\n            \n\t{\n\t\t\"id\": \"dtmi:com:willowinc:CompressorRunState;1\",\n\t\t\"displayName\": {\n\t\t\t\"en\": \"Compressor Run State\"\n\t\t},\n\t\t\"decommissioned\": false,\n\t\t\"model\": {\n\t\t\t\"@id\": \"dtmi:com:willowinc:CompressorRunState;1\",\n\t\t\t\"@type\": \"Interface\",\n\t\t\t\"displayName\": {\n\t\t\t\t\"en\": \"Compressor Run State\"\n\t\t\t},\n\t\t\t\"extends\": [\n\t\t\t\t\"dtmi:com:willowinc:RunState;1\"\n\t\t\t],\n\t\t\t\"contents\": [],\n\t\t\t\"@context\": [\n\t\t\t\t\"dtmi:dtdl:context;2\"\n\t\t\t]\n\t\t},\n\t\t\"twinCount\": {\n\t\t\t\"exact\": 7,\n\t\t\t\"total\": 7\n\t\t}\n\t}",
        "operationId": "Models_GetModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the target model",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "includeModelDefinitions",
            "in": "query",
            "description": "Indicates if full model definition must be returned",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeTwinCount",
            "in": "query",
            "description": "Returns calculated stats for twin count",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "400": {
            "description": "If twin count is not requested and location id is sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns model from instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelResponse"
                }
              }
            }
          },
          "404": {
            "description": "If model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete model by id",
        "operationId": "Models_DeleteModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Model id to delete",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "When model is successfully delete"
          },
          "404": {
            "description": "When model is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Models/upgrade/repo": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Creates an async job to load models from repositories",
        "description": "Sample request:\n            \n    POST upgrade/repo\n    [\n            \t\t\t{\n            \t\t\t\t\"owner\": \"willowinc\",\n            \t\t\t\t\"repository\": \"opendigitaltwins-building\",\n            \t\t\t\t\"path\": \"ontology\",\n            \t\t\t\t\"submodules\": [\"Ontology/opendigitaltwins-building\"]\n            \t\t\t}\n            \t\t]\n            \nSample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"user@domain.com.Models.2022.08.10.15.08.16\",\n            \t\t\t\"details\": {\n            \t\t\t\t\"status\": \"Queued\"\n            \t\t\t},\n            \t\t\t\"createTime\": \"2022-08-10T15:08:16.8065658Z\",\n            \t\t\t\"lastUpdateTime\": \"2022-08-10T15:08:22.1577255Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"target\": [\n            \t\t\t\t\"Models\"\n            \t\t\t]\n            \t\t}",
        "operationId": "Models_UpgradeFromRepos",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "User Data",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "repositories",
          "description": "Repositories information",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpgradeModelsRepoRequest"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If missing repositories data, no models are retrieved from the repos or submodules incorrect path (submodules path is case sensitive)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Models/upgrade/zip": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Creates an async job to load models from zip files",
        "description": "Sample response:\n            \n            \t\t{\n            \t\t\t\"jobId\": \"user@domain.com.Models.2022.08.10.15.08.16\",\n            \t\t\t\"details\": {\n            \t\t\t\t\"status\": \"Queued\"\n            \t\t\t},\n            \t\t\t\"createTime\": \"2022-08-10T15:08:16.8065658Z\",\n            \t\t\t\"lastUpdateTime\": \"2022-08-10T15:08:22.1577255Z\",\n            \t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t\"target\": [\n            \t\t\t\t\"Models\"\n            \t\t\t]\n            \t\t}",
        "operationId": "Models_UpgradeFromZipFiles",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to folder that contains model definition",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "zipFiles": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          },
          "400": {
            "description": "If no files provided or no models in files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Query/twins": {
      "post": {
        "tags": [
          "Query"
        ],
        "summary": "Executes provided query to return twins and appends relationships [Use only when other endpoints do not have satisfy your needs]",
        "description": "Sample request\n            \t\tPOST twins for ADT\n            \t\t{\n            \t\t\t\"query\": \"select * from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')\",\n            \t\t\t\"includeRelationships\": false,\n            \t\t\t\"idsOnly\": false\n            \t\t}\n            \t\tPOST twins for ADX\n            \t\t{\n            \t\t    \"query\": \"ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1'\",\n            \t\t\t\"includeRelationships\": false,\n            \t\t\t\"idsOnly\": false,\n            \t\t\t\"isAdx\": false\n    }\n            \nSample response\n            \n            \t\t{\n            \t\t\t\"content\": [\n            \t\t\t{\n            \t\t\t\t\t\"twin\": {\n            \t\t\t\t\t\t\"$dtId\": \"BPY-1MW\",\n            \t\t\t\t\t\t\"$metadata\": {\n            \t\t\t\t\t\t\t\"$model\": \"dtmi:com:willowinc:Building;1\n            \t\t\t\t\t\t},\n            \t\t\t\t\t\t\"type\": \"Commercial Office\",\n            \t\t\t\t\t\t\"coordinates\": {\n            \t\t\t\t\t\t\t\"latitude\": 40.7528,\n            \t\t\t\t\t\t\t\"longitude\": -73.997934\n            \t\t\t\t\t\t},\n            \t\t\t\t\t\t\"elevation\": 34,\n            \t\t\t\t\t\t\"height\": 995,\n            \t\t\t\t\t\t\"uniqueID\": \"4e5fc229-ffd9-462a-882b-16b4a63b2a8a\",\n            \t\t\t\t\t\t\"code\": \"1MX\",\n            \t\t\t\t\t\t\"name\": \"One Miami West\",\n            \t\t\t\t\t\t\"siteID\": \"4e5fc229-ffd9-462a-882b-16b4a63b2a8a\",\n            \t\t\t\t\t\t\"address\": {\n            \t\t\t\t\t\t\t\"region\": \"NY\"\n            \t\t\t\t\t\t}\n            \t\t\t\t\t}\n            \t\t\t\t}\n            \t\t\t]\n            \t\t}",
        "operationId": "Query_QueryTwinsWithRelationships",
        "parameters": [
          {
            "name": "sourceType",
            "in": "query",
            "description": "Adx/AdtQuery",
            "schema": {
              "default": "AdtQuery",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SourceType"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "header",
            "description": "Continuation token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "queryTwinsRequest",
          "description": "Query parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryTwinsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "With found twins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfTwinWithRelationships"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Query": {
      "post": {
        "tags": [
          "Query"
        ],
        "summary": "Executes provided query and returns results without parsing [Use only when other endpoints do not have satisfy your needs]",
        "description": "Sample ADT request \n            \t\tPOST\n            \t\t{\n            \t\t\t\"select count() from digitaltwins where IS_OF_MODEL('dtmi:com:willowinc:Building;1')\"\n            \t\t}\n            \nSample ADX request \n            \t\tPOST\n            \t\t{\n            \t\t\t\"ActiveTwins | where ModelId == 'dtmi:com:willowinc:Building;1' | count\"\n            \t\t}\n            \nSample response\n            \n            \t\t{\n            \t\t\t\"content\": [\n            \t\t\t\t{\n            \t\t\t\t\t\"COUNT\": 1\n            \t\t\t\t}\n            \t\t\t]\n            \t\t}",
        "operationId": "Query_Query",
        "parameters": [
          {
            "name": "sourceType",
            "in": "query",
            "description": "Adx/AdtQuery",
            "schema": {
              "default": "AdtQuery",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SourceType"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "header",
            "description": "Continuation token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "query",
          "description": "Query to be executed",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Query results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfJsonDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Relationships": {
      "put": {
        "tags": [
          "Relationships"
        ],
        "summary": "Creates or replaces relationship",
        "description": "Sample request\n            \n            \t\tPUT\n            \t\t{\n            \t\t\t\"$relationshipId\": \"includedIn_Portfolio-BPY_54fcd904-44a7-4459-b43c-5f936b2717b0\",\n            \t\t\t\"$targetId\": \"Portfolio-BPY\",\n            \t\t\t\"$sourceId\": \"NYC-MW\",\n            \t\t\t\"$relationshipName\": \"includedIn\"\n            \t\t}",
        "operationId": "Relationships_UpsertRelationship",
        "requestBody": {
          "x-name": "relationship",
          "description": "Relationship data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicRelationship"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Updated relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicRelationship"
                }
              }
            }
          },
          "400": {
            "description": "If provided relationship is missing source id, target id or name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/twins/{twinid}/relationship/{relationshipid}": {
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Deletes a twin relationship",
        "operationId": "Relationships_DeleteRelationship",
        "parameters": [
          {
            "name": "twinid",
            "in": "path",
            "required": true,
            "description": "Source twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "relationshipid",
            "in": "path",
            "required": true,
            "description": "Relationship id",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "When target relationship is deleted"
          },
          "404": {
            "description": "Relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets a twin relationship",
        "operationId": "Relationships_GetRelationship",
        "parameters": [
          {
            "name": "twinid",
            "in": "path",
            "required": true,
            "description": "Source twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "relationshipid",
            "in": "path",
            "required": true,
            "description": "Relationship id",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Target relationship retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicRelationship"
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/twins/{twinid}/Relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets outgoing relationships for a twin",
        "operationId": "Relationships_GetRelationships",
        "parameters": [
          {
            "name": "twinid",
            "in": "path",
            "required": true,
            "description": "Source twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "relationshipName",
            "in": "query",
            "description": "Target relationship name",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Target relationships retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicRelationship"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Twin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/twins/{twinid}/Relationships/incoming": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets incoming relationships for a twin",
        "operationId": "Relationships_GetIncomingRelationships",
        "parameters": [
          {
            "name": "twinid",
            "in": "path",
            "required": true,
            "description": "Source twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Target relationships retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicRelationship"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Twin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Execute Search against Azure Cognitive Service",
        "description": "To learn more about LQS, Visit",
        "operationId": "Search_QueryUnifiedIndex",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query Expression in string format.\n             The query expression string use Lucene Query Syntax to Search ACS.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "options",
          "description": "Search Options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchOptions"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "List of instances of SearchResult`1",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResultOfUnifiedItemDto"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Search"
        ],
        "operationId": "Search_QueryDocumentIndex",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "documentSearchMode",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DocumentSearchMode"
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TimeSeries/import": {
      "post": {
        "tags": [
          "TimeSeries"
        ],
        "operationId": "TimeSeries_TriggerImport",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTimeSeriesHistoricalRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeSeries/sasUriImport": {
      "post": {
        "tags": [
          "TimeSeries"
        ],
        "summary": "Trigger import from blob request",
        "operationId": "TimeSeries_TriggerImportFromBlobRequest",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "Request user id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "User-Data",
            "x-originalName": "userData",
            "in": "header",
            "description": "Request user data",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Import request object with sas url",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTimeSeriesHistoricalFromBlobRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeSeries/search": {
      "get": {
        "tags": [
          "TimeSeries"
        ],
        "summary": "Search async jobs filtering by query string parameters",
        "description": "Sample response:\n            \n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"jobId\": \"user@domain.com.Twins.2022.08.17.14.21.49\",\n            \t\t\t\t\"details\": {\n            \t\t\t\t\t\"status\": \"Queued\"\n            \t\t\t\t},\n            \t\t\t\t\"createTime\": \"2022-08-17T13:59:29.2075064Z\",\n            \t\t\t\t\"userId\": \"user@domain.com\",\n            \t\t\t}\n            \t\t]",
        "operationId": "TimeSeries_FindImports",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Async job Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "status",
            "in": "query",
            "description": "Async job status",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AsyncJobStatus"
                    }
                  ]
                }
              ]
            },
            "x-position": 3
          },
          {
            "name": "from",
            "in": "query",
            "description": "Async job creation date time from filter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "to",
            "in": "query",
            "description": "Async job creation date time to filter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "fullDetails",
            "in": "query",
            "description": "Indicates if full details body from async jobs must be retrieved",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of async jobs that match the provided filters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeSeriesImportJob"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/TimeSeries/cancel/{id}": {
      "get": {
        "tags": [
          "TimeSeries"
        ],
        "summary": "Cancel async job by id",
        "operationId": "TimeSeries_CancelImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Async job id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "description": "User id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "Async job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Async job successfully cancelled"
          }
        }
      }
    },
    "/TimeSeries/GetTimeSeriesBlobUploadInfo": {
      "get": {
        "tags": [
          "TimeSeries"
        ],
        "summary": "Get new blob upload info for new time series data",
        "operationId": "TimeSeries_GetBlobUploadInfo",
        "parameters": [
          {
            "name": "fileNames",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "container sas token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobUploadInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Twins": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Query twins",
        "description": "Sample request\n            \n            \t\tPOST\n            \t\t{\n            \t\t\t\"request\": {\n            \t\t        \"modelIds\": [\"dtmi:com:willowinc:AirHandlingUnit;1\"],\n            \t\t        \"locationId\": \"53d380c2-d31a-4cd1-8958-795407407a82\",\n            \t\t        \"exactModelMatch\":true,\n            \t\t        \"includeRelationships\": true,\n            \t\t        \"includeIncomingRelationships\": true,\n            \t\t        \"orphanOnly\": false,\n            \t\t        \"sourceType\": \"AdtQuery\",\n            \t\t        \"relationshipsToTraverse\":[],\n            \t\t        \"searchString\": \"AHU\",\n            \t\t        \"startTime\": \"2023-04-15T20:37:21.0274638Z\",\n            \t\t        \"endTime\": \"2023-04-25T20:37:21.0274638Z\"\n            \t\t\t}\n            \t\t}",
        "operationId": "Twins_QueryTwins",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limit the number of twins to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 2
          },
          {
            "name": "continuationToken",
            "in": "header",
            "description": "Continuation token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "includeTotalCount",
            "in": "query",
            "description": "When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Query twins criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTwinsInfoRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Matching twins with relationships",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfTwinWithRelationships"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. LocationId param cannot be empty when relationshipToTraverse param is specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Twins"
        ],
        "summary": "Creates or replaces a twin",
        "description": "Sample request\n            \n            \t\tPUT\n            \t\t{\n            \t\t\t\"twin\": {\n            \t\t\t\t\"$dtId\": \"BPY-1MW\",\n            \t\t\t\t\"$metadata\": {\n            \t\t\t\t\t\"$model\": \"dtmi:com:willowinc:Building;1\"\n            \t\t\t\t},\n            \t\t\t\t\"type\": \"Commercial Office\",\n            \t\t\t\t\"coordinates\": {\n            \t\t\t\t\t\"latitude\": 40.7528,\n            \t\t\t\t\t\"longitude\": -73.997934\n            \t\t\t\t},\n            \t\t\t\t\"elevation\": 34,\n            \t\t\t\t\"height\": 995,\n            \t\t\t\t\"uniqueID\": \"4e5fc229-ffd9-462a-882b-16b4a63b2a8a\",\n            \t\t\t\t\"code\": \"1MX\",\n            \t\t\t\t\"name\": \"One Miami West\",\n            \t\t\t\t\"siteID\": \"4e5fc229-ffd9-462a-882b-16b4a63b2a8a\",\n            \t\t\t\t\"address\": {\n            \t\t\t\t\t \"region\": \"NY\"\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}",
        "operationId": "Twins_UpdateTwin",
        "parameters": [
          {
            "name": "includeAdxUpdate",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "twin",
          "description": "Twin information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicDigitalTwin"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Twin information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicDigitalTwin"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/gettwins": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Get twins",
        "description": "Sample request\n            \n            \t\tPOST\n            \t\t{\n            \t\t\t\"request\": {\n            \t\t        \"modelIds\": [\"dtmi:com:willowinc:AirHandlingUnit;1\"],\n            \t\t        \"locationId\": \"53d380c2-d31a-4cd1-8958-795407407a82\",\n            \t\t        \"exactModelMatch\":true,\n            \t\t        \"includeRelationships\": true,\n            \t\t        \"includeIncomingRelationships\": true,\n            \t\t        \"orphanOnly\": false,\n            \t\t        \"sourceType\": \"AdtQuery\",\n            \t\t        \"relationshipsToTraverse\":[],\n            \t\t        \"searchString\": \"AHU\",\n            \t\t        \"startTime\": \"2023-04-15T20:37:21.0274638Z\",\n            \t\t        \"endTime\": \"2023-04-25T20:37:21.0274638Z\",\n            \"QueryFilter.Filter\": \"Id == 'FAW-IMIC-L01-LGT-1617' and Location.SiteId == '5e2c88fb-42ce-4ede-9203-b3015a701f10'\", // For ADX\n            \t\t        \"QueryFilter.Filter\": \"twins.supplyFan.nominalExternalStaticPressure = 3.25\", // For ADT\n            \t\t        \"Type\": \"DIRECT\"\n            \t\t\t    }\n            \t\t}",
        "operationId": "Twins_GetTwins",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 2
          },
          {
            "name": "includeTotalCount",
            "in": "query",
            "description": "When querying by ADT, return the total count of items that match the filter criteria along with the first page of items. Using this flag for ADT has the same cost as issuing an additional call to GetTwinCount with the same filter parameters, minus the extra REST call from your application",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "continuationToken",
            "in": "header",
            "description": "Continuation token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request includes : modelId, locationId, exactModelMatch, includeRelationships, includeIncomingRelationships, sourceType(Adx,Adtquery,AdtMemory)\n             , orphanOnly, relationshipsToTraverse(IsPartOf, LocatedIn, IncludedIn), searchString,\n             QueryFilter (QueryFilter with Type and Filter condition;This filter is meant to only be used in special cases and when the query is not automatically\n             generated by ADTAPI from the rest of the GetTwinsInfoRequest properties.\n             A Type=Direct filter must be in the format specific to the database specified by SourceType) ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTwinsInfoRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Target twins retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfTwinWithRelationships"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. LocationId param cannot be empty when relationshipToTraverse param is specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/trees/model": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Get twins in tree form",
        "description": "Sample response\n[\n\t{\n\t\t\"twin\": {\n\t\t\t\"$dtId\": \"THE-TWIN-ID\",\n\t\t\t\"$metadata\": {\n\t\t\t\t\"$model\": \"dtmi:com:willowinc:OccupancyZone;1\"\n\t\t\t}\n\t\t},\n\t\t\"children\": [\n\t\t\t{\n\t\t\t\t\"twin\": {},\n\t\t\t\t\"children\": []\n\t\t\t}\n\t\t\t{\n\t\t\t...\n\t\t\t}\n\t\t]\n\t}\n]",
        "operationId": "Twins_GetTreesByModel",
        "parameters": [
          {
            "name": "rootModelIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Target model ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "childModelIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Child Model Ids that restricts the type of twins in the tree response.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "outgoingRelationships",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of relationship types to be considered for traversal.\n                         Default Values : [\"isPartOf\", \"locatedIn\"] will be used when relationshipsToTraverse is not supplied",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "incomingRelationships",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of relationship types to be considered for traversal.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          },
          {
            "name": "exactModelMatch",
            "in": "query",
            "description": "Indicates if model filter must be exact match",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Twin tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NestedTwin"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If no model is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/trees/scope": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Get twins in tree form",
        "description": "Sample response\n[\n\t{\n\t\t\"twin\": {\n\t\t\t\"$dtId\": \"THE-TWIN-ID\",\n\t\t\t\"$metadata\": {\n\t\t\t\t\"$model\": \"dtmi:com:willowinc:OccupancyZone;1\"\n\t\t\t}\n\t\t},\n\t\t\"children\": [\n\t\t\t{\n\t\t\t\t\"twin\": {},\n\t\t\t\t\"children\": []\n\t\t\t}\n\t\t\t{\n\t\t\t...\n\t\t\t}\n\t\t]\n\t}\n]",
        "operationId": "Twins_GetTreesByScope",
        "parameters": [
          {
            "name": "twinScopeIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Root twin ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "childModelIds",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Child Model Ids that restricts the type of twins in the tree response.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "outgoingRelationships",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of relationship types to be considered for traversal.\n                         Default Values : [\"isPartOf\", \"locatedIn\"] will be used when relationshipsToTraverse is not supplied",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "incomingRelationships",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of relationship types to be considered for traversal.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Twin tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NestedTwin"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If no model is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/count": {
      "get": {
        "tags": [
          "Twins"
        ],
        "operationId": "Twins_GetTwinsCount",
        "parameters": [
          {
            "name": "ModelId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "LocationId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ExactModelMatch",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          },
          {
            "name": "IncludeRelationships",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "IncludeIncomingRelationships",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 5
          },
          {
            "name": "OrphanOnly",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 6
          },
          {
            "name": "SourceType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SourceType"
            },
            "x-position": 7
          },
          {
            "name": "RelationshipsToTraverse",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-position": 8
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 9
          },
          {
            "name": "StartTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "EndTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "QueryFilter.Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/QueryFilterType"
            },
            "x-position": 12
          },
          {
            "name": "QueryFilter.Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/{id}": {
      "patch": {
        "tags": [
          "Twins"
        ],
        "summary": "Patch a twin",
        "description": "Sample request\n            \n\tPATCH\n\t[\n\t\t{\n\t\t\t\"op\":\"replace\",\n\t\t\t\"path\":\"/customproperties/description\",\n\t\t\t\"value\":\"Patched description yes 8\"\n\t\t}\n\t]",
        "operationId": "Twins_PatchTwin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "includeAdxUpdate",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "jsonPatchDocument",
          "description": "Patch information",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Twin patched"
          },
          "404": {
            "description": "Twin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Twins"
        ],
        "summary": "Get twin by id",
        "operationId": "Twins_GetTwinById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Twin id",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "sourceType",
            "in": "query",
            "description": "ADX/AdtQuery",
            "schema": {
              "default": "AdtQuery",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SourceType"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "includeRelationships",
            "in": "query",
            "description": "true/false",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Twin information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwinWithRelationships"
                }
              }
            }
          },
          "404": {
            "description": "Twin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/ids": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Get twins by ids",
        "description": "Currently queries are not chunked into multiple queries if there are a large number of IDs passed in -- it's\n            up to the caller to ensure that the number of IDs or total query length does not exceed the limitations of the database\n            that is queried. Paging is not supported. The caller can control the number of twins returned by the number of IDs passed in.\n            Any ids that do not reference valid twins will silently be omitted from the response -- no 404/NotFound will be generated.\n            Match response against your query to find any invalid IDs.",
        "operationId": "Twins_GetTwinsByIds",
        "parameters": [
          {
            "name": "sourceType",
            "in": "query",
            "description": "Adx,AdtQuery,AdtMemory,Acs",
            "schema": {
              "default": "AdtQuery",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SourceType"
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "includeRelationships",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "ids",
          "description": "Twin ids",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Twin information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfTwinWithRelationships"
                }
              }
            }
          }
        }
      }
    },
    "/Twins/validate": {
      "post": {
        "tags": [
          "Twins"
        ],
        "summary": "Validates incoming twins according to rule templates",
        "description": "Sample request\n            \t\tPOST\n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"$dtId\": \"BPY-1MW-Person-1048687360-Total-Count\",\n            \t\t\t\t\"$metadata\": {\n            \t\t\t\t\t\"$model\": \"dtmi:com:willowinc:PeopleCountSensor-TEST;1\"\n            \t\t\t\t},\n            \t\t\t\t\"trendID\": \"allowed-xxx\",\n            \t\t\t\t\"name\": \"Total Count\",\n            \t\t\t\t\"communication\": {\n            \t\t\t\t\t\"$metadata\": {}\n            \t\t\t\t},\n            \t\t\t\t\"categorizationProperties\": {\n            \t\t\t\t\t\"$metadata\": {}\n            \t\t\t\t}\n            \t\t\t}\n            \t\t]\n            \nSample response\n            \t\t[\n            \t\t\t{\n            \t\t\t\t\"twinId\": \"BPY-1MW-Person-1048687360-Total-Count-2\",\n            \t\t\t\t\"results\": [\n            \t\t\t\t\t{\n            \t\t\t\t\t\t\"ruleId\": \"test-rule\",\n            \t\t\t\t\t\t\"propertyErrors\": {\n            \t\t\t\t\t\t\t\"trendID\": [\n            \t\t\t\t\t\t\t\t\"InvalidValue\"\n            \t\t\t\t\t\t\t],\n            \t\t\t\t\t\t\t\"siteID\": [\n            \t\t\t\t\t\t\t\t\"RequiredMissing\"\n            \t\t\t\t\t\t\t]\n            \t\t\t\t\t\t}\n            \t\t\t\t\t}\n            \t\t\t\t]\n            \t\t\t}\n            \t\t]",
        "operationId": "Twins_ValidateTwins",
        "requestBody": {
          "x-name": "twins",
          "description": "Twins to validate",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BasicDigitalTwin"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Validation results from invalid twins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TwinValidationResultResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Twins/twinsandrelationships": {
      "delete": {
        "tags": [
          "Twins"
        ],
        "summary": "Delete twins and optionally relationships. Return a MultipleEntityResponse with the status of each twin and relationship deletion.\nThis API will forceably add a deletion record for the twin if it's not found in ADT, otherwise\n  it will depend on the event pipeline to eventually delete from ADX.",
        "operationId": "Twins_DeleteTwinsAndRelationships",
        "parameters": [
          {
            "name": "deleteRelationships",
            "in": "query",
            "description": "If true, delete all incoming and outgoing relationship linked to each twin before attempting to delete the twin",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "twinIds",
          "description": "List of Twin ids to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleEntityResponse"
                }
              }
            }
          },
          "207": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/Twins/delete": {
      "delete": {
        "tags": [
          "Twins"
        ],
        "summary": "Creates an async job to delete twins from the adt instance",
        "operationId": "Twins_BulkDeleteTwin",
        "parameters": [
          {
            "name": "User-Id",
            "x-originalName": "userId",
            "in": "header",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "locationId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "searchString",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "modelIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns the newly created async job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsEntry"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CapabilityStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "twinId": {
            "type": "string",
            "nullable": true
          },
          "trendId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "connectorId": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusType"
            }
          },
          "reportedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StatusType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Ok",
          "IsValueOutOfRange",
          "IsPeriodOutOfRange",
          "IsStuck",
          "IsOffline"
        ],
        "enum": [
          "Ok",
          "IsValueOutOfRange",
          "IsPeriodOutOfRange",
          "IsStuck",
          "IsOffline"
        ]
      },
      "RuleFileUploadResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fileUploaded": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "GetRulesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTemplate"
            }
          }
        }
      },
      "RuleTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "exactModelOnly": {
            "type": "boolean"
          },
          "templateId": {
            "type": "string",
            "nullable": true
          },
          "primaryModelId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "properties": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RuleTemplateProperty"
            }
          },
          "expressions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RuleTemplateExpression"
            }
          },
          "paths": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RuleTemplatePath"
            }
          }
        }
      },
      "RuleTemplateProperty": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "numericrange": "#/components/schemas/RuleTemplatePropertyNumericRange",
            "daterange": "#/components/schemas/RuleTemplatePropertyDateRange",
            "pattern": "#/components/schemas/RuleTemplatePropertyPattern",
            "numericallowedvalues": "#/components/schemas/RuleTemplatePropertyNumericAllowedValues",
            "stringallowedvalues": "#/components/schemas/RuleTemplatePropertyStringAllowedValues"
          }
        },
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RuleTemplatePropertyNumericRange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTemplateProperty"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "minValue": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "maxValue": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "unit": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleTemplatePropertyDateRange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTemplateProperty"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "minValue": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "maxValue": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleTemplatePropertyPattern": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTemplateProperty"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "pattern": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleTemplatePropertyNumericAllowedValues": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTemplateProperty"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedValues": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "unit": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RuleTemplatePropertyStringAllowedValues": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleTemplateProperty"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedValues": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "RuleTemplateExpression": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RuleTemplatePath": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "match": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ValidationResults": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "twinDtId": {
            "type": "string",
            "nullable": true
          },
          "twinIdentifiers": {
            "nullable": true
          },
          "modelId": {
            "type": "string",
            "nullable": true
          },
          "resultSource": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "resultType": {
            "$ref": "#/components/schemas/Result"
          },
          "checkType": {
            "$ref": "#/components/schemas/CheckType"
          },
          "resultInfo": {
            "nullable": true
          },
          "ruleScope": {
            "nullable": true
          },
          "ruleId": {
            "type": "string",
            "nullable": true
          },
          "runInfo": {
            "nullable": true
          },
          "twinInfo": {
            "nullable": true
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Result": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Ok",
          "Error"
        ],
        "enum": [
          "Ok",
          "Error"
        ]
      },
      "CheckType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "DataQualityRule",
          "Properties",
          "Relationships",
          "Telemetry"
        ],
        "enum": [
          "DataQualityRule",
          "Properties",
          "Relationships",
          "Telemetry"
        ]
      },
      "PageOfValidationResults": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResults"
            }
          },
          "continuationToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TwinsValidationJob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncJob"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "modelIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "exactModelMatch": {
                "type": "boolean",
                "nullable": true
              },
              "locationId": {
                "type": "string",
                "nullable": true
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "summaryDetails": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TwinValidationJobSummaryDetails"
                  }
                ]
              }
            }
          }
        ]
      },
      "TwinValidationJobSummaryDetails": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "processedEntities": {
            "type": "integer",
            "format": "int32"
          },
          "modelsQueried": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errorsByModel": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TwinValidationJobSummaryDetailErrors"
            }
          }
        }
      },
      "TwinValidationJobSummaryDetailErrors": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "numOK": {
            "type": "integer",
            "format": "int32"
          },
          "numPropertyOK": {
            "type": "integer",
            "format": "int32"
          },
          "numRelationshipOK": {
            "type": "integer",
            "format": "int32"
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "numPropertyErrors": {
            "type": "integer",
            "format": "int32"
          },
          "numRelationshipErrors": {
            "type": "integer",
            "format": "int32"
          },
          "numUnitErrors": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AsyncJob": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "jobId": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "$ref": "#/components/schemas/AsyncJobDetails"
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "userData": {
            "type": "string",
            "nullable": true
          },
          "target": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        }
      },
      "AsyncJobDetails": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AsyncJobStatus"
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AsyncJobStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Queued",
          "Processing",
          "Done",
          "Error",
          "Canceled",
          "Aborted",
          "CancelPending",
          "DeletePending"
        ],
        "enum": [
          "Queued",
          "Processing",
          "Done",
          "Error",
          "Canceled",
          "Aborted",
          "CancelPending",
          "DeletePending"
        ]
      },
      "EntityType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Twins",
          "Relationships",
          "Models",
          "Unknown"
        ],
        "enum": [
          "Twins",
          "Relationships",
          "Models",
          "Unknown"
        ]
      },
      "BasicDigitalTwin": {
        "type": "object",
        "description": "An optional, helper class for deserializing a digital twin.",
        "example": "Here's an example of  how to use the BasicDigitalTwin helper class to serialize and create a digital twin.\n            \n\n// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n            \nvar basicTwin = new BasicDigitalTwin\n{\n    Id = basicDtId,\n    // model Id of digital twin\n    Metadata =\n    {\n        ModelId = modelId,\n        PropertyMetadata = new Dictionary<string, DigitalTwinPropertyMetadata>\n        {\n            {\n                \"Prop2\",\n                new DigitalTwinPropertyMetadata\n                {\n                    // must always be serialized as ISO 8601\n                    SourceTime = DateTimeOffset.UtcNow,\n                }\n            }\n        },\n    },\n    Contents =\n    {\n        // digital twin properties\n        { \"Prop1\", \"Value1\" },\n        { \"Prop2\", 987 },\n        // component\n        {\n            \"Component1\",\n            new BasicDigitalTwinComponent\n            {\n                // writeable component metadata\n                Metadata =  new Dictionary<string, DigitalTwinPropertyMetadata>\n                {\n                    {\n                        \"ComponentProp2\",\n                        new DigitalTwinPropertyMetadata\n                        {\n                            // must always be serialized as ISO 8601\n                            SourceTime = DateTimeOffset.UtcNow,\n                        }\n                    }\n                },\n                // component properties\n                Contents =\n                {\n                    { \"ComponentProp1\", \"Component value 1\" },\n                    { \"ComponentProp2\", 123 },\n                },\n            }\n        },\n    },\n};\n            \nResponse<BasicDigitalTwin> createDigitalTwinResponse = await client.CreateOrReplaceDigitalTwinAsync(basicDtId, basicTwin);\nConsole.WriteLine($\"Created digital twin '{createDigitalTwinResponse.Value.Id}'.\");\n\n            \nHere's an example of  how to use the BasicDigitalTwin helper class to get and deserialize a digital twin.\n            \n\nResponse<BasicDigitalTwin> getBasicDtResponse = await client.GetDigitalTwinAsync<BasicDigitalTwin>(basicDtId);\nBasicDigitalTwin basicDt = getBasicDtResponse.Value;\n            \n// Must cast Component1 as a JsonElement and get its raw text in order to deserialize it as a dictionary\nstring component1RawText = ((JsonElement)basicDt.Contents[\"Component1\"]).GetRawText();\nvar component1 = JsonSerializer.Deserialize<BasicDigitalTwinComponent>(component1RawText);\n            \nConsole.WriteLine($\"Retrieved and deserialized digital twin {basicDt.Id}:\\n\\t\" +\n    $\"ETag: {basicDt.ETag}\\n\\t\" +\n    $\"ModelId: {basicDt.Metadata.ModelId}\\n\\t\" +\n    $\"LastUpdatedOn: {basicDt.LastUpdatedOn}\\n\\t\" +\n    $\"Prop1: {basicDt.Contents[\"Prop1\"]}, last updated on {basicDt.Metadata.PropertyMetadata[\"Prop1\"].LastUpdatedOn}\\n\\t\" +\n    $\"Prop2: {basicDt.Contents[\"Prop2\"]}, last updated on {basicDt.Metadata.PropertyMetadata[\"Prop2\"].LastUpdatedOn} and sourced at {basicDt.Metadata.PropertyMetadata[\"Prop2\"].SourceTime}\\n\\t\" +\n    $\"Component1.LastUpdatedOn: {component1.LastUpdatedOn}\\n\\t\" +\n    $\"Component1.Prop1: {component1.Contents[\"ComponentProp1\"]}, last updated on: {component1.Metadata[\"ComponentProp1\"].LastUpdatedOn}\\n\\t\" +\n    $\"Component1.Prop2: {component1.Contents[\"ComponentProp2\"]}, last updated on: {component1.Metadata[\"ComponentProp2\"].LastUpdatedOn} and sourced at: {component1.Metadata[\"ComponentProp2\"].SourceTime}\");",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "$dtId": {
            "type": "string",
            "description": "The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.",
            "nullable": true
          },
          "$etag": {
            "description": "A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ETag"
              }
            ]
          },
          "$lastUpdateTime": {
            "type": "string",
            "description": "The date and time the twin was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "$metadata": {
            "description": "Information about the model a digital twin conforms to.\nThis field is present on every digital twin.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DigitalTwinMetadata"
              }
            ]
          }
        }
      },
      "ETag": {
        "type": "object",
        "description": "Represents an HTTP ETag.",
        "additionalProperties": false
      },
      "DigitalTwinMetadata": {
        "type": "object",
        "description": "An optional, helper class for deserializing a digital twin.\nThe $metadata class on a BasicDigitalTwin.",
        "additionalProperties": false,
        "properties": {
          "$model": {
            "type": "string",
            "description": "The Id of the model that the digital twin is modeled by.",
            "nullable": true
          },
          "propertyMetadata": {
            "type": "object",
            "description": "This field will contain metadata about changes on properties on the digital twin.\nThe key will be the property name, and the value is the metadata.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/DigitalTwinPropertyMetadata"
            }
          }
        }
      },
      "DigitalTwinPropertyMetadata": {
        "type": "object",
        "description": "Contain metadata about changes on properties on a digital twin or component.",
        "additionalProperties": false,
        "properties": {
          "lastUpdateTime": {
            "type": "string",
            "description": "The date and time the property was last updated.",
            "format": "date-time"
          },
          "sourceTime": {
            "type": "string",
            "description": "The date and time the value of the property was sourced.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "BasicRelationship": {
        "type": "object",
        "description": "Although relationships have a user-defined schema, these properties should exist on every instance. This is\nuseful to use as a base class to ensure your custom relationships have the necessary properties.",
        "example": "Here's an example of how to use the BasicRelationship helper class to serialize and create a relationship from a building digital twin to a floor digital twin.\n            \n\nvar buildingFloorRelationshipPayload = new BasicRelationship\n{\n    Id = \"buildingFloorRelationshipId\",\n    SourceId = \"buildingTwinId\",\n    TargetId = \"floorTwinId\",\n    Name = \"contains\",\n    Properties =\n    {\n        { \"Prop1\", \"Prop1 value\" },\n        { \"Prop2\", 6 }\n    }\n};\n            \nResponse<BasicRelationship> createBuildingFloorRelationshipResponse = await client\n    .CreateOrReplaceRelationshipAsync<BasicRelationship>(\"buildingTwinId\", \"buildingFloorRelationshipId\", buildingFloorRelationshipPayload);\nConsole.WriteLine($\"Created a digital twin relationship '{createBuildingFloorRelationshipResponse.Value.Id}' \" +\n    $\"from twin '{createBuildingFloorRelationshipResponse.Value.SourceId}' to twin '{createBuildingFloorRelationshipResponse.Value.TargetId}'.\");\n\n            \nHere's an example of how to use the BasicRelationship helper class to get and deserialize a relationship.\n            \n\nResponse<BasicRelationship> getBasicRelationshipResponse = await client.GetRelationshipAsync<BasicRelationship>(\n    \"buildingTwinId\",\n    \"buildingFloorRelationshipId\");\nif (getBasicRelationshipResponse.GetRawResponse().Status == (int)HttpStatusCode.OK)\n{\n    BasicRelationship basicRelationship = getBasicRelationshipResponse.Value;\n    Console.WriteLine($\"Retrieved relationship '{basicRelationship.Id}' from twin {basicRelationship.SourceId}.\\n\\t\" +\n        $\"Prop1: {basicRelationship.Properties[\"Prop1\"]}\\n\\t\" +\n        $\"Prop2: {basicRelationship.Properties[\"Prop2\"]}\");\n}",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "$relationshipId": {
            "type": "string",
            "description": "The unique Id of the relationship. This field is present on every relationship.",
            "nullable": true
          },
          "$targetId": {
            "type": "string",
            "description": "The unique Id of the target digital twin. This field is present on every relationship.",
            "nullable": true
          },
          "$sourceId": {
            "type": "string",
            "description": "The unique Id of the source digital twin. This field is present on every relationship.",
            "nullable": true
          },
          "$relationshipName": {
            "type": "string",
            "description": "The name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.",
            "nullable": true
          },
          "$etag": {
            "description": "A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ETag"
              }
            ]
          }
        }
      },
      "BlobUploadInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sasToken": {
            "type": "string"
          },
          "containerName": {
            "type": "string"
          },
          "blobPaths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateDocumentTwinRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fileName": {
            "type": "string"
          },
          "userEmail": {
            "type": "string"
          },
          "uniqueId": {
            "type": "string"
          },
          "siteId": {
            "type": "string",
            "nullable": true
          },
          "blobPath": {
            "type": "string"
          }
        }
      },
      "AppVersion": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "adtApiVersion": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TwinGraph": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwinNode"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwinRelationship"
            }
          }
        }
      },
      "TwinNode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "twinId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "modelId": {
            "type": "string"
          },
          "phenomenon": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "groupKey": {
            "type": "string"
          },
          "groupKey2": {
            "type": "string"
          },
          "collapseKey": {
            "type": "string"
          }
        }
      },
      "TwinRelationship": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "startId": {
            "type": "integer",
            "format": "int32"
          },
          "endId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "startTwinId": {
            "type": "string"
          },
          "endTwinId": {
            "type": "string"
          }
        }
      },
      "JobsEntry": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "status"
        ],
        "properties": {
          "jobId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "parentJobId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "jobType": {
            "type": "string",
            "maxLength": 32
          },
          "userId": {
            "type": "string",
            "maxLength": 256
          },
          "status": {
            "$ref": "#/components/schemas/AsyncJobStatus"
          },
          "progressCurrentCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "progressTotalCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "userMessage": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "progressStatusMessage": {
            "type": "string",
            "nullable": true
          },
          "sourceResourceUri": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "targetResourceUri": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "isExternal": {
            "type": "boolean"
          },
          "jobSubtype": {
            "type": "string",
            "maxLength": 32,
            "nullable": true
          },
          "timeCreated": {
            "type": "string",
            "format": "date-time"
          },
          "timeLastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "processingStartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processingEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "jobsEntryDetail": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JobsEntryDetail"
              }
            ]
          }
        }
      },
      "JobsEntryDetail": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "jobId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "outputsJson": {
            "type": "string",
            "nullable": true
          },
          "errorsJson": {
            "type": "string",
            "nullable": true
          },
          "inputsJson": {
            "type": "string",
            "nullable": true
          },
          "customData": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BulkImportTwinsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "twins"
        ],
        "properties": {
          "twins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicDigitalTwin"
            }
          },
          "relationships": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BasicRelationship"
            }
          },
          "twinRelationshipsOverride": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "JsonDocument": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isDisposable": {
            "type": "boolean"
          },
          "rootElement": {}
        }
      },
      "BulkDeleteTwinsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "deleteAll": {
            "type": "boolean"
          },
          "twinIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modelIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locationId": {
            "type": "string"
          },
          "searchString": {
            "type": "string"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BulkDeleteModelsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "deleteAll": {
            "type": "boolean"
          },
          "modelIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeDependencies": {
            "type": "boolean"
          }
        }
      },
      "BulkDeleteRelationshipsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "deleteAll": {
            "type": "boolean"
          },
          "twinIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "relationshipIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of jobs based on search criteria\n            ",
            "format": "int32"
          },
          "jobs": {
            "type": "array",
            "description": "List of jobs based on search criteria",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JobsEntry"
            }
          }
        }
      },
      "JobSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "jobTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobSubType": {
            "type": "string",
            "nullable": true
          },
          "jobStatuses": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AsyncJobStatus"
            }
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "BatchRequestDto": {
        "type": "object",
        "description": "A batch request.",
        "additionalProperties": false,
        "properties": {
          "sortSpecifications": {
            "type": "array",
            "description": "Gets the specifications on how to sort the batch.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortSpecificationDto"
            }
          },
          "filterSpecifications": {
            "type": "array",
            "description": "Gets or sets the specification on how to filter the batch.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FilterSpecificationDto"
            }
          },
          "page": {
            "type": "integer",
            "description": "Gets the page number to return for the batch (one-based).",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets the amount of items in the batch.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SortSpecificationDto": {
        "type": "object",
        "description": "Sort specification.",
        "additionalProperties": false,
        "required": [
          "field"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Gets or sets the field name.",
            "minLength": 1
          },
          "sort": {
            "type": "string",
            "description": "Gets or sets the sort order.",
            "nullable": true
          },
          "isSortDescending": {
            "type": "boolean",
            "description": "Gets a value indicating whether the sorting is in descending order."
          }
        }
      },
      "FilterSpecificationDto": {
        "type": "object",
        "description": "Filter specification component used by MUI grid.",
        "additionalProperties": false,
        "required": [
          "field",
          "operator"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Gets or sets the field name.",
            "minLength": 1
          },
          "operator": {
            "type": "string",
            "description": "Gets or sets the operator.",
            "minLength": 1
          },
          "value": {
            "description": "Gets or sets the value for the filter.",
            "nullable": true
          },
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "bracketName": {
            "type": "string",
            "nullable": true
          },
          "hasBracket": {
            "type": "boolean"
          }
        }
      },
      "MappedEntryResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total Count",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MappedEntry"
            }
          }
        }
      },
      "MappedEntry": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mappedId": {
            "type": "string",
            "maxLength": 48
          },
          "willowId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "mappedModelId": {
            "type": "string",
            "maxLength": 128
          },
          "willowModelId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "parentMappedId": {
            "type": "string",
            "maxLength": 48,
            "nullable": true
          },
          "parentWillowId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "willowParentRel": {
            "type": "string",
            "maxLength": 32,
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "modelInformation": {
            "type": "string",
            "nullable": true
          },
          "statusNotes": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "auditInformation": {
            "type": "string",
            "nullable": true
          },
          "timeCreated": {
            "type": "string",
            "format": "date-time"
          },
          "timeLastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "connectorId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "buildingId": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "isExistingTwin": {
            "type": "boolean"
          },
          "unit": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "maxLength": 256,
            "nullable": true
          }
        }
      },
      "Status": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Approved",
          "Ignore",
          "Created"
        ],
        "enum": [
          "Pending",
          "Approved",
          "Ignore",
          "Created"
        ]
      },
      "MappedEntryRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "prefixToMatchId": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "excludePrefixes": {
            "type": "boolean",
            "nullable": true
          },
          "filterSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterSpecificationDto"
            }
          }
        }
      },
      "MappedEntriesGroupCount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateMappedEntry": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mappedId": {
            "type": "string"
          },
          "mappedModelId": {
            "type": "string"
          },
          "willowModelId": {
            "type": "string",
            "nullable": true
          },
          "parentMappedId": {
            "type": "string",
            "nullable": true
          },
          "parentWillowId": {
            "type": "string",
            "nullable": true
          },
          "willowParentRel": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "modelInformation": {
            "type": "string",
            "nullable": true
          },
          "statusNotes": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "auditInformation": {
            "type": "string",
            "nullable": true
          },
          "connectorId": {
            "type": "string",
            "nullable": true
          },
          "buildingId": {
            "type": "string",
            "nullable": true
          },
          "willowId": {
            "type": "string",
            "nullable": true
          },
          "isExistingTwin": {
            "type": "boolean"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateMappedEntry": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mappedId": {
            "type": "string"
          },
          "mappedModelId": {
            "type": "string"
          },
          "willowModelId": {
            "type": "string",
            "nullable": true
          },
          "parentMappedId": {
            "type": "string",
            "nullable": true
          },
          "parentWillowId": {
            "type": "string",
            "nullable": true
          },
          "willowParentRel": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "modelInformation": {
            "type": "string",
            "nullable": true
          },
          "statusNotes": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "auditInformation": {
            "type": "string",
            "nullable": true
          },
          "connectorId": {
            "type": "string",
            "nullable": true
          },
          "buildingId": {
            "type": "string",
            "nullable": true
          },
          "willowId": {
            "type": "string",
            "nullable": true
          },
          "isExistingTwin": {
            "type": "boolean"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateMappedEntryStatusRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mappedIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "MappedEntryAllRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "prefixToMatchId": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "excludePrefixes": {
            "type": "boolean",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          },
          "buildingIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "connectorId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateMappedTwinRequestResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "willowTwinId": {
            "type": "string"
          },
          "changedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            }
          },
          "timeCreated": {
            "type": "string",
            "format": "date-time"
          },
          "timeLastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "JsonPatchOperation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "op": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "nullable": true
          }
        }
      },
      "OperationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test"
        ],
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test"
        ]
      },
      "UpdateMappedTwinRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "willowTwinId": {
            "type": "string",
            "maxLength": 256
          },
          "changedProperties": {
            "type": "string"
          },
          "timeCreated": {
            "type": "string",
            "format": "date-time"
          },
          "timeLastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MtiAsyncJob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncJob"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "jobType": {
                "$ref": "#/components/schemas/MtiAsyncJobType"
              },
              "buildingId": {
                "type": "string",
                "nullable": true
              },
              "connectorId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "MtiAsyncJobType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SyncOrganization",
          "SyncSpatial",
          "SyncConnectors",
          "SyncAssets",
          "SyncCapabilities",
          "PushToMapped",
          "Ingest"
        ],
        "enum": [
          "SyncOrganization",
          "SyncSpatial",
          "SyncConnectors",
          "SyncAssets",
          "SyncCapabilities",
          "PushToMapped",
          "Ingest"
        ]
      },
      "MtiAsyncJobRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "jobType": {
            "$ref": "#/components/schemas/MtiAsyncJobType"
          },
          "buildingId": {
            "type": "string",
            "nullable": true
          },
          "connectorId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ModelResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "decommissioned": {
            "type": "boolean"
          },
          "twinCount": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModelStatsResponse"
              }
            ]
          },
          "model": {
            "type": "string"
          },
          "uploadTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ModelStatsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "exact": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SourceType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Adx",
          "AdtQuery",
          "AdtMemory",
          "Acs"
        ],
        "enum": [
          "Adx",
          "AdtQuery",
          "AdtMemory",
          "Acs"
        ]
      },
      "UpgradeModelsRepoRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "owner",
          "repository",
          "path"
        ],
        "properties": {
          "owner": {
            "type": "string",
            "minLength": 1
          },
          "repository": {
            "type": "string",
            "minLength": 1
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string",
            "minLength": 1
          },
          "submodules": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PageOfTwinWithRelationships": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwinWithRelationships"
            }
          },
          "continuationToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TwinWithRelationships": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "twin": {
            "$ref": "#/components/schemas/BasicDigitalTwin"
          },
          "incomingRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicRelationship"
            }
          },
          "outgoingRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicRelationship"
            }
          },
          "twinData": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "QueryTwinsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1
          },
          "includeRelationships": {
            "type": "boolean"
          },
          "includeIncomingRelationships": {
            "type": "boolean"
          },
          "idsOnly": {
            "type": "boolean"
          }
        }
      },
      "PageOfJsonDocument": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonDocument"
            }
          },
          "continuationToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchResultOfUnifiedItemDto": {
        "type": "object",
        "description": "A search document with a score.",
        "additionalProperties": false,
        "properties": {
          "score": {
            "type": "number",
            "description": "Gets or sets the score from Azure Cognitive Search.",
            "format": "double"
          },
          "document": {
            "description": "Gets or sets the document.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UnifiedItemDto"
              }
            ]
          }
        }
      },
      "UnifiedItemDto": {
        "type": "object",
        "description": "The twin document we store in Azure Cognitive search and retrieve in response to search queries.",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Gets or sets the key of the entity used by search."
          },
          "id": {
            "type": "string",
            "description": "Gets or sets primary Id used for the link to the actual page."
          },
          "ids": {
            "description": "Gets or sets ids of the entity for search, these are searched as a whole (keyword).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Ids"
              }
            ]
          },
          "siteId": {
            "type": "string",
            "description": "Gets or sets legacy siteId required by Command."
          },
          "externalId": {
            "type": "string",
            "description": "Gets or sets externalId - refers to the search item in some external system, e.g. timeseries, CMS, ..."
          },
          "modelIds": {
            "description": "Gets or sets the model ids of the entity, Room, Floor, ... all ancestors.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModelIds"
              }
            ]
          },
          "modelNames": {
            "description": "Gets or sets the model names of the entity, Room, Floor, ... all ancestors.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModelNames"
              }
            ]
          },
          "primaryModelId": {
            "type": "string",
            "description": "Gets or sets primary model Id for Type=twin, or empty if this is not a twin related search document."
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the type of the entity."
          },
          "tags": {
            "description": "Gets or sets tags for the entity.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Tags"
              }
            ]
          },
          "category": {
            "type": "string",
            "description": "Gets or sets the category of the entity."
          },
          "importance": {
            "type": "integer",
            "description": "Gets or sets importance to boost ranking in search results.",
            "format": "int32"
          },
          "names": {
            "description": "Gets or sets any names used for searching.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Names"
              }
            ]
          },
          "secondaryNames": {
            "description": "Gets or sets any secondary names or descriptions (lower priority).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Names"
              }
            ]
          },
          "location": {
            "description": "Gets or sets ancestors by spatial hierarchy.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocationAncestorIds"
              }
            ]
          },
          "locationNames": {
            "description": "Gets or sets ancestor names by spatial hierarchy.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocationNames"
              }
            ]
          },
          "fedBy": {
            "description": "Gets or sets ancestors that feed this twin/insight/...",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FedByAncestorIds"
              }
            ]
          },
          "feeds": {
            "description": "Gets or sets ancestors that are fed by this twin/insight/...",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeedsAncestorIds"
              }
            ]
          },
          "tenant": {
            "description": "Gets or sets ancestors that are tenant related.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TenantAncestorIds"
              }
            ]
          },
          "earliest": {
            "type": "string",
            "description": "Gets or sets some kind of datetime for filtering based on a start date,\ne.g. an Insight's earliest occurrence.",
            "format": "date-time",
            "nullable": true
          },
          "latest": {
            "type": "string",
            "description": "Gets or sets some kind of datetime for filtering based on an end date,\ne.g. an Insight's last occurrence, or a twin last updated date.",
            "format": "date-time",
            "nullable": true
          },
          "indexedDate": {
            "type": "string",
            "description": "Gets or sets the date and time the document was indexed.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "Ids": {
        "type": "array",
        "description": "The ids of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "ModelIds": {
        "type": "array",
        "description": "The modelids of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "ModelNames": {
        "type": "array",
        "description": "The names of models typically used for twin documents.",
        "items": {
          "type": "string"
        }
      },
      "Tags": {
        "type": "array",
        "description": "Any other tags for the entity.",
        "items": {
          "type": "string"
        }
      },
      "Names": {
        "type": "array",
        "description": "The names or descriptions of the entity.",
        "items": {
          "type": "string"
        }
      },
      "LocationAncestorIds": {
        "type": "array",
        "description": "The location ancestors of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "LocationNames": {
        "type": "array",
        "description": "The names of location ancestors.",
        "items": {
          "type": "string"
        }
      },
      "FedByAncestorIds": {
        "type": "array",
        "description": "The fedby ancestors of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "FeedsAncestorIds": {
        "type": "array",
        "description": "The location ancestors of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "TenantAncestorIds": {
        "type": "array",
        "description": "The tenant ancestors of the entity, these are searched as a whole (keyword).",
        "items": {
          "type": "string"
        }
      },
      "SearchOptions": {
        "type": "object",
        "description": "Parameters for filtering, sorting, faceting, paging, and other search query behaviors. ",
        "additionalProperties": false,
        "properties": {
          "highlightPostTag": {
            "type": "string",
            "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is </em>. ",
            "nullable": true
          },
          "highlightPreTag": {
            "type": "string",
            "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is <em>. ",
            "nullable": true
          },
          "minimumCoverage": {
            "type": "number",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. ",
            "format": "double",
            "nullable": true
          },
          "queryType": {
            "description": "A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SearchQueryType"
              }
            ]
          },
          "scoringStatistics": {
            "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScoringStatistics"
              }
            ]
          },
          "sessionId": {
            "type": "string",
            "description": "A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. ",
            "nullable": true
          },
          "scoringProfile": {
            "type": "string",
            "description": "The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. ",
            "nullable": true
          },
          "searchMode": {
            "description": "A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SearchMode"
              }
            ]
          },
          "skip": {
            "type": "integer",
            "description": "The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead. ",
            "format": "int32",
            "nullable": true
          },
          "searchText": {
            "type": "string",
            "description": "A full-text search query expression;  Use \"*\" or omit this\nparameter to match all documents.",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "description": "The OData $filter expression to apply to the search query.  You can\nuse Create to help\nconstruct the filter expression.",
            "nullable": true
          },
          "highlightFields": {
            "type": "array",
            "description": "The list of field names to use for hit highlights.  Only searchable\nfields can be used for hit highlighting.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "highlightFieldsRaw": {
            "type": "string",
            "description": "Join HighlightFields so it can be sent as a comma separated string.",
            "nullable": true
          },
          "searchFields": {
            "type": "array",
            "description": "The list of field names to which to scope the full-text search.\nWhen using fielded search (fieldName:searchExpression) in a full\nLucene query, the field names of each fielded search expression\ntake precedence over any field names listed in this parameter.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "searchFieldsRaw": {
            "type": "string",
            "description": "Join SearchFields so it can be sent as a comma separated string.",
            "nullable": true
          },
          "select": {
            "type": "array",
            "description": "The list of fields to retrieve.  If unspecified, all fields marked\nas retrievable in the schema are included.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "selectRaw": {
            "type": "string",
            "description": "Join Select so it can be sent as a comma separated string.",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "description": "The number of search results to retrieve. This can be used in\nconjunction with Skip to implement client-side\npaging of search results.  If results are truncated due to\nserver-side paging, the response will include a continuation token\nthat can be used to issue another Search request for the next page\nof results.",
            "format": "int32",
            "nullable": true
          },
          "orderBy": {
            "type": "array",
            "description": "The list of OData $orderby expressions by which to sort the\nresults. Each expression can be either a field name or a call to\neither the geo.distance() or the search.score() functions. Each\nexpression can be followed by asc to indicate ascending, or desc to\nindicate descending. The default is ascending order. Ties will be\nbroken by the match scores of documents. If no $orderby is\nspecified, the default sort order is descending by document match\nscore. There can be at most 32 $orderby clauses.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "orderByRaw": {
            "type": "string",
            "description": "Join OrderBy so it can be sent as a comma separated string.",
            "nullable": true
          },
          "includeTotalCount": {
            "type": "boolean",
            "description": "A value that specifies whether to fetch the total count of results\nas the TotalCount property.\nThe default value is false.  Setting this value to true may have a\nperformance impact.  Note that the count returned is an\napproximation.",
            "nullable": true
          },
          "facets": {
            "type": "array",
            "description": "The list of facet expressions to apply to the search query. Each\nfacet expression contains a field name, optionally followed by a\ncomma-separated list of name:value pairs.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "scoringParameters": {
            "type": "array",
            "description": "The list of parameter values to be used in scoring functions (for\nexample, referencePointParameter) using the format name-values. For\nexample, if the scoring profile defines a function with a parameter\ncalled 'mylocation' the parameter string would be\n\"mylocation--122.2,44.8\" (without the quotes).",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "semanticSearch": {
            "description": "Options for performing Semantic Search. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SemanticSearchOptions"
              }
            ]
          },
          "vectorSearch": {
            "description": "Options for performing Vector Search. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorSearchOptions"
              }
            ]
          }
        }
      },
      "SearchQueryType": {
        "type": "string",
        "description": "Specifies the syntax of the search query.  The default is \"simple\".\nUse \"full\" if your query uses the Lucene query syntax.",
        "x-enumNames": [
          "Simple",
          "Full",
          "Semantic"
        ],
        "enum": [
          "Simple",
          "Full",
          "Semantic"
        ]
      },
      "ScoringStatistics": {
        "type": "string",
        "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. ",
        "x-enumNames": [
          "Local",
          "Global"
        ],
        "enum": [
          "Local",
          "Global"
        ]
      },
      "SearchMode": {
        "type": "string",
        "description": "Specifies whether any or all of the search terms must be matched in order to count the document as a match.",
        "x-enumNames": [
          "Any",
          "All"
        ],
        "enum": [
          "Any",
          "All"
        ]
      },
      "SemanticSearchOptions": {
        "type": "object",
        "description": "Options for performing Semantic Search.",
        "additionalProperties": false,
        "properties": {
          "semanticConfigurationName": {
            "type": "string",
            "description": "The name of a semantic configuration that will be used when processing documents for queries of type semantic. ",
            "nullable": true
          },
          "queryAnswer": {
            "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest\nranked documents.The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-(number of answers)'\noption after the answers parameter value, such as 'extractive|count-3'. Default count is 1. The confidence threshold can be configured by appending\nthe pipe character '|' followed by the 'threshold-(confidence threshold)' option after the answers parameter value, such as 'extractive|threshold-0.9'.\nDefault threshold is 0.7.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryAnswer"
              }
            ]
          },
          "queryCaption": {
            "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest\nranked documents. When Captions is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe\ncharacter '|' followed by the 'highlight-(true/false)' option, such as 'extractive|highlight-true'. Defaults to 'None'.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryCaption"
              }
            ]
          },
          "semanticQuery": {
            "type": "string",
            "description": "Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase. ",
            "nullable": true
          },
          "errorMode": {
            "description": "Allows the user to choose whether a semantic call should fail completely (default / current behavior), or to return partial results. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SemanticErrorMode"
              }
            ]
          },
          "maxWait": {
            "type": "string",
            "description": "Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails. ",
            "format": "duration",
            "nullable": true
          }
        }
      },
      "QueryAnswer": {
        "type": "object",
        "description": "Configuration for how semantic search returns answers to the search.",
        "additionalProperties": false,
        "properties": {
          "answerType": {
            "description": "A value that specifies whether Answers should be returned as part of the search response. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryAnswerType"
              }
            ]
          },
          "count": {
            "type": "integer",
            "description": "A value that specifies the number of Answers that should be returned as part of the search response and will default to 1. ",
            "format": "int32",
            "nullable": true
          },
          "threshold": {
            "type": "number",
            "description": "A value that specifies the threshold of Answers that should be returned as part of the search response. The threshold is optional and will default to 0.7.\n           ",
            "format": "double",
            "nullable": true
          },
          "queryAnswerRaw": {
            "type": "string",
            "description": "Constructed from AnswerType, Count and Threshold. For example: \"extractive|count-1,threshold-0.7\"",
            "nullable": true
          }
        }
      },
      "QueryAnswerType": {
        "type": "object",
        "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7. ",
        "additionalProperties": false,
        "properties": {
          "none": {
            "description": "Do not return answers for the query. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryAnswerType"
              }
            ]
          },
          "extractive": {
            "description": "Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryAnswerType"
              }
            ]
          }
        }
      },
      "QueryCaption": {
        "type": "object",
        "description": "Configuration for how semantic search captions search results.",
        "additionalProperties": false,
        "properties": {
          "captionType": {
            "description": "A value that specifies whether Captions should be returned as part of the search response.\nThe default value is .",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryCaptionType"
              }
            ]
          },
          "highlightEnabled": {
            "type": "boolean",
            "description": "If CaptionType is set to Extractive, setting this to true enables highlighting of the returned captions.\nIt populates Highlights.\nThe default value is true."
          },
          "queryCaptionRaw": {
            "type": "string",
            "description": "Constructed from CaptionType and HighlightEnabled.",
            "nullable": true
          }
        }
      },
      "QueryCaptionType": {
        "type": "object",
        "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`. ",
        "additionalProperties": false,
        "properties": {
          "none": {
            "description": "Do not return captions for the query. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryCaptionType"
              }
            ]
          },
          "extractive": {
            "description": "Extracts captions from the matching documents that contain passages relevant to the search query. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/QueryCaptionType"
              }
            ]
          }
        }
      },
      "SemanticErrorMode": {
        "type": "object",
        "description": "Allows the user to choose whether a semantic call should fail completely, or to return partial results. ",
        "additionalProperties": false,
        "properties": {
          "partial": {
            "description": "If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SemanticErrorMode"
              }
            ]
          },
          "fail": {
            "description": "If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SemanticErrorMode"
              }
            ]
          }
        }
      },
      "VectorSearchOptions": {
        "type": "object",
        "description": "Options for performing Vector Search.",
        "additionalProperties": false,
        "properties": {
          "queries": {
            "type": "array",
            "description": "The query parameters for multi-vector search queries. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VectorQuery"
            }
          },
          "filterMode": {
            "description": "Determines whether or not filters are applied before or after the vector search is performed. Default is PreFilter for new indexes. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorFilterMode"
              }
            ]
          }
        }
      },
      "VectorQuery": {
        "type": "object",
        "description": "The query parameters for vector and hybrid search queries.\nPlease note VectorQuery is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.\nThe available derived classes include VectorizableTextQuery and VectorizedQuery.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "kind": {
            "description": "The kind of vector query being performed. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorQueryKind"
              }
            ]
          },
          "kNearestNeighborsCount": {
            "type": "integer",
            "description": "Number of nearest neighbors to return as top hits. ",
            "format": "int32",
            "nullable": true
          },
          "exhaustive": {
            "type": "boolean",
            "description": "When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values. ",
            "nullable": true
          },
          "oversampling": {
            "type": "number",
            "description": "Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition. It can be set only when 'rerankWithOriginalVectors' is true. This parameter is only permitted when a compression method is used on the underlying vector field. ",
            "format": "double",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "Relative weight of the vector query when compared to other vector query and/or the text query within the same search request. This value is used when combining the results of multiple ranking lists produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the higher the documents that matched that query will be in the final ranking. Default is 1.0 and the value needs to be a positive number larger than zero. ",
            "format": "float",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "description": "Vector Fields of type Collection(Edm.Single) to be included in the vector searched. ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fieldsRaw": {
            "type": "string",
            "description": "Join Fields so it can be sent as a comma separated string.",
            "nullable": true
          }
        }
      },
      "VectorQueryKind": {
        "type": "object",
        "description": "The kind of vector query being performed. ",
        "additionalProperties": false,
        "properties": {
          "vector": {
            "description": "Vector query where a raw vector value is provided. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorQueryKind"
              }
            ]
          },
          "text": {
            "description": "Vector query where a text value that needs to be vectorized is provided. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorQueryKind"
              }
            ]
          }
        }
      },
      "VectorFilterMode": {
        "type": "object",
        "description": "Determines whether or not filters are applied before or after the vector search is performed. ",
        "additionalProperties": false,
        "properties": {
          "postFilter": {
            "description": "The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorFilterMode"
              }
            ]
          },
          "preFilter": {
            "description": "The filter will be applied before the search query. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorFilterMode"
              }
            ]
          }
        }
      },
      "DocumentSearchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentSearchResult"
            }
          }
        }
      },
      "DocumentSearchResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "score": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string"
          },
          "chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoredDocumentChunk"
            }
          },
          "title": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ScoredDocumentChunk": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "chunk": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DocumentSearchMode": {
        "type": "string",
        "description": "Document Search Mode",
        "x-enumNames": [
          "Keyword",
          "Vector",
          "Hybrid"
        ],
        "enum": [
          "Keyword",
          "Vector",
          "Hybrid"
        ]
      },
      "ImportTimeSeriesHistoricalRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fileNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ImportTimeSeriesHistoricalFromBlobRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sasUri": {
            "type": "string"
          }
        }
      },
      "TimeSeriesImportJob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncJob"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "entitiesError": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "requestPath": {
                "type": "string"
              },
              "processedEntities": {
                "type": "integer",
                "format": "int32"
              },
              "totalEntities": {
                "type": "integer",
                "format": "int32"
              },
              "isSasUrlImport": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GetTwinsInfoRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "modelId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "exactModelMatch": {
            "type": "boolean"
          },
          "includeRelationships": {
            "type": "boolean"
          },
          "includeIncomingRelationships": {
            "type": "boolean"
          },
          "orphanOnly": {
            "type": "boolean"
          },
          "sourceType": {
            "$ref": "#/components/schemas/SourceType"
          },
          "relationshipsToTraverse": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "searchString": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queryFilter": {
            "$ref": "#/components/schemas/QueryFilter"
          }
        }
      },
      "QueryFilter": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QueryFilterType"
          },
          "filter": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "QueryFilterType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Direct"
        ],
        "enum": [
          "Direct"
        ]
      },
      "NestedTwin": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "twin": {
            "$ref": "#/components/schemas/BasicDigitalTwin"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedTwin"
            }
          }
        }
      },
      "Operation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "value": {
                "nullable": true
              }
            }
          }
        ]
      },
      "OperationBase": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType2"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OperationType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ]
      },
      "TwinValidationResultResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "twinId": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationRuleResult"
            }
          }
        }
      },
      "ValidationRuleResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ruleId": {
            "type": "string",
            "nullable": true
          },
          "propertyErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PropertyValidationResultType"
              }
            }
          }
        }
      },
      "PropertyValidationResultType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "RequiredPropertyMissing",
          "InvalidFormat",
          "InvalidValue",
          "InvalidRange",
          "RequiredUnitMissing",
          "InvalidValueAfterUnitConversion",
          "UnitConversionError",
          "ModelMissingAnnotatedUnitProperty"
        ],
        "enum": [
          "RequiredPropertyMissing",
          "InvalidFormat",
          "InvalidValue",
          "InvalidRange",
          "RequiredUnitMissing",
          "InvalidValueAfterUnitConversion",
          "UnitConversionError",
          "ModelMissingAnnotatedUnitProperty"
        ]
      },
      "MultipleEntityResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityResponse"
            }
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          }
        }
      },
      "EntityResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "entityId": {
            "type": "string",
            "nullable": true
          },
          "operation": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "subEntityId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HttpStatusCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Continue",
          "SwitchingProtocols",
          "Processing",
          "EarlyHints",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultiStatus",
          "AlreadyReported",
          "IMUsed",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "PermanentRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "MisdirectedRequest",
          "UnprocessableEntity",
          "UnprocessableContent",
          "Locked",
          "FailedDependency",
          "UpgradeRequired",
          "PreconditionRequired",
          "TooManyRequests",
          "RequestHeaderFieldsTooLarge",
          "UnavailableForLegalReasons",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported",
          "VariantAlsoNegotiates",
          "InsufficientStorage",
          "LoopDetected",
          "NotExtended",
          "NetworkAuthenticationRequired"
        ],
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "Processing",
          "EarlyHints",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultiStatus",
          "AlreadyReported",
          "IMUsed",
          "MultipleChoices",
          "MultipleChoices",
          "MovedPermanently",
          "MovedPermanently",
          "Found",
          "Found",
          "SeeOther",
          "SeeOther",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "TemporaryRedirect",
          "PermanentRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "MisdirectedRequest",
          "UnprocessableEntity",
          "UnprocessableEntity",
          "Locked",
          "FailedDependency",
          "UpgradeRequired",
          "PreconditionRequired",
          "TooManyRequests",
          "RequestHeaderFieldsTooLarge",
          "UnavailableForLegalReasons",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported",
          "VariantAlsoNegotiates",
          "InsufficientStorage",
          "LoopDetected",
          "NotExtended",
          "NetworkAuthenticationRequired"
        ]
      }
    }
  }
}