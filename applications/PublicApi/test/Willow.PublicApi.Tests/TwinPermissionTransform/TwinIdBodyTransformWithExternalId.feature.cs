// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.PublicApi.Tests.TwinPermissionTransform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TwinIDAndExternalIDBodyTransformFeature : object, Xunit.IClassFixture<TwinIDAndExternalIDBodyTransformFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TwinIdBodyTransformWithExternalId.feature"
#line hidden
        
        public TwinIDAndExternalIDBodyTransformFeature(TwinIDAndExternalIDBodyTransformFeature.FixtureData fixtureData, Willow_PublicApi_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwinPermissionTransform", "Twin ID and External ID Body Transform", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Twin ID",
                        "External ID"});
            table8.AddRow(new string[] {
                        "Twin1",
                        "Ext1"});
            table8.AddRow(new string[] {
                        "Twin2",
                        "Ext2"});
#line 4
 testRunner.Given("I have permission to the following twin IDs", ((string)(null)), table8, "Given ");
#line hidden
#line 8
 testRunner.And("I have a body transform with ID \"twinId\" and external ID \"externalId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate Body Transform")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Validate Body Transform")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        public void ValidateBodyTransform()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB-133460"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Body Transform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 12
 testRunner.When("I validate the body transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the result will be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate Body Transform - Fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Validate Body Transform - Fail")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("", "", new string[0])]
        [Xunit.InlineDataAttribute("twinId", "", new string[0])]
        [Xunit.InlineDataAttribute("", "externalId", new string[0])]
        public void ValidateBodyTransform_Fail(string twinIDName, string externalIDName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID Name", twinIDName);
            argumentsOfScenario.Add("External ID Name", externalIDName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Body Transform - Fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 17
 testRunner.Given(string.Format("I have a body transform with ID \"{0}\" and external ID \"{1}\"", twinIDName, externalIDName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("I validate the body transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("the result will be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Build Body Transform")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Build Body Transform")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        public void BuildBodyTransform()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB-133460"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build Body Transform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 29
 testRunner.When("I build the body transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("the result will be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Build Body Transform - Fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Build Body Transform - Fail")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("", "", new string[0])]
        [Xunit.InlineDataAttribute("twinId", "", new string[0])]
        [Xunit.InlineDataAttribute("", "externalId", new string[0])]
        public void BuildBodyTransform_Fail(string twinIDName, string externalIDName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID Name", twinIDName);
            argumentsOfScenario.Add("External ID Name", externalIDName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build Body Transform - Fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 34
 testRunner.Given(string.Format("I have a body transform with ID \"{0}\" and external ID \"{1}\"", twinIDName, externalIDName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.When("I build the body transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the result will be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Single, Named")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Single, Named")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1", "Ext1", "200", "Twin1", "Ext1", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext1", "200", "", "Ext1", new string[0])]
        public void ExecuteBodyTransform_SingleNamed(string twinID, string externalID, string statusCode, string expectedTwinID, string expectedExternalID, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID", twinID);
            argumentsOfScenario.Add("External ID", externalID);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin ID", expectedTwinID);
            argumentsOfScenario.Add("Expected External ID", expectedExternalID);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Single, Named", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 46
 testRunner.When(string.Format("I execute the body transform with a single value \"{0}\" and external ID \"{1}\"", twinID, externalID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then(string.Format("the JSON property for \"twinId\" will have the value \"{0}\"", expectedTwinID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.And(string.Format("the JSON property for \"externalId\" will have the value \"{0}\"", expectedExternalID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Array of objects, Single, Named")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Array of objects, Single, Named")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1", "Ext1", "200", "Twin1", "Ext1", new string[0])]
        [Xunit.InlineDataAttribute("Twin1", "Ext3", "200", "Twin1", "Ext3", new string[0])]
        [Xunit.InlineDataAttribute("Twin1,Twin2", "Ext1,Ext2", "200", "Twin1,Twin2", "Ext1,Ext2", new string[0])]
        [Xunit.InlineDataAttribute("Twin2,Twin3", "Ext2,Ext3", "200", "Twin2", "Ext2", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext1,Ext2", "200", ",", "Ext1,Ext2", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext2,Ext3", "200", "", "Ext2", new string[0])]
        public void ExecuteBodyTransform_ArrayOfObjectsSingleNamed(string twinIDs, string externalIDs, string statusCode, string expectedTwinIDs, string expectedExternalIDs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("External IDs", externalIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin IDs", expectedTwinIDs);
            argumentsOfScenario.Add("Expected External IDs", expectedExternalIDs);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Array of objects, Single, Named", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 58
 testRunner.When(string.Format("I execute the body transform with an array of objects with the single value \"{0}\"" +
                            " and external ID \"{1}\"", twinIDs, externalIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then(string.Format("the array of objects will have JSON properties for \"twinId\" and will have the val" +
                            "ues \"{0}\"", expectedTwinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.Then(string.Format("the array of objects will have JSON properties for \"externalId\" and will have the" +
                            " values \"{0}\"", expectedExternalIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Single Fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Single Fail")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin3", "Ext2", "403", new string[0])]
        [Xunit.InlineDataAttribute("Twin3", "Ext3", "403", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext3", "403", new string[0])]
        public void ExecuteBodyTransform_SingleFail(string twinIDs, string externalIDs, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("External IDs", externalIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Single Fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 73
 testRunner.When("I execute the body transform with a single value \"<Twin ID>\" and external ID \"<Ex" +
                        "ternal ID>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Multiple Fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID and External ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Multiple Fail")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin3", "Ext2", "403", new string[0])]
        [Xunit.InlineDataAttribute("Twin3", "Ext3", "403", new string[0])]
        [Xunit.InlineDataAttribute("Twin3,Twin4", "Ext3,Ext4", "403", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext3", "403", new string[0])]
        [Xunit.InlineDataAttribute("", "Ext3,Ext4", "403", new string[0])]
        public void ExecuteBodyTransform_MultipleFail(string twinIDs, string externalIDs, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("External IDs", externalIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Multiple Fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 86
 testRunner.When(string.Format("I execute the body transform with an array of objects with the single value \"{0}\"" +
                            " and external ID \"{1}\"", twinIDs, externalIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TwinIDAndExternalIDBodyTransformFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TwinIDAndExternalIDBodyTransformFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
