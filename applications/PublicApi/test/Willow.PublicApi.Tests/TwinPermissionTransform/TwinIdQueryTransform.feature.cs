// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.PublicApi.Tests.TwinPermissionTransform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TwinIDQueryTransformFeature : object, Xunit.IClassFixture<TwinIDQueryTransformFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TwinIdQueryTransform.feature"
#line hidden
        
        public TwinIDQueryTransformFeature(TwinIDQueryTransformFeature.FixtureData fixtureData, Willow_PublicApi_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwinPermissionTransform", "Twin ID Query Transform", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Twin ID",
                        "External ID"});
            table9.AddRow(new string[] {
                        "Twin1",
                        ""});
            table9.AddRow(new string[] {
                        "Twin2",
                        ""});
#line 4
 testRunner.Given("I have permission to the following twin IDs", ((string)(null)), table9, "Given ");
#line hidden
#line 8
 testRunner.And("I have a query transform with ID \"twinId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate Query Transform")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Query Transform")]
        [Xunit.TraitAttribute("Description", "Validate Query Transform")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        public void ValidateQueryTransform()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB-133460"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Query Transform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 12
 testRunner.When("I validate the query transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the result will be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Build Query Transform")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Query Transform")]
        [Xunit.TraitAttribute("Description", "Build Query Transform")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        public void BuildQueryTransform()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB-133460"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build Query Transform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 17
 testRunner.When("I build the query transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then("the result will be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Query Transform - Single Value")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Query Transform")]
        [Xunit.TraitAttribute("Description", "Execute Query Transform - Single Value")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1", "200", new string[0])]
        [Xunit.InlineDataAttribute("Twin2", "200", new string[0])]
        [Xunit.InlineDataAttribute("Twin3", "403", new string[0])]
        public void ExecuteQueryTransform_SingleValue(string twinID, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID", twinID);
            argumentsOfScenario.Add("Status Code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Query Transform - Single Value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 22
 testRunner.When(string.Format("I execute the query transform with \"{0}\"", twinID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Query Transform - Multiple Values")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Query Transform")]
        [Xunit.TraitAttribute("Description", "Execute Query Transform - Multiple Values")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1,Twin2", "200", "Twin1,Twin2", new string[0])]
        [Xunit.InlineDataAttribute("Twin2,Twin3", "200", "Twin2", new string[0])]
        public void ExecuteQueryTransform_MultipleValues(string twinIDs, string statusCode, string expectedTwinIDs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin IDs", expectedTwinIDs);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Query Transform - Multiple Values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 33
 testRunner.When(string.Format("I execute the query transform with multiple values \"{0}\"", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then(string.Format("the query string for \"twinId\" will have values \"{0}\"", expectedTwinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Query Transform - Multiple Values - All invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Query Transform")]
        [Xunit.TraitAttribute("Description", "Execute Query Transform - Multiple Values - All invalid")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin3,Twin4", "403", new string[0])]
        public void ExecuteQueryTransform_MultipleValues_AllInvalid(string twinIDs, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Query Transform - Multiple Values - All invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 44
 testRunner.When(string.Format("I execute the query transform with multiple values \"{0}\"", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TwinIDQueryTransformFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TwinIDQueryTransformFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
