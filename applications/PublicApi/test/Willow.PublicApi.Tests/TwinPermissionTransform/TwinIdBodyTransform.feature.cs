// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.PublicApi.Tests.TwinPermissionTransform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TwinIDBodyTransformFeature : object, Xunit.IClassFixture<TwinIDBodyTransformFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TwinIdBodyTransform.feature"
#line hidden
        
        public TwinIDBodyTransformFeature(TwinIDBodyTransformFeature.FixtureData fixtureData, Willow_PublicApi_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwinPermissionTransform", "Twin ID Body Transform", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Twin ID",
                        "External ID"});
            table7.AddRow(new string[] {
                        "Twin1",
                        ""});
            table7.AddRow(new string[] {
                        "Twin2",
                        ""});
#line 4
 testRunner.Given("I have permission to the following twin IDs", ((string)(null)), table7, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Build Body Transform")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Build Body Transform")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1", new string[0])]
        [Xunit.InlineDataAttribute("", new string[0])]
        public void BuildBodyTransform(string twinID, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID", twinID);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build Body Transform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given(string.Format("I have a body transform with ID \"{0}\"", twinID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("I build the body transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the result will be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Multiple, Unnamed")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Multiple, Unnamed")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1,Twin2", "200", "Twin1,Twin2", new string[0])]
        [Xunit.InlineDataAttribute("Twin2,Twin3", "200", "Twin2", new string[0])]
        public void ExecuteBodyTransform_MultipleUnnamed(string twinIDs, string statusCode, string expectedTwinIDs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin IDs", expectedTwinIDs);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Multiple, Unnamed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 21
 testRunner.Given("I have a body transform with ID \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.When(string.Format("I execute the body transform with multiple values \"{0}\"", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then(string.Format("the JSON property for \"\" will have values \"{0}\"", expectedTwinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Multiple, Named")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Multiple, Named")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1,Twin2", "200", "Twin1,Twin2", new string[0])]
        [Xunit.InlineDataAttribute("Twin2,Twin3", "200", "Twin2", new string[0])]
        public void ExecuteBodyTransform_MultipleNamed(string twinIDs, string statusCode, string expectedTwinIDs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin IDs", expectedTwinIDs);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Multiple, Named", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 33
 testRunner.Given("I have a body transform with ID \"twinId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.When(string.Format("I execute the body transform with multiple values \"{0}\"", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then(string.Format("the JSON property for \"twinId\" will have values \"{0}\"", expectedTwinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Single, Named")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Single, Named")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1", "200", "Twin1", new string[0])]
        public void ExecuteBodyTransform_SingleNamed(string twinID, string statusCode, string expectedTwinID, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin ID", twinID);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin ID", expectedTwinID);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Single, Named", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 45
 testRunner.Given("I have a body transform with ID \"twinId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.When(string.Format("I execute the body transform with a single value \"{0}\"", twinID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then(string.Format("the JSON property for \"twinId\" will have the value \"{0}\"", expectedTwinID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Array of objects, Single, Named")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Array of objects, Single, Named")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("Twin1,Twin2", "200", "Twin1,Twin2", new string[0])]
        [Xunit.InlineDataAttribute("Twin2,Twin3", "200", "Twin2", new string[0])]
        public void ExecuteBodyTransform_ArrayOfObjectsSingleNamed(string twinIDs, string statusCode, string expectedTwinIDs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            argumentsOfScenario.Add("Expected Twin IDs", expectedTwinIDs);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Array of objects, Single, Named", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 56
 testRunner.Given("I have a body transform with ID \"twinId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.When(string.Format("I execute the body transform with an array of objects with the single value \"{0}\"" +
                            "", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then(string.Format("the array of objects will have JSON properties for \"twinId\" and will have the val" +
                            "ues \"{0}\"", expectedTwinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Execute Body Transform - Fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Twin ID Body Transform")]
        [Xunit.TraitAttribute("Description", "Execute Body Transform - Fail")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("", "Twin3", "403", new string[0])]
        [Xunit.InlineDataAttribute("", "Twin3,Twin4", "403", new string[0])]
        [Xunit.InlineDataAttribute("twinId", "Twin3", "403", new string[0])]
        [Xunit.InlineDataAttribute("twinId", "Twin3,Twin4", "403", new string[0])]
        public void ExecuteBodyTransform_Fail(string propertyID, string twinIDs, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Property ID", propertyID);
            argumentsOfScenario.Add("Twin IDs", twinIDs);
            argumentsOfScenario.Add("Status Code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Body Transform - Fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 67
 testRunner.Given(string.Format("I have a body transform with ID \"{0}\"", propertyID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.When(string.Format("I execute the body transform with multiple values \"{0}\"", twinIDs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then(string.Format("the response status code will be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TwinIDBodyTransformFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TwinIDBodyTransformFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
