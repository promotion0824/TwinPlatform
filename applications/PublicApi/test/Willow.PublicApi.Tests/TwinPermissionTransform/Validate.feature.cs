// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.PublicApi.Tests.TwinPermissionTransform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TransformValidationFeature : object, Xunit.IClassFixture<TransformValidationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Validate.feature"
#line hidden
        
        public TransformValidationFeature(TransformValidationFeature.FixtureData fixtureData, Willow_PublicApi_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwinPermissionTransform", "Transform Validation", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate Body Transform - one param")]
        [Xunit.TraitAttribute("FeatureTitle", "Transform Validation")]
        [Xunit.TraitAttribute("Description", "Validate Body Transform - one param")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("TwinIdRoute", "", "false", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdRoute", "route", "true", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdQuery", "", "false", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdQuery", "query", "true", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdBody", "", "true", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdBody", "body", "true", new string[0])]
        [Xunit.InlineDataAttribute("ExternalIdBody", "", "false", new string[0])]
        [Xunit.InlineDataAttribute("ExternalIdBody", "ext", "true", new string[0])]
        [Xunit.InlineDataAttribute("InvalidKey", "inv", "false", new string[0])]
        public void ValidateBodyTransform_OneParam(string type, string value, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Type", type);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Body Transform - one param", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("I have a transform of type \"{0}\" and value \"{1}\"", type, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I validate the transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("the result will be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate Body Transform - two params")]
        [Xunit.TraitAttribute("FeatureTitle", "Transform Validation")]
        [Xunit.TraitAttribute("Description", "Validate Body Transform - two params")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB-133460")]
        [Xunit.InlineDataAttribute("TwinIdRoute", "route", "TwinIdQuery", "query", "false", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdRoute", "route", "TwinIdBody", "body", "false", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdQuery", "query", "TwinIdBody", "body", "false", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdBody", "body", "ExternalIdBody", "ext", "true", new string[0])]
        [Xunit.InlineDataAttribute("TwinIdRoute", "route", "InvalidKey", "inv", "false", new string[0])]
        public void ValidateBodyTransform_TwoParams(string type1, string value1, string type2, string value2, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB-133460"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Type 1", type1);
            argumentsOfScenario.Add("Value 1", value1);
            argumentsOfScenario.Add("Type 2", type2);
            argumentsOfScenario.Add("Value 2", value2);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Body Transform - two params", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given(string.Format("I have a transform of type \"{0}\" and value \"{1}\"", type1, value1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.And(string.Format("I have a transform of type \"{0}\" and value \"{1}\"", type2, value2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("I validate the transform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then(string.Format("the result will be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TransformValidationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TransformValidationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
