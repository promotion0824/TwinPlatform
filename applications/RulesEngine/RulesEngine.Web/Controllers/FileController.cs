using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Threading.Tasks;
using Willow.Rules.Services;
using Willow.Rules.Sources;
using Microsoft.AspNetCore.Authorization;
using Willow.Rules.Repository;

namespace Willow.Rules.Web.Controllers;

/// <summary>
/// Controller for file download - this allows ANONYMOUS ACCESS
/// </summary>
/// <remarks>
/// This allows anonymous access with a short-lived token that can only
/// be generated by an authorized user. This allows browser download to work.
/// See https://gaurav5430.medium.com/web-security-file-downloads-behind-auth-c38c4cb1842b
/// </remarks>
[Route("api/[controller]")]
[ApiController]
[AllowAnonymous]
[ApiExplorerSettings(GroupName = "v1")]
public partial class FileController : ControllerBase
{
    private readonly ILogger<FileController> logger;
    private readonly WillowEnvironment willowEnvironment;
    private readonly IRepositoryRuleMetadata repositoryRuleMetadata;
    private readonly IRepositoryRules repositoryRules;
    private readonly IFileService fileService;

    /// <summary>
    /// Creates a new <see cref="FileController"/>
    /// </summary>
    public FileController(
        ILogger<FileController> logger,
        WillowEnvironment willowEnvironment,
        IRepositoryRuleMetadata repositoryRuleMetadata,
        IRepositoryRules repositoryRules,
        IFileService fileService
        )
    {
        this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
        this.willowEnvironment = willowEnvironment ?? throw new ArgumentNullException(nameof(willowEnvironment));
        this.repositoryRuleMetadata = repositoryRuleMetadata ?? throw new ArgumentNullException(nameof(repositoryRuleMetadata));
        this.repositoryRules = repositoryRules ?? throw new ArgumentNullException(nameof(repositoryRules));
        this.fileService = fileService ?? throw new ArgumentNullException(nameof(fileService));
    }

    /// <summary>
    /// Download debug info for rule instance in a ZIP file
    /// </summary>
    [HttpGet("download-debug-info", Name = "DownloadDebugInfo")]
    //[ProducesResponseType(typeof(string), StatusCodes.Status200OK, "application/zip")]
    [FileResultContentType("application/zip")]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesDefaultResponseType]
    public async Task<IActionResult> DownloadDebugInfo(string id, string token, bool downloadTelemetry = true)
    {
        logger.LogInformation($"Download zip file for rule instance {token}");
        if (!fileService.ValidateShortLivedToken(token)) return BadRequest("Invalid token");

        var filePath = await this.fileService.ZipRuleInstanceDebugInfo(id, downloadTelemetry, DateTime.Today.AddDays(-30), DateTime.UtcNow);

        var zipstream = System.IO.File.Open(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);
        var now = DateTimeOffset.UtcNow;
        string fileName = $"{willowEnvironment.Id}-SkillInstance-{id}-{now.Year}-{now.Month:00}-{now.Day:00}-{now.Hour:00}-{now.Minute:00}.zip";
        logger.LogInformation("Returning zip file for rule instance");
        return File(zipstream, "application/zip", fileName, true);
    }

    /// <summary>
    /// Download all rules in a ZIP file
    /// </summary>
    [HttpGet("download", Name = "DownloadRulesZip")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK, "application/zip")]
    public async Task<IActionResult> DownloadRulesZip(string token)
    {
        logger.LogInformation($"Download rules zip {token}");
        if (!fileService.ValidateShortLivedToken(token)) return BadRequest("Invalid token");

        var filePath = await this.fileService.GetOrCreateZippedRules();

        var zipstream = System.IO.File.Open(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);
        var now = DateTimeOffset.UtcNow;
        string fileName = $"{willowEnvironment.Id}-Skills-{now.Year}-{now.Month:00}-{now.Day:00}-{now.Hour:00}-{now.Minute:00}.zip";
        logger.LogInformation("Returning zip file for rules");
        return File(zipstream, "application/zip", fileName, true);
    }

    /// <summary>
    /// Download all globals in a ZIP file
    /// </summary>
    [HttpGet("downloadGlobals", Name = "DownloadGlobalsZip")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK, "application/zip")]
    public async Task<IActionResult> DownloadGlobalsZip(string token)
    {
        logger.LogInformation($"Download globals zip {token}");
        if (!fileService.ValidateShortLivedToken(token)) return BadRequest("Invalid token");

        var filePath = await this.fileService.GetOrCreateZippedRules(FileServiceSourceType.Global);

        var zipstream = System.IO.File.Open(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);
        var now = DateTimeOffset.UtcNow;
        string fileName = $"{willowEnvironment.Id}-Globals-{now.Year}-{now.Month:00}-{now.Day:00}-{now.Hour:00}-{now.Minute:00}.zip";
        logger.LogInformation("Returning zip file for globals");
        return File(zipstream, "application/zip", fileName, true);
    }


    /// <summary>
    /// Download all globals in a ZIP file
    /// </summary>
    [HttpGet("downloadMLModels", Name = "DownloadMLModelsZip")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK, "application/zip")]
    public async Task<IActionResult> DownloadMLModelsZip(string token)
    {
        logger.LogInformation($"Download globals zip {token}");
        if (!fileService.ValidateShortLivedToken(token)) return BadRequest("Invalid token");

        var filePath = await this.fileService.GetOrCreateZippedRules(FileServiceSourceType.MLModel);

        var zipstream = System.IO.File.Open(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);
        var now = DateTimeOffset.UtcNow;
        string fileName = $"{willowEnvironment.Id}-MLModels-{now.Year}-{now.Month:00}-{now.Day:00}-{now.Hour:00}-{now.Minute:00}.zip";
        logger.LogInformation("Returning zip file for ml moldes");
        return File(zipstream, "application/zip", fileName, true);
    }

    /// <summary>
    /// Download all insights in a ZIP file
    /// </summary>
    [HttpGet("download-insights", Name = "DownloadInsights")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK, "application/zip")]
    public async Task<IActionResult> DownloadInsights(string token)
    {
        logger.LogInformation($"Download insights {token}");
        if (!fileService.ValidateShortLivedToken(token)) return BadRequest("Invalid token");

        var filePath = await this.fileService.GetOrCreateInsights();

        var zipstream = System.IO.File.Open(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);
        var now = DateTimeOffset.UtcNow;
        string fileName = $"{willowEnvironment.Id}-Insights-{now.Year}-{now.Month:00}-{now.Day:00}-{now.Hour:00}-{now.Minute:00}.zip";
        logger.LogInformation("Returning zip file for insights");
        return File(zipstream, "application/zip", fileName, true);
    }

}
