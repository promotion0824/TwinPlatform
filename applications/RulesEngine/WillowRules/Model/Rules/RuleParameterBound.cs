using System;
using System.Text.Json.Serialization;
using Willow.Expressions;
using Willow.Rules.Cache;
using WillowRules.RepositoryConfiguration;

// EF
#nullable disable

namespace Willow.Rules.Model;

/// <summary>
/// A rule parameter bound to a set of trend ids
/// </summary>
public class RuleParameterBound
{
	/// <summary>
	/// The field Id of the field that was used, e.g. "temp_out" even though it's called "Temperature" in the UI
	/// </summary>
	public string FieldId { get; set; }

	/// <summary>
	/// Name
	/// </summary>
	public string Name { get; set; }

	/// <summary>
	/// Name
	/// </summary>
	public string Units { get; set; }

	/// <summary>
	/// Status of the parameter
	/// </summary>
	public RuleInstanceStatus Status { get; set; }

	/// <summary>
	/// Cumulative expressions setting applied each time a rule is evaluated, used to calculate total impact over time
	/// </summary>
	public CumulativeType CumulativeSetting { get; set; }

	/// <summary>
	/// Is the parameter auto-generated
	/// </summary>
	public bool IsAutoGenerated { get; set; }

	/// <summary>
	/// Bound point expression (substitutes trendIds for dtmi, tags, bacnet names, ...)
	/// </summary>
	/// <remarks>
	/// Since this is saved to/from Json we can rely on that and use a real TokenExpression value here
	/// </remarks>
	[JsonConverter(typeof(TokenExpressionJsonConverter))]
	public TokenExpression PointExpression { get; set; }

	/// <summary>
	/// Constructor from RuleParameter
	/// </summary>
	public RuleParameterBound(
		RuleParameter ruleParameter,
		string fieldId,
		TokenExpression pointExpression,
		RuleInstanceStatus ruleInstanceStatus = RuleInstanceStatus.Valid,
		bool isAutoGenerated = false)
		: this(
			  ruleParameter.Name,
			  pointExpression,
			  fieldId,
			  ruleParameter.Units,
			  cumulativeSetting: ruleParameter.CumulativeSetting,
			  ruleInstanceStatus: ruleInstanceStatus,
			  isAutoGenerated: isAutoGenerated)
	{
	}

	/// <summary>
	/// Constructor
	/// </summary>
	public RuleParameterBound(
		string name,
		TokenExpression pointExpression,
		string fieldId,
		string unit,
		RuleInstanceStatus ruleInstanceStatus = RuleInstanceStatus.Valid,
		CumulativeType cumulativeSetting = CumulativeType.Simple,
		bool isAutoGenerated = false)
	{
		if (string.IsNullOrWhiteSpace(name))
		{
			throw new System.ArgumentException($"'{nameof(name)}' cannot be null or whitespace.", nameof(name));
		}

		if (fieldId is null)
		{
			throw new ArgumentNullException(nameof(fieldId));
		}

		Name = name;
		FieldId = fieldId;
		PointExpression = pointExpression ?? throw new ArgumentNullException(nameof(pointExpression));
		Units = unit;
		Status = ruleInstanceStatus;
		CumulativeSetting = cumulativeSetting;
		IsAutoGenerated = isAutoGenerated;
	}

	/// <summary>
	/// Constructor for EF
	/// </summary>
	public RuleParameterBound()
	{
	}
}
