using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Willow.Rules.Model.RuleTemplates;
using Willow.Rules.Model;
using System.Xml.Linq;

namespace WillowRules.Test.Bugs.Item126467;

[TestClass]
public class Item126467Tests
{
	[TestMethod]
	public async Task ShouldNotAddDynamicVariableForFailedVisitor()
	{
		var isTerminalUnitInHeatingModeGlobal = new GlobalVariable()
		{
			VariableType = GlobalVariableType.Macro,
			Name = "IsTerminalUnitInHeatingMode",
			Parameters = new List<FunctionParameter>()
			{
				new ("TerminalUnit", "", "")
			},
			Expression = new List<RuleParameter>()
			{
				new ("IsHeating", "IsHeating", @"OPTION([dtmi:com:willowinc:HeatingLevelActuator;1] > 0, 0)"),
				new ("result", "result", @"MAX(IsHeating, 24h) == 1")
			}
		};

		var currentlyActiveSetpointGlobal = new GlobalVariable()
		{
			VariableType = GlobalVariableType.Macro,
			Name = "CurrentlyActiveSetpoint",
			Parameters = new List<FunctionParameter>()
			{
				new ("TerminalUnit", "", "")
			},
			Expression = new List<RuleParameter>()
			{
				new ("InHeatingMode", "InHeatingMode", "IsTerminalUnitInHeatingMode(TerminalUnit)"),
				//The IF using InHeatingMode should fail, but because it is a nested Macro temporal the Auto variable has been created but should be removed
				new ("result", "result", @"OPTION(IF(InHeatingMode, TerminalUnit.[dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1], TerminalUnit.[dtmi:com:willowinc:EffectiveCoolingZoneAirTemperatureSetpoint;1]), TerminalUnit.[dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1], TerminalUnit.[dtmi:com:willowinc:ZoneAirTemperatureSetpoint;1])")
			}
		};

		var parameters = new List<RuleParameter>()
		{
			new("Expression", "result", "CurrentlyActiveSetpoint(this)")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		harness.repositoryGlobalVariable.Data.Add(isTerminalUnitInHeatingModeGlobal);
		harness.repositoryGlobalVariable.Data.Add(currentlyActiveSetpointGlobal);

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");
		var sensor2 = new TwinOverride("dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1", "sensor2", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor2");
		var sensor3 = new TwinOverride("dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1", "sensor3", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor3");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1, sensor2, sensor3 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(1);
		ri.RuleParametersBound.Any(rpb => rpb.IsAutoGenerated).Should().BeFalse();
	}

	[TestMethod]
	public async Task ShouldNotAddDynamicVariableForFailedVisitor2()
	{
		var parameters = new List<RuleParameter>()
		{
			new("Expression", "result", "OPTION(MAX(5 + 5, 24h) + [dtmi:com:willowinc:HeatingLevelActuator;1], 5) == 1")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");
		var sensor2 = new TwinOverride("dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1", "sensor2", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor2");
		var sensor3 = new TwinOverride("dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1", "sensor3", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor3");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1, sensor2, sensor3 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(1);
		ri.RuleParametersBound.Any(rpb => rpb.IsAutoGenerated).Should().BeFalse();
	}

	[TestMethod]
	public async Task ShouldNotAddDynamicVariableForFailedVisitor3()
	{
		var parameters = new List<RuleParameter>()
		{
			new("Expression", "result", "MAX(5 + 5, 24h) + OPTION(MAX(5 + 5, 24h), 5) == 1")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");
		var sensor2 = new TwinOverride("dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1", "sensor2", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor2");
		var sensor3 = new TwinOverride("dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1", "sensor3", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor3");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1, sensor2, sensor3 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(2);
		//should only create one (unique) auto variable
		ri.RuleParametersBound.Count(rpb => rpb.IsAutoGenerated).Should().Be(1);
	}

	[TestMethod]
	public async Task ShouldNotAddDynamicVariableForFailedVisitor4()
	{
		var parameters = new List<RuleParameter>()
		{
			new("s1", "s1", "sensor1"),
			new("Expression", "result", "IF({MAX([s1] + 1, 24h), MAX([s1] + 1, 24h), MAX([s1] + 2, 24h)} == 1, 1, 2)", "array")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");
		var sensor2 = new TwinOverride("dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1", "sensor2", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor2");
		var sensor3 = new TwinOverride("dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1", "sensor3", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor3");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1, sensor2, sensor3 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(4);
		ri.RuleParametersBound.Count(rpb => rpb.IsAutoGenerated).Should().Be(2);
		var result = ri.RuleParametersBound.Last();

		result.PointExpression.ToString().Should().Be("{IF((MAX(auto_9Qiui5zSCY, 24) = 1), 1, 2),IF((MAX(auto_9Qiui5zSCY, 24) = 1), 1, 2),IF((MAX(auto_ETHxmeIzUM, 24) = 1), 1, 2)}");

		ri.Status.Should().Be(RuleInstanceStatus.Valid);
	}

	[TestMethod]
	public async Task ShouldNotAddDynamicVariableForFailedVisitor5()
	{
		var parameters = new List<RuleParameter>()
		{
			new("Expression", "result", "IF(AVERAGE({sensor1 + 1, sensor1 + 2}, 1d) == 1, 1, 2)", "array")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");
		var sensor2 = new TwinOverride("dtmi:com:willowinc:EffectiveZoneAirTemperatureSetpoint;1", "sensor2", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor2");
		var sensor3 = new TwinOverride("dtmi:com:willowinc:EffectiveHeatingZoneAirTemperatureSetpoint;1", "sensor3", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor3");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1, sensor2, sensor3 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(3);
		ri.RuleParametersBound.Count(rpb => rpb.IsAutoGenerated).Should().Be(2);

		var result = ri.RuleParametersBound.Last();

		result.PointExpression.ToString().Should().Be("{IF((AVERAGE(auto_VSvNfykUhk, 1) = 1), 1, 2),IF((AVERAGE(auto_AiQGlEnkKk, 1) = 1), 1, 2)}");

		ri.Status.Should().Be(RuleInstanceStatus.Valid);
	}

	[TestMethod]
	public async Task ShouldRetainVariableIfFirstNestedOptionFailsWithChildExpression()
	{
		var parameters = new List<RuleParameter>()
		{
			new("Expression", "sensor", "[sensor1]"),
			new("Expression", "result", "IF(sensor > 1, OPTION([sensor_not_found], MAX(5 + [sensor1], 24h)), 0)")
		};

		var rule = new Rule()
		{
			Id = "terminal-unit-zone-hot",
			PrimaryModelId = "dtmi:com:willowinc:TerminalUnit;1",
			TemplateId = RuleTemplateAnyFault.ID,
			Parameters = parameters
		};

		var harness = new ProcessorTestHarness();

		var equipment = new TwinOverride("dtmi:com:willowinc:TerminalUnit;1", "equipment");
		var sensor1 = new TwinOverride("dtmi:com:willowinc:ZoneAirTemperatureSensor;1", "sensor1", trendId: Guid.NewGuid().ToString(), connectorId: Guid.NewGuid().ToString(), externalId: "sensor1");

		harness.OverrideCaches(rule, equipment, new List<TwinOverride>() { sensor1 });

		var ri = (await harness.GenerateRuleInstances())[0];

		ri.RuleParametersBound.Count.Should().Be(3);
		ri.RuleParametersBound.Count(rpb => rpb.IsAutoGenerated).Should().Be(1);
	}
}
