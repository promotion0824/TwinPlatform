// <auto-generated> This file has been auto generated. </auto-generated>

#pragma warning disable CS1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace mpd
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public Type QueryBuilderType { get; set; }
    }

    public enum Formatting
    {
        None,
        Indented
    }

    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }

        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;

                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }

        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }

    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";

        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);

        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();

            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;

                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");

                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");

                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);

                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");

                    return ReadArray(reader, objectType, elementType, serializer);

                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);

        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }

        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);

            return new JsonReaderException(message);
        }

        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();

        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));

            if (!targetType.IsArray)
                return list;

            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }

        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
#endif

    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);

        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }

        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }

        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }

        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;

            if (value is null)
                return "null";

            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));

            if (value is Enum @enum)
                return ConvertEnumToString(@enum);

            if (value is bool @bool)
                return @bool ? "true" : "false";

            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";

            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";

            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);

            if (value is Guid)
                return $"\"{value}\"";

            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";

            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');

            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);

            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }

        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);

                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }

                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }

            builder.Append(closingSymbol);
            return builder.ToString();
        }

        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");

            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";

            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);

                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);

                separator = ",";

                if (isIndentedFormatting)
                    builder.AppendLine();
            }

            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;

            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");

            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;

                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);

                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }

                separator = isIndentedFormatting ? ", " : ",";
            }

            builder.Append(")");
            return builder.ToString();
        }

        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }

        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");

            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }

    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }

    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }

    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);

        public static readonly DefaultGraphQlArgumentBuilder Instance = new();

        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;

                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;

                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;

                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }

            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");

                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }

            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
#endif

            graphQlString = null;
            return false;
        }
    }

    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }

    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }

    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }

    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }

    public abstract class QueryBuilderParameter
    {
        private string _name;

        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }

        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }

        protected QueryBuilderParameter(object value) => Value = value;
    }

    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }

        private QueryBuilderParameter(T value) : base(value)
        {
        }

        public void ResetValue() => base.Value = null;

        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);

        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;

        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }

    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;

        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }

        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }

        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }

        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }

        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";

            return graphQlTypeName;
        }

        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;

            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }

            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }

            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;

            if (valueType == typeof(string))
                return "String";

            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }

        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";

            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";

            if (valueType == typeof(Guid))
                return "ID";

            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";

            return null;
        }
    }

    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();

        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;

        public string Name { get; }

        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }

        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }

    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }

    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;

        protected abstract string TypeName { get; }

        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }

        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }

        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }

        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }

        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }

        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }

        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }

        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();

            BuildOperationSignature(builder, options, indentationSpace, level);

            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);

            builder.Append("{");

            if (isIndentedFormatting)
                builder.AppendLine();

            separator = String.Empty;

            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }

                separator = ",";
            }

            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;

            builder.Append(_operationType);

            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }

            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");

                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;

                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);

                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);

                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);

                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }

                    if (!isIndentedFormatting)
                        separator = ",";
                }

                builder.Append(")");
            }
        }

        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }

        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }

        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }

        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));

            _fieldCriteria.Remove(fieldName);
        }

        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }

        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();

                    if (_operationType != null && GetType() == field.QueryBuilderType || parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;

                    parentTypes?.Add(builderType);

                    var queryBuilder = InitializeChildQueryBuilder(builderType, field.QueryBuilderType, parentTypes);

                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);

                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(
                            queryBuilder,
                            new object[] { InitializeChildQueryBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });

                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }

        private static GraphQlQueryBuilder InitializeChildQueryBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields.Where(f => !f.RequiresParameters), parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }

        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;

            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }

        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();

            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }

        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;

            protected readonly string FieldName;
            protected readonly string Alias;

            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;

            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }

            public abstract string Build(GraphQlBuilderOptions options, int level);

            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;

                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");

                return $"({String.Join($",{separator}", arguments)})";
            }

            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));

            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }

        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }

            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }

        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }

        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }

    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }

        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }

        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }

        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }

        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }

    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }

    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }

    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string DateTime = "DateTime";
        public const string Float = "Float";
        public const string GeoJson = "GeoJSON";
        public const string GraphQljson = "GraphQLJSON";
        public const string Int = "Int";
        public const string Jsonld = "JSONLD";
        public const string JsonSchema = "JSONSchema";
        public const string Long = "Long";
        public const string Map = "Map";
        public const string String = "String";
        public const string Url = "Url";

        public const string AuthMode = "AuthMode";
        public const string BundleState = "BundleState";
        public const string CalendarInvitationResponse = "CalendarInvitationResponse";
        public const string CertificateType = "CertificateType";
        public const string CertificateTypeInput = "CertificateTypeInput";
        public const string CloudEventSourceType = "CloudEventSourceType";
        public const string CloudEventSourceTypeInput = "CloudEventSourceTypeInput";
        public const string ConnectorState = "ConnectorState";
        public const string ConnectorStateInput = "ConnectorStateInput";
        public const string ConnectorTypeConnectorDirection = "ConnectorTypeConnectorDirection";
        public const string ConnectorTypeConnectorDirectionInput = "ConnectorTypeConnectorDirectionInput";
        public const string ConnectorTypeRuntimeVersion = "ConnectorTypeRuntimeVersion";
        public const string ConnectorTypeRuntimeVersionInput = "ConnectorTypeRuntimeVersionInput";
        public const string ConnectorTypeWebhookReceiveStorage = "ConnectorTypeWebhookReceiveStorage";
        public const string ConnectorTypeWebhookReceiveStorageInput = "ConnectorTypeWebhookReceiveStorageInput";
        public const string ConnectorUpsertConfigRestartOptionsInput = "ConnectorUpsertConfigRestartOptionsInput";
        public const string DatatypeKey = "DatatypeKey";
        public const string EdgeDirection = "EdgeDirection";
        public const string EncodingType = "EncodingType";
        public const string EncodingTypeInput = "EncodingTypeInput";
        public const string GatewayCourier = "GatewayCourier";
        public const string GatewayLifecycleState = "GatewayLifecycleState";
        public const string GatewayLifecycleStateInput = "GatewayLifecycleStateInput";
        public const string GatewayModel = "GatewayModel";
        public const string GatewayModelInput = "GatewayModelInput";
        public const string GatewayRmaReason = "GatewayRMAReason";
        public const string GatewayShippingStatus = "GatewayShippingStatus";
        public const string GatewaySimType = "GatewaySIMType";
        public const string GatewaySuspensionReason = "GatewaySuspensionReason";
        public const string GatewaySuspensionReasonInput = "GatewaySuspensionReasonInput";
        public const string GatewayTerminationReason = "GatewayTerminationReason";
        public const string GrantRequestType = "GrantRequestType";
        public const string GrantRequestTypeInput = "GrantRequestTypeInput";
        public const string GrantState = "GrantState";
        public const string GrantStateInput = "GrantStateInput";
        public const string GraphEdgeDirection = "GraphEdgeDirection";
        public const string HttpMethod = "HTTPMethod";
        public const string HttpMethodInput = "HTTPMethodInput";
        public const string Interval = "Interval";
        public const string InviteStatus = "InviteStatus";
        public const string InviteStatusInput = "InviteStatusInput";
        public const string LiveQueryStatus = "LiveQueryStatus";
        public const string LiveQueryStatusInput = "LiveQueryStatusInput";
        public const string OrgProvisioningState = "OrgProvisioningState";
        public const string OrgProvisioningStateInput = "OrgProvisioningStateInput";
        public const string OrgRoleGroupState = "OrgRoleGroupState";
        public const string OrgRoleGroupStateInput = "OrgRoleGroupStateInput";
        public const string OrgServiceAccountState = "OrgServiceAccountState";
        public const string OrgServiceAccountStateInput = "OrgServiceAccountStateInput";
        public const string OrgState = "OrgState";
        public const string OrgStateInput = "OrgStateInput";
        public const string Permission = "Permission";
        public const string PermissionInput = "PermissionInput";
        public const string PriceType = "PriceType";
        public const string ProductType = "ProductType";
        public const string Role = "Role";
        public const string RoleInput = "RoleInput";
        public const string RoleManagerRoleState = "RoleManagerRoleState";
        public const string RoleManagerRoleStateInput = "RoleManagerRoleStateInput";
        public const string RoleManagerRoleType = "RoleManagerRoleType";
        public const string RoleManagerRoleTypeInput = "RoleManagerRoleTypeInput";
        public const string ScopeKey = "ScopeKey";
        public const string SignatureType = "SignatureType";
        public const string SignatureTypeInput = "SignatureTypeInput";
        public const string SystemTypeKey = "SystemTypeKey";
        public const string SystemTypeKeyInput = "SystemTypeKeyInput";
        public const string TimeseriesAggPeriodInput = "TimeseriesAggPeriodInput";
        public const string TimeseriesNumericalException = "TimeseriesNumericalException";
        public const string WebhookTargetCloudEventContentMode = "WebhookTargetCloudEventContentMode";
        public const string WebhookTargetCloudEventContentModeInput = "WebhookTargetCloudEventContentModeInput";
        public const string WebhookTargetEventFilterTypeInput = "WebhookTargetEventFilterTypeInput";
        public const string WebhookTargetTargetTypeInput = "WebhookTargetTargetTypeInput";

        public const string AccessCredential = "AccessCredential";
        public const string AccessCredentialIdentity = "AccessCredentialIdentity";
        public const string Account = "Account";
        public const string Address = "Address";
        public const string AddressMutation = "AddressMutation";
        public const string Agent = "Agent";
        public const string ApiKey = "APIKey";
        public const string Auth = "Auth";
        public const string BaCnetObjectId = "BACnetObjectId";
        public const string BaCnetVendorId = "BACnetVendorId";
        public const string BasicAuth = "BasicAuth";
        public const string BillingCalculatedProductBundleResponse = "BillingCalculatedProductBundleResponse";
        public const string BillingCalculationResponse = "BillingCalculationResponse";
        public const string BillingProductBundleSubscriptionResponse = "BillingProductBundleSubscriptionResponse";
        public const string BodyValueLocation = "BodyValueLocation";
        public const string Building = "Building";
        public const string BuildingCreateResponse = "BuildingCreateResponse";
        public const string BuildingDeleteResponse = "BuildingDeleteResponse";
        public const string BuildingMutation = "BuildingMutation";
        public const string BuildingUpdateResponse = "BuildingUpdateResponse";
        public const string CalendarEvent = "CalendarEvent";
        public const string CalendarInvitation = "CalendarInvitation";
        public const string Certificate = "Certificate";
        public const string CertificateAuthorityBundle = "CertificateAuthorityBundle";
        public const string CertMatch = "CertMatch";
        public const string Collection = "Collection";
        public const string Connector = "Connector";
        public const string ConnectorAuth = "ConnectorAuth";
        public const string ConnectorAuthCreateResponse = "ConnectorAuthCreateResponse";
        public const string ConnectorAuthDeleteResponse = "ConnectorAuthDeleteResponse";
        public const string ConnectorAuthResponseSecret = "ConnectorAuthResponseSecret";
        public const string ConnectorAuthStaticToken = "ConnectorAuthStaticToken";
        public const string ConnectorAuthUpdateResponse = "ConnectorAuthUpdateResponse";
        public const string ConnectorAuthUsernamePassword = "ConnectorAuthUsernamePassword";
        public const string ConnectorContribution = "ConnectorContribution";
        public const string ConnectorCreateResponse = "ConnectorCreateResponse";
        public const string ConnectorDeleteResponse = "ConnectorDeleteResponse";
        public const string ConnectorRequest = "ConnectorRequest";
        public const string ConnectorRequestCreateResponse = "ConnectorRequestCreateResponse";
        public const string ConnectorRestartResponse = "ConnectorRestartResponse";
        public const string ConnectorStartResponse = "ConnectorStartResponse";
        public const string ConnectorStopResponse = "ConnectorStopResponse";
        public const string ConnectorType = "ConnectorType";
        public const string ConnectorTypeListAvailableResponse = "ConnectorTypeListAvailableResponse";
        public const string ConnectorUpdateResponse = "ConnectorUpdateResponse";
        public const string ConnectorUpsertConfigResponse = "ConnectorUpsertConfigResponse";
        public const string ContributionRequest = "ContributionRequest";
        public const string ContributionRequestCreateResponse = "ContributionRequestCreateResponse";
        public const string ContributionRequestPropertyValues = "ContributionRequestPropertyValues";
        public const string ContributionRequestTargetEntity = "ContributionRequestTargetEntity";
        public const string DeviceLibraryModel = "DeviceLibraryModel";
        public const string DeviceManufacturer = "DeviceManufacturer";
        public const string DeviceModel = "DeviceModel";
        public const string Duration = "Duration";
        public const string EmailAddress = "EmailAddress";
        public const string EmailAddressIdentity = "EmailAddressIdentity";
        public const string EmailIdentity = "EmailIdentity";
        public const string ExternalIdentity = "ExternalIdentity";
        public const string FeedsEdge = "FeedsEdge";
        public const string Floor = "Floor";
        public const string FloorCreateResponse = "FloorCreateResponse";
        public const string FloorDeleteResponse = "FloorDeleteResponse";
        public const string FloorLevelIdentity = "FloorLevelIdentity";
        public const string FloorMutation = "FloorMutation";
        public const string FloorUpdateResponse = "FloorUpdateResponse";
        public const string Gateway = "Gateway";
        public const string GatewayActiveDetails = "GatewayActiveDetails";
        public const string GatewayAssignmentDetails = "GatewayAssignmentDetails";
        public const string GatewayAssignResponse = "GatewayAssignResponse";
        public const string GatewayFirstBootDetails = "GatewayFirstBootDetails";
        public const string GatewayGenerateContainerSiDsResponse = "GatewayGenerateContainerSIDsResponse";
        public const string GatewayNote = "GatewayNote";
        public const string GatewayProvisioningDetails = "GatewayProvisioningDetails";
        public const string GatewayRegisterContainerResponse = "GatewayRegisterContainerResponse";
        public const string GatewayRegistrationDetails = "GatewayRegistrationDetails";
        public const string GatewayRmaDetails = "GatewayRMADetails";
        public const string GatewayShippingDetails = "GatewayShippingDetails";
        public const string GatewaySimCertificate = "GatewaySIMCertificate";
        public const string GatewaySimInfo = "GatewaySIMInfo";
        public const string GatewaySuspendResponse = "GatewaySuspendResponse";
        public const string GatewaySuspensionDetails = "GatewaySuspensionDetails";
        public const string GatewayTerminationDetails = "GatewayTerminationDetails";
        public const string GenericIdentity = "GenericIdentity";
        public const string GenericPlace = "GenericPlace";
        public const string GeoPoint = "GeoPoint";
        public const string Grant = "Grant";
        public const string GrantCreateResponse = "GrantCreateResponse";
        public const string GrantDeleteResponse = "GrantDeleteResponse";
        public const string GrantNote = "GrantNote";
        public const string GrantPlacesAndTypes = "GrantPlacesAndTypes";
        public const string GrantRequest = "GrantRequest";
        public const string GrantUpdateResponse = "GrantUpdateResponse";
        public const string HasAccessCredentialEdge = "HasAccessCredentialEdge";
        public const string HasAssignedGroupEdge = "HasAssignedGroupEdge";
        public const string HasAssigneeEdge = "HasAssigneeEdge";
        public const string HasBillEdge = "HasBillEdge";
        public const string HasDeviceModelEdge = "HasDeviceModelEdge";
        public const string HasHeartbeatEdge = "HasHeartbeatEdge";
        public const string HasLocationEdge = "HasLocationEdge";
        public const string HasMemberEdge = "HasMemberEdge";
        public const string HasPartEdge = "HasPartEdge";
        public const string HasPointEdge = "HasPointEdge";
        public const string HasPrimaryContactEdge = "HasPrimaryContactEdge";
        public const string HasProviderEdge = "HasProviderEdge";
        public const string Heartbeat = "Heartbeat";
        public const string Hmac256 = "HMAC256";
        public const string Invite = "Invite";
        public const string InviteCreateResponse = "InviteCreateResponse";
        public const string InviteDeleteResponse = "InviteDeleteResponse";
        public const string InviteUpdateResponse = "InviteUpdateResponse";
        public const string IpAllowlistMatch = "IPAllowlistMatch";
        public const string IsAdjacentToEdge = "IsAdjacentToEdge";
        public const string IsBilledToEdge = "IsBilledToEdge";
        public const string IsClosedByEdge = "IsClosedByEdge";
        public const string IsCreatedByEdge = "IsCreatedByEdge";
        public const string IsFedByEdge = "IsFedByEdge";
        public const string IsLocationOfEdge = "IsLocationOfEdge";
        public const string IsMemberOfEdge = "IsMemberOfEdge";
        public const string IsPartOfEdge = "IsPartOfEdge";
        public const string IsPointOfEdge = "IsPointOfEdge";
        public const string IsReportedByEdge = "IsReportedByEdge";
        public const string IsResponsibilityOfEdge = "IsResponsibilityOfEdge";
        public const string IsResponsibleForEdge = "IsResponsibleForEdge";
        public const string IsServedByEdge = "IsServedByEdge";
        public const string Lease = "Lease";
        public const string LiveQuery = "LiveQuery";
        public const string LiveQueryCreateResponse = "LiveQueryCreateResponse";
        public const string LiveQueryDeleteResponse = "LiveQueryDeleteResponse";
        public const string LiveQueryPauseResponse = "LiveQueryPauseResponse";
        public const string LiveQueryResumeResponse = "LiveQueryResumeResponse";
        public const string LiveQueryUpdateResponse = "LiveQueryUpdateResponse";
        public const string ManufacturedByEdge = "ManufacturedByEdge";
        public const string Match = "Match";
        public const string MetadataEntry = "MetadataEntry";
        public const string MetadataRecord = "MetadataRecord";
        public const string MtlsMatch = "MTLSMatch";
        public const string Mutation = "Mutation";
        public const string NameIdentity = "NameIdentity";
        public const string OAuth2ClientCredentialsFlow = "OAuth2ClientCredentialsFlow";
        public const string OneTimePriceItem = "OneTimePriceItem";
        public const string OneTimePriceItems = "OneTimePriceItems";
        public const string Org = "Org";
        public const string Organization = "Organization";
        public const string OrgAuthenticationChallenge = "OrgAuthenticationChallenge";
        public const string OrgIsOrgNameAvailableResponse = "OrgIsOrgNameAvailableResponse";
        public const string OrgRemoveOrgUserAsyncResponse = "OrgRemoveOrgUserAsyncResponse";
        public const string OrgRoleGroupCreateResponse = "OrgRoleGroupCreateResponse";
        public const string OrgRoleGroupDeleteResponse = "OrgRoleGroupDeleteResponse";
        public const string OrgRoleGroupDto = "OrgRoleGroupDTO";
        public const string OrgRoleGroupUpdateResponse = "OrgRoleGroupUpdateResponse";
        public const string OrgServiceAccountContainer = "OrgServiceAccountContainer";
        public const string OrgServiceAccountCreateResponse = "OrgServiceAccountCreateResponse";
        public const string OrgServiceAccountCreateSecretResponse = "OrgServiceAccountCreateSecretResponse";
        public const string OrgServiceAccountCustomRole = "OrgServiceAccountCustomRole";
        public const string OrgServiceAccountDeleteResponse = "OrgServiceAccountDeleteResponse";
        public const string OrgServiceAccountDeleteSecretsResponse = "OrgServiceAccountDeleteSecretsResponse";
        public const string OrgServiceAccountDto = "OrgServiceAccountDTO";
        public const string OrgServiceAccountSecretHint = "OrgServiceAccountSecretHint";
        public const string OrgServiceAccountUpdateResponse = "OrgServiceAccountUpdateResponse";
        public const string OrgUpdateResponse = "OrgUpdateResponse";
        public const string OrgUpdateV2Response = "OrgUpdateV2Response";
        public const string PeopleGroup = "PeopleGroup";
        public const string Person = "Person";
        public const string PersonalAccessToken = "PersonalAccessToken";
        public const string PersonalAccessTokenCreateResponse = "PersonalAccessTokenCreateResponse";
        public const string PersonalAccessTokenDeleteResponse = "PersonalAccessTokenDeleteResponse";
        public const string PersonalAccessTokenIsPatNameAvailableResponse = "PersonalAccessTokenIsPatNameAvailableResponse";
        public const string PersonalAccessTokenUpdateResponse = "PersonalAccessTokenUpdateResponse";
        public const string Point = "Point";
        public const string PostalAddressIdentity = "PostalAddressIdentity";
        public const string ProductBundleResponse = "ProductBundleResponse";
        public const string ProductPriceItemResponse = "ProductPriceItemResponse";
        public const string QuantityRange = "QuantityRange";
        public const string Query = "Query";
        public const string RegexMatch = "RegexMatch";
        public const string RelatesToEdge = "RelatesToEdge";
        public const string RoleManagerRoleDto = "RoleManagerRoleDTO";
        public const string ServesEdge = "ServesEdge";
        public const string SignatureMatch = "SignatureMatch";
        public const string Site = "Site";
        public const string SiteCreateResponse = "SiteCreateResponse";
        public const string SiteDeleteResponse = "SiteDeleteResponse";
        public const string SiteMutation = "SiteMutation";
        public const string SiteUpdateResponse = "SiteUpdateResponse";
        public const string Space = "Space";
        public const string SpaceCode = "SpaceCode";
        public const string SpaceCreateResponse = "SpaceCreateResponse";
        public const string SpaceDeleteResponse = "SpaceDeleteResponse";
        public const string SpaceMappingEquivalentSpaceSuggestion = "SpaceMappingEquivalentSpaceSuggestion";
        public const string SpaceMappingFloorLevelSuggestion = "SpaceMappingFloorLevelSuggestion";
        public const string SpaceMappingSpaceCodeSuggestion = "SpaceMappingSpaceCodeSuggestion";
        public const string SpaceMappingSuggestedEquivalentSpaces = "SpaceMappingSuggestedEquivalentSpaces";
        public const string SpaceMutation = "SpaceMutation";
        public const string SpaceUpdateResponse = "SpaceUpdateResponse";
        public const string SubBuilding = "SubBuilding";
        public const string Thing = "Thing";
        public const string Tier = "Tier";
        public const string TimeseriesAggregateRow = "TimeseriesAggregateRow";
        public const string TimeseriesRow = "TimeseriesRow";
        public const string TimeseriesRowValue = "TimeseriesRowValue";
        public const string Unit = "Unit";
        public const string User = "User";
        public const string UserAssignRoleResponse = "UserAssignRoleResponse";
        public const string UserCreateResponse = "UserCreateResponse";
        public const string UserOrgDetail = "UserOrgDetail";
        public const string UserRemoveOrgMembershipResponse = "UserRemoveOrgMembershipResponse";
        public const string UserRemoveRoleResponse = "UserRemoveRoleResponse";
        public const string UserUpdateResponse = "UserUpdateResponse";
        public const string ValueLocation = "ValueLocation";
        public const string ValueMatch = "ValueMatch";
        public const string WebhookReceiver = "WebhookReceiver";
        public const string WebhookReceiverCentrifugoDestination = "WebhookReceiverCentrifugoDestination";
        public const string WebhookReceiverCorsOptions = "WebhookReceiverCORSOptions";
        public const string WebhookReceiverDeleteResponse = "WebhookReceiverDeleteResponse";
        public const string WebhookReceiverDestination = "WebhookReceiverDestination";
        public const string WebhookReceiverKafkaDestination = "WebhookReceiverKafkaDestination";
        public const string WebhookReceiverResponseHeadersEntry = "WebhookReceiverResponseHeadersEntry";
        public const string WebhookReceiverTemporalExecuteWorkflowDestination = "WebhookReceiverTemporalExecuteWorkflowDestination";
        public const string WebhookReceiverTemporalSignalWorkfowDestination = "WebhookReceiverTemporalSignalWorkfowDestination";
        public const string WebhookReceiverUpsertResponse = "WebhookReceiverUpsertResponse";
        public const string WebhookTarget = "WebhookTarget";
        public const string WebhookTargetAuth = "WebhookTargetAuth";
        public const string WebhookTargetCloudEventBatchedContentModeConfig = "WebhookTargetCloudEventBatchedContentModeConfig";
        public const string WebhookTargetCloudEventFilter = "WebhookTargetCloudEventFilter";
        public const string WebhookTargetCreateResponse = "WebhookTargetCreateResponse";
        public const string WebhookTargetDeleteResponse = "WebhookTargetDeleteResponse";
        public const string WebhookTargetEnableResponse = "WebhookTargetEnableResponse";
        public const string WebhookTargetEventFilter = "WebhookTargetEventFilter";
        public const string WebhookTargetHttpTarget = "WebhookTargetHTTPTarget";
        public const string WebhookTargetJsonExpressionFilter = "WebhookTargetJsonExpressionFilter";
        public const string WebhookTargetMetadataEntry = "WebhookTargetMetadataEntry";
        public const string WebhookTargetTimeseriesFilter = "WebhookTargetTimeseriesFilter";
        public const string WebhookTargetUpdateResponse = "WebhookTargetUpdateResponse";
        public const string WorkOrder = "WorkOrder";
        public const string Zone = "Zone";

        public const string AccessCredentialFilter = "AccessCredentialFilter";
        public const string AccountFilter = "AccountFilter";
        public const string AddressMutationInput = "AddressMutationInput";
        public const string AgentFilter = "AgentFilter";
        public const string ApiKeyInput = "APIKeyInput";
        public const string AuthInput = "AuthInput";
        public const string BasicAuthInput = "BasicAuthInput";
        public const string BodyValueLocationInput = "BodyValueLocationInput";
        public const string BoolFilterExpressionInput = "BoolFilterExpressionInput";
        public const string BuildingCreateRequestInput = "BuildingCreateRequestInput";
        public const string BuildingDeleteRequestInput = "BuildingDeleteRequestInput";
        public const string BuildingFilter = "BuildingFilter";
        public const string BuildingMutationInput = "BuildingMutationInput";
        public const string BuildingUpdateRequestInput = "BuildingUpdateRequestInput";
        public const string CalendarEventFilter = "CalendarEventFilter";
        public const string CalendarInvitationFilter = "CalendarInvitationFilter";
        public const string CalendarInvitationResponseFilterExpressionInput = "CalendarInvitationResponseFilterExpressionInput";
        public const string CertificateAuthorityBundleInput = "CertificateAuthorityBundleInput";
        public const string CertificateInput = "CertificateInput";
        public const string CertMatchInput = "CertMatchInput";
        public const string CollectionFilter = "CollectionFilter";
        public const string ConnectorAuthAccessRequestInput = "ConnectorAuthAccessRequestInput";
        public const string ConnectorAuthCreateRequestInput = "ConnectorAuthCreateRequestInput";
        public const string ConnectorAuthDeleteRequestInput = "ConnectorAuthDeleteRequestInput";
        public const string ConnectorAuthInput = "ConnectorAuthInput";
        public const string ConnectorAuthRequestSecretInput = "ConnectorAuthRequestSecretInput";
        public const string ConnectorAuthStaticTokenInput = "ConnectorAuthStaticTokenInput";
        public const string ConnectorAuthUpdateRequestInput = "ConnectorAuthUpdateRequestInput";
        public const string ConnectorAuthUsernamePasswordInput = "ConnectorAuthUsernamePasswordInput";
        public const string ConnectorCreateRequestInput = "ConnectorCreateRequestInput";
        public const string ConnectorDeleteRequestInput = "ConnectorDeleteRequestInput";
        public const string ConnectorFilterInput = "ConnectorFilterInput";
        public const string ConnectorInput = "ConnectorInput";
        public const string ConnectorRequestCreateRequestInput = "ConnectorRequestCreateRequestInput";
        public const string ConnectorRestartRequestInput = "ConnectorRestartRequestInput";
        public const string ConnectorStartRequestInput = "ConnectorStartRequestInput";
        public const string ConnectorStopRequestInput = "ConnectorStopRequestInput";
        public const string ConnectorTypeConnectorDirectionFilterExpressionInput = "ConnectorTypeConnectorDirectionFilterExpressionInput";
        public const string ConnectorTypeFilterInput = "ConnectorTypeFilterInput";
        public const string ConnectorTypeRuntimeVersionFilterExpressionInput = "ConnectorTypeRuntimeVersionFilterExpressionInput";
        public const string ConnectorUpdateRequestInput = "ConnectorUpdateRequestInput";
        public const string ConnectorUpsertConfigRequestInput = "ConnectorUpsertConfigRequestInput";
        public const string ContributionRequestCreateRequestInput = "ContributionRequestCreateRequestInput";
        public const string ContributionRequestInput = "ContributionRequestInput";
        public const string ContributionRequestPropertyValuesInput = "ContributionRequestPropertyValuesInput";
        public const string ContributionRequestTargetEntityInput = "ContributionRequestTargetEntityInput";
        public const string DateTimeFilterExpressionInput = "DateTimeFilterExpressionInput";
        public const string DeviceModelFilter = "DeviceModelFilter";
        public const string DurationInput = "DurationInput";
        public const string EdgeDirectionFilterExpressionInput = "EdgeDirectionFilterExpressionInput";
        public const string EdgeFilter = "EdgeFilter";
        public const string EmailFilter = "EmailFilter";
        public const string EntityFilter = "EntityFilter";
        public const string FloorCreateRequestInput = "FloorCreateRequestInput";
        public const string FloorDeleteRequestInput = "FloorDeleteRequestInput";
        public const string FloorFilter = "FloorFilter";
        public const string FloorMutationInput = "FloorMutationInput";
        public const string FloorUpdateRequestInput = "FloorUpdateRequestInput";
        public const string GatewayAssignmentDetailsInput = "GatewayAssignmentDetailsInput";
        public const string GatewayAssignRequestInput = "GatewayAssignRequestInput";
        public const string GatewayFilterInput = "GatewayFilterInput";
        public const string GatewayGenerateContainerSiDsRequestInput = "GatewayGenerateContainerSIDsRequestInput";
        public const string GatewayLifecycleStateFilterExpressionInput = "GatewayLifecycleStateFilterExpressionInput";
        public const string GatewayModelFilterExpressionInput = "GatewayModelFilterExpressionInput";
        public const string GatewayNoteInput = "GatewayNoteInput";
        public const string GatewayRegisterContainerRequestInput = "GatewayRegisterContainerRequestInput";
        public const string GatewaySuspendRequestInput = "GatewaySuspendRequestInput";
        public const string GatewaySuspensionDetailsInput = "GatewaySuspensionDetailsInput";
        public const string GatewaySystemTypeFilterExpressionInput = "GatewaySystemTypeFilterExpressionInput";
        public const string GrantCreateRequestInput = "GrantCreateRequestInput";
        public const string GrantDeleteRequestInput = "GrantDeleteRequestInput";
        public const string GrantFilterInput = "GrantFilterInput";
        public const string GrantPlacesAndTypesInput = "GrantPlacesAndTypesInput";
        public const string GrantRequestInput = "GrantRequestInput";
        public const string GrantStateFilterExpressionInput = "GrantStateFilterExpressionInput";
        public const string GrantUpdateRequestInput = "GrantUpdateRequestInput";
        public const string GranularInput = "GranularInput";
        public const string GrpcRequestOptions = "GRPCRequestOptions";
        public const string HeartbeatFilter = "HeartbeatFilter";
        public const string Hmac256Input = "HMAC256Input";
        public const string HttpMethodWrapperInput = "HTTPMethodWrapperInput";
        public const string IdFilterExpressionInput = "IDFilterExpressionInput";
        public const string IntFilterExpressionInput = "IntFilterExpressionInput";
        public const string InviteCreateRequestInput = "InviteCreateRequestInput";
        public const string InviteDeleteRequestInput = "InviteDeleteRequestInput";
        public const string InviteFilterInput = "InviteFilterInput";
        public const string InviteInput = "InviteInput";
        public const string InviteStatusFilterExpressionInput = "InviteStatusFilterExpressionInput";
        public const string InviteUpdateRequestInput = "InviteUpdateRequestInput";
        public const string IpAllowlistMatchInput = "IPAllowlistMatchInput";
        public const string LeaseFilter = "LeaseFilter";
        public const string LiveQueryCreateRequestInput = "LiveQueryCreateRequestInput";
        public const string LiveQueryDeleteRequestInput = "LiveQueryDeleteRequestInput";
        public const string LiveQueryFilterInput = "LiveQueryFilterInput";
        public const string LiveQueryInput = "LiveQueryInput";
        public const string LiveQueryPauseRequestInput = "LiveQueryPauseRequestInput";
        public const string LiveQueryResumeRequestInput = "LiveQueryResumeRequestInput";
        public const string LiveQueryStatusFilterExpressionInput = "LiveQueryStatusFilterExpressionInput";
        public const string LiveQueryUpdateInput = "LiveQueryUpdateInput";
        public const string LiveQueryUpdateRequestInput = "LiveQueryUpdateRequestInput";
        public const string MatchInput = "MatchInput";
        public const string MetadataRecordInput = "MetadataRecordInput";
        public const string MetadataUpdateInput = "MetadataUpdateInput";
        public const string MetadataValueInput = "MetadataValueInput";
        public const string MtlsMatchInput = "MTLSMatchInput";
        public const string NodesMapping = "NodesMapping";
        public const string OAuth2ClientCredentialsFlowInput = "OAuth2ClientCredentialsFlowInput";
        public const string OrganizationFilter = "OrganizationFilter";
        public const string OrgAuthenticationChallengeGranularInput = "OrgAuthenticationChallengeGranularInput";
        public const string OrgAuthenticationChallengeInput = "OrgAuthenticationChallengeInput";
        public const string OrgGranularInput = "OrgGranularInput";
        public const string OrgInput = "OrgInput";
        public const string OrgProvisioningStateWrapperInput = "OrgProvisioningStateWrapperInput";
        public const string OrgRemoveOrgUserAsyncRequestInput = "OrgRemoveOrgUserAsyncRequestInput";
        public const string OrgRoleGroupCreateRequestInput = "OrgRoleGroupCreateRequestInput";
        public const string OrgRoleGroupDeleteRequestInput = "OrgRoleGroupDeleteRequestInput";
        public const string OrgRoleGroupFilterInput = "OrgRoleGroupFilterInput";
        public const string OrgRoleGroupInput = "OrgRoleGroupInput";
        public const string OrgRoleGroupStateFilterExpressionInput = "OrgRoleGroupStateFilterExpressionInput";
        public const string OrgRoleGroupStateValueInput = "OrgRoleGroupStateValueInput";
        public const string OrgRoleGroupUpdateInput = "OrgRoleGroupUpdateInput";
        public const string OrgRoleGroupUpdateRequestInput = "OrgRoleGroupUpdateRequestInput";
        public const string OrgServiceAccountCreateRequestInput = "OrgServiceAccountCreateRequestInput";
        public const string OrgServiceAccountCreateSecretRequestInput = "OrgServiceAccountCreateSecretRequestInput";
        public const string OrgServiceAccountCustomRoleInput = "OrgServiceAccountCustomRoleInput";
        public const string OrgServiceAccountCustomRoleUpdateInput = "OrgServiceAccountCustomRoleUpdateInput";
        public const string OrgServiceAccountDeleteRequestInput = "OrgServiceAccountDeleteRequestInput";
        public const string OrgServiceAccountDeleteSecretsRequestInput = "OrgServiceAccountDeleteSecretsRequestInput";
        public const string OrgServiceAccountFilterInput = "OrgServiceAccountFilterInput";
        public const string OrgServiceAccountInput = "OrgServiceAccountInput";
        public const string OrgServiceAccountOneOfAllInput = "OrgServiceAccountOneOfAllInput";
        public const string OrgServiceAccountOneOfSecretsGranularInput = "OrgServiceAccountOneOfSecretsGranularInput";
        public const string OrgServiceAccountStateFilterExpressionInput = "OrgServiceAccountStateFilterExpressionInput";
        public const string OrgServiceAccountStateValueInput = "OrgServiceAccountStateValueInput";
        public const string OrgServiceAccountUpdateInput = "OrgServiceAccountUpdateInput";
        public const string OrgServiceAccountUpdateRequestInput = "OrgServiceAccountUpdateRequestInput";
        public const string OrgStateWrapperInput = "OrgStateWrapperInput";
        public const string OrgUpdateRequestInput = "OrgUpdateRequestInput";
        public const string OrgUpdateV2RequestInput = "OrgUpdateV2RequestInput";
        public const string OrgUserInput = "OrgUserInput";
        public const string PeopleGroupFilter = "PeopleGroupFilter";
        public const string PermissionFilterExpressionInput = "PermissionFilterExpressionInput";
        public const string PersonalAccessTokenCreateRequestInput = "PersonalAccessTokenCreateRequestInput";
        public const string PersonalAccessTokenDeleteRequestInput = "PersonalAccessTokenDeleteRequestInput";
        public const string PersonalAccessTokenFilterInput = "PersonalAccessTokenFilterInput";
        public const string PersonalAccessTokenGetAccessTokenFromPatRequestInput = "PersonalAccessTokenGetAccessTokenFromPATRequestInput";
        public const string PersonalAccessTokenInput = "PersonalAccessTokenInput";
        public const string PersonalAccessTokenUpdateRequestInput = "PersonalAccessTokenUpdateRequestInput";
        public const string PersonFilter = "PersonFilter";
        public const string PlaceFilter = "PlaceFilter";
        public const string PointFilter = "PointFilter";
        public const string PostalAddressInput = "PostalAddressInput";
        public const string RegexMatchInput = "RegexMatchInput";
        public const string RoleManagerFilterInput = "RoleManagerFilterInput";
        public const string RoleManagerRoleStateFilterExpressionInput = "RoleManagerRoleStateFilterExpressionInput";
        public const string RoleManagerRoleTypeFilterExpressionInput = "RoleManagerRoleTypeFilterExpressionInput";
        public const string SignatureMatchInput = "SignatureMatchInput";
        public const string SimpleBoolFilterExpressionInput = "SimpleBoolFilterExpressionInput";
        public const string SiteCreateRequestInput = "SiteCreateRequestInput";
        public const string SiteDeleteRequestInput = "SiteDeleteRequestInput";
        public const string SiteFilter = "SiteFilter";
        public const string SiteMutationInput = "SiteMutationInput";
        public const string SiteUpdateRequestInput = "SiteUpdateRequestInput";
        public const string SpaceCreateRequestInput = "SpaceCreateRequestInput";
        public const string SpaceDeleteRequestInput = "SpaceDeleteRequestInput";
        public const string SpaceFilter = "SpaceFilter";
        public const string SpaceMappingSuggestEquivalentSpacesRequestInput = "SpaceMappingSuggestEquivalentSpacesRequestInput";
        public const string SpaceMappingSuggestFloorLevelsRequestInput = "SpaceMappingSuggestFloorLevelsRequestInput";
        public const string SpaceMappingSuggestSpaceCodesRequestInput = "SpaceMappingSuggestSpaceCodesRequestInput";
        public const string SpaceMutationInput = "SpaceMutationInput";
        public const string SpaceUpdateRequestInput = "SpaceUpdateRequestInput";
        public const string StringArrayFilterExpressionInput = "StringArrayFilterExpressionInput";
        public const string StringArrayUpdateInput = "StringArrayUpdateInput";
        public const string StringArrayValueInput = "StringArrayValueInput";
        public const string StringFilterExpressionInput = "StringFilterExpressionInput";
        public const string SystemTypeFilterExpressionInput = "SystemTypeFilterExpressionInput";
        public const string ThingFilter = "ThingFilter";
        public const string TimestampFilterExpressionInput = "TimestampFilterExpressionInput";
        public const string UnitFilterInput = "UnitFilterInput";
        public const string UserAssignRoleRequestInput = "UserAssignRoleRequestInput";
        public const string UserCreateRequestInput = "UserCreateRequestInput";
        public const string UserFilterInput = "UserFilterInput";
        public const string UserInput = "UserInput";
        public const string UserRemoveOrgMembershipRequestInput = "UserRemoveOrgMembershipRequestInput";
        public const string UserRemoveRoleRequestInput = "UserRemoveRoleRequestInput";
        public const string UserUpdateRequestInput = "UserUpdateRequestInput";
        public const string ValueLocationInput = "ValueLocationInput";
        public const string ValueMatchInput = "ValueMatchInput";
        public const string WebhookReceiverCentrifugoDestinationInput = "WebhookReceiverCentrifugoDestinationInput";
        public const string WebhookReceiverCorsOptionsInput = "WebhookReceiverCORSOptionsInput";
        public const string WebhookReceiverDeleteRequestInput = "WebhookReceiverDeleteRequestInput";
        public const string WebhookReceiverDestinationInput = "WebhookReceiverDestinationInput";
        public const string WebhookReceiverInput = "WebhookReceiverInput";
        public const string WebhookReceiverKafkaDestinationInput = "WebhookReceiverKafkaDestinationInput";
        public const string WebhookReceiverResponseHeadersEntryInput = "WebhookReceiverResponseHeadersEntryInput";
        public const string WebhookReceiverTemporalExecuteWorkflowDestinationInput = "WebhookReceiverTemporalExecuteWorkflowDestinationInput";
        public const string WebhookReceiverTemporalSignalWorkfowDestinationInput = "WebhookReceiverTemporalSignalWorkfowDestinationInput";
        public const string WebhookReceiverUpsertRequestInput = "WebhookReceiverUpsertRequestInput";
        public const string WebhookTargetAuthInput = "WebhookTargetAuthInput";
        public const string WebhookTargetCloudEventBatchedContentModeConfigInput = "WebhookTargetCloudEventBatchedContentModeConfigInput";
        public const string WebhookTargetCloudEventContentModeWrapperInput = "WebhookTargetCloudEventContentModeWrapperInput";
        public const string WebhookTargetCloudEventFilterInput = "WebhookTargetCloudEventFilterInput";
        public const string WebhookTargetCreateInput = "WebhookTargetCreateInput";
        public const string WebhookTargetCreateRequestInput = "WebhookTargetCreateRequestInput";
        public const string WebhookTargetDeleteRequestInput = "WebhookTargetDeleteRequestInput";
        public const string WebhookTargetEnableRequestInput = "WebhookTargetEnableRequestInput";
        public const string WebhookTargetEventFilterInput = "WebhookTargetEventFilterInput";
        public const string WebhookTargetEventFilterTypeExpressionInput = "WebhookTargetEventFilterTypeExpressionInput";
        public const string WebhookTargetFilterInput = "WebhookTargetFilterInput";
        public const string WebhookTargetHttpTargetGranularInput = "WebhookTargetHTTPTargetGranularInput";
        public const string WebhookTargetHttpTargetInput = "WebhookTargetHTTPTargetInput";
        public const string WebhookTargetHttpTargetUpdateInput = "WebhookTargetHTTPTargetUpdateInput";
        public const string WebhookTargetJsonExpressionFilterInput = "WebhookTargetJsonExpressionFilterInput";
        public const string WebhookTargetTargetTypeExpressionInput = "WebhookTargetTargetTypeExpressionInput";
        public const string WebhookTargetTimeseriesFilterInput = "WebhookTargetTimeseriesFilterInput";
        public const string WebhookTargetUpdateInput = "WebhookTargetUpdateInput";
        public const string WebhookTargetUpdateRequestInput = "WebhookTargetUpdateRequestInput";
        public const string WorkOrderFilter = "WorkOrderFilter";
        public const string ZoneFilter = "ZoneFilter";

        public const string AccessCredentialIdentityUnion = "AccessCredentialIdentityUnion";
        public const string AccountIdentityUnion = "AccountIdentityUnion";
        public const string AgentIdentityUnion = "AgentIdentityUnion";
        public const string BuildingIdentityUnion = "BuildingIdentityUnion";
        public const string CalendarEventIdentityUnion = "CalendarEventIdentityUnion";
        public const string CalendarInvitationIdentityUnion = "CalendarInvitationIdentityUnion";
        public const string CalendarInvitee = "CalendarInvitee";
        public const string CollectionIdentityUnion = "CollectionIdentityUnion";
        public const string DeviceModelIdentityUnion = "DeviceModelIdentityUnion";
        public const string EmailAddressIdentityUnion = "EmailAddressIdentityUnion";
        public const string FeedsUnion = "FeedsUnion";
        public const string FloorIdentityUnion = "FloorIdentityUnion";
        public const string GenericPlaceIdentityUnion = "GenericPlaceIdentityUnion";
        public const string HasPartUnion = "HasPartUnion";
        public const string HeartbeatIdentityUnion = "HeartbeatIdentityUnion";
        public const string IsFedByUnion = "IsFedByUnion";
        public const string IsLocationOfUnion = "IsLocationOfUnion";
        public const string IsPointOfUnion = "IsPointOfUnion";
        public const string LeaseIdentityUnion = "LeaseIdentityUnion";
        public const string OrganizationIdentityUnion = "OrganizationIdentityUnion";
        public const string PeopleGroupIdentityUnion = "PeopleGroupIdentityUnion";
        public const string PersonIdentityUnion = "PersonIdentityUnion";
        public const string PointIdentityUnion = "PointIdentityUnion";
        public const string RelatesToUnion = "RelatesToUnion";
        public const string ServesUnion = "ServesUnion";
        public const string SiteIdentityUnion = "SiteIdentityUnion";
        public const string SpaceIdentityUnion = "SpaceIdentityUnion";
        public const string SubBuildingIdentityUnion = "SubBuildingIdentityUnion";
        public const string ThingIdentityUnion = "ThingIdentityUnion";
        public const string WorkOrderIdentityUnion = "WorkOrderIdentityUnion";
        public const string ZoneIdentityUnion = "ZoneIdentityUnion";

        public const string AccessCredentialIdentityModel = "AccessCredentialIdentityModel";
        public const string BaCnetObjectIdModel = "BACnetObjectIdModel";
        public const string BaCnetVendorIdModel = "BACnetVendorIdModel";
        public const string Edge = "Edge";
        public const string EmailAddressIdentityModel = "EmailAddressIdentityModel";
        public const string EmailIdentityModel = "EmailIdentityModel";
        public const string Event = "Event";
        public const string ExternalIdentityModel = "ExternalIdentityModel";
        public const string FloorLevelIdentityModel = "FloorLevelIdentityModel";
        public const string GraphNode = "GraphNode";
        public const string Identity = "Identity";
        public const string NameIdentityModel = "NameIdentityModel";
        public const string Place = "Place";
        public const string PostalAddressIdentityModel = "PostalAddressIdentityModel";
        public const string SpaceCodeModel = "SpaceCodeModel";
        public const string ThingContainer = "ThingContainer";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(string), "String" },
                { typeof(bool), "Boolean" },
                { typeof(int), "Int" },
                { typeof(decimal), "Float" },
                { typeof(DateTimeOffset), "DateTime" },
                { typeof(AccessCredentialFilter), "AccessCredentialFilter" },
                { typeof(AccountFilter), "AccountFilter" },
                { typeof(AddressMutationInput), "AddressMutationInput" },
                { typeof(AgentFilter), "AgentFilter" },
                { typeof(ApiKeyInput), "APIKeyInput" },
                { typeof(AuthInput), "AuthInput" },
                { typeof(BasicAuthInput), "BasicAuthInput" },
                { typeof(BodyValueLocationInput), "BodyValueLocationInput" },
                { typeof(BoolFilterExpressionInput), "BoolFilterExpressionInput" },
                { typeof(BuildingCreateRequestInput), "BuildingCreateRequestInput" },
                { typeof(BuildingDeleteRequestInput), "BuildingDeleteRequestInput" },
                { typeof(BuildingFilter), "BuildingFilter" },
                { typeof(BuildingMutationInput), "BuildingMutationInput" },
                { typeof(BuildingUpdateRequestInput), "BuildingUpdateRequestInput" },
                { typeof(CalendarEventFilter), "CalendarEventFilter" },
                { typeof(CalendarInvitationFilter), "CalendarInvitationFilter" },
                { typeof(CalendarInvitationResponseFilterExpressionInput), "CalendarInvitationResponseFilterExpressionInput" },
                { typeof(CertificateAuthorityBundleInput), "CertificateAuthorityBundleInput" },
                { typeof(CertificateInput), "CertificateInput" },
                { typeof(CertMatchInput), "CertMatchInput" },
                { typeof(CollectionFilter), "CollectionFilter" },
                { typeof(ConnectorAuthAccessRequestInput), "ConnectorAuthAccessRequestInput" },
                { typeof(ConnectorAuthCreateRequestInput), "ConnectorAuthCreateRequestInput" },
                { typeof(ConnectorAuthDeleteRequestInput), "ConnectorAuthDeleteRequestInput" },
                { typeof(ConnectorAuthInput), "ConnectorAuthInput" },
                { typeof(ConnectorAuthRequestSecretInput), "ConnectorAuthRequestSecretInput" },
                { typeof(ConnectorAuthStaticTokenInput), "ConnectorAuthStaticTokenInput" },
                { typeof(ConnectorAuthUpdateRequestInput), "ConnectorAuthUpdateRequestInput" },
                { typeof(ConnectorAuthUsernamePasswordInput), "ConnectorAuthUsernamePasswordInput" },
                { typeof(ConnectorCreateRequestInput), "ConnectorCreateRequestInput" },
                { typeof(ConnectorDeleteRequestInput), "ConnectorDeleteRequestInput" },
                { typeof(ConnectorFilterInput), "ConnectorFilterInput" },
                { typeof(ConnectorInput), "ConnectorInput" },
                { typeof(ConnectorRequestCreateRequestInput), "ConnectorRequestCreateRequestInput" },
                { typeof(ConnectorRestartRequestInput), "ConnectorRestartRequestInput" },
                { typeof(ConnectorStartRequestInput), "ConnectorStartRequestInput" },
                { typeof(ConnectorStopRequestInput), "ConnectorStopRequestInput" },
                { typeof(ConnectorTypeConnectorDirectionFilterExpressionInput), "ConnectorTypeConnectorDirectionFilterExpressionInput" },
                { typeof(ConnectorTypeFilterInput), "ConnectorTypeFilterInput" },
                { typeof(ConnectorTypeRuntimeVersionFilterExpressionInput), "ConnectorTypeRuntimeVersionFilterExpressionInput" },
                { typeof(ConnectorUpdateRequestInput), "ConnectorUpdateRequestInput" },
                { typeof(ConnectorUpsertConfigRequestInput), "ConnectorUpsertConfigRequestInput" },
                { typeof(ContributionRequestCreateRequestInput), "ContributionRequestCreateRequestInput" },
                { typeof(ContributionRequestInput), "ContributionRequestInput" },
                { typeof(ContributionRequestPropertyValuesInput), "ContributionRequestPropertyValuesInput" },
                { typeof(ContributionRequestTargetEntityInput), "ContributionRequestTargetEntityInput" },
                { typeof(DateTimeFilterExpressionInput), "DateTimeFilterExpressionInput" },
                { typeof(DeviceModelFilter), "DeviceModelFilter" },
                { typeof(DurationInput), "DurationInput" },
                { typeof(EdgeDirectionFilterExpressionInput), "EdgeDirectionFilterExpressionInput" },
                { typeof(EdgeFilter), "EdgeFilter" },
                { typeof(EmailFilter), "EmailFilter" },
                { typeof(EntityFilter), "EntityFilter" },
                { typeof(FloorCreateRequestInput), "FloorCreateRequestInput" },
                { typeof(FloorDeleteRequestInput), "FloorDeleteRequestInput" },
                { typeof(FloorFilter), "FloorFilter" },
                { typeof(FloorMutationInput), "FloorMutationInput" },
                { typeof(FloorUpdateRequestInput), "FloorUpdateRequestInput" },
                { typeof(GatewayAssignmentDetailsInput), "GatewayAssignmentDetailsInput" },
                { typeof(GatewayAssignRequestInput), "GatewayAssignRequestInput" },
                { typeof(GatewayFilterInput), "GatewayFilterInput" },
                { typeof(GatewayGenerateContainerSiDsRequestInput), "GatewayGenerateContainerSIDsRequestInput" },
                { typeof(GatewayLifecycleStateFilterExpressionInput), "GatewayLifecycleStateFilterExpressionInput" },
                { typeof(GatewayModelFilterExpressionInput), "GatewayModelFilterExpressionInput" },
                { typeof(GatewayNoteInput), "GatewayNoteInput" },
                { typeof(GatewayRegisterContainerRequestInput), "GatewayRegisterContainerRequestInput" },
                { typeof(GatewaySuspendRequestInput), "GatewaySuspendRequestInput" },
                { typeof(GatewaySuspensionDetailsInput), "GatewaySuspensionDetailsInput" },
                { typeof(GatewaySystemTypeFilterExpressionInput), "GatewaySystemTypeFilterExpressionInput" },
                { typeof(GrantCreateRequestInput), "GrantCreateRequestInput" },
                { typeof(GrantDeleteRequestInput), "GrantDeleteRequestInput" },
                { typeof(GrantFilterInput), "GrantFilterInput" },
                { typeof(GrantPlacesAndTypesInput), "GrantPlacesAndTypesInput" },
                { typeof(GrantRequestInput), "GrantRequestInput" },
                { typeof(GrantStateFilterExpressionInput), "GrantStateFilterExpressionInput" },
                { typeof(GrantUpdateRequestInput), "GrantUpdateRequestInput" },
                { typeof(GranularInput), "GranularInput" },
                { typeof(GrpcRequestOptions), "GRPCRequestOptions" },
                { typeof(HeartbeatFilter), "HeartbeatFilter" },
                { typeof(Hmac256Input), "HMAC256Input" },
                { typeof(HttpMethodWrapperInput), "HTTPMethodWrapperInput" },
                { typeof(IdFilterExpressionInput), "IDFilterExpressionInput" },
                { typeof(IntFilterExpressionInput), "IntFilterExpressionInput" },
                { typeof(InviteCreateRequestInput), "InviteCreateRequestInput" },
                { typeof(InviteDeleteRequestInput), "InviteDeleteRequestInput" },
                { typeof(InviteFilterInput), "InviteFilterInput" },
                { typeof(InviteInput), "InviteInput" },
                { typeof(InviteStatusFilterExpressionInput), "InviteStatusFilterExpressionInput" },
                { typeof(InviteUpdateRequestInput), "InviteUpdateRequestInput" },
                { typeof(IpAllowlistMatchInput), "IPAllowlistMatchInput" },
                { typeof(LeaseFilter), "LeaseFilter" },
                { typeof(LiveQueryCreateRequestInput), "LiveQueryCreateRequestInput" },
                { typeof(LiveQueryDeleteRequestInput), "LiveQueryDeleteRequestInput" },
                { typeof(LiveQueryFilterInput), "LiveQueryFilterInput" },
                { typeof(LiveQueryInput), "LiveQueryInput" },
                { typeof(LiveQueryPauseRequestInput), "LiveQueryPauseRequestInput" },
                { typeof(LiveQueryResumeRequestInput), "LiveQueryResumeRequestInput" },
                { typeof(LiveQueryStatusFilterExpressionInput), "LiveQueryStatusFilterExpressionInput" },
                { typeof(LiveQueryUpdateInput), "LiveQueryUpdateInput" },
                { typeof(LiveQueryUpdateRequestInput), "LiveQueryUpdateRequestInput" },
                { typeof(MatchInput), "MatchInput" },
                { typeof(MetadataRecordInput), "MetadataRecordInput" },
                { typeof(MetadataUpdateInput), "MetadataUpdateInput" },
                { typeof(MetadataValueInput), "MetadataValueInput" },
                { typeof(MtlsMatchInput), "MTLSMatchInput" },
                { typeof(NodesMapping), "NodesMapping" },
                { typeof(OAuth2ClientCredentialsFlowInput), "OAuth2ClientCredentialsFlowInput" },
                { typeof(OrganizationFilter), "OrganizationFilter" },
                { typeof(OrgAuthenticationChallengeGranularInput), "OrgAuthenticationChallengeGranularInput" },
                { typeof(OrgAuthenticationChallengeInput), "OrgAuthenticationChallengeInput" },
                { typeof(OrgGranularInput), "OrgGranularInput" },
                { typeof(OrgInput), "OrgInput" },
                { typeof(OrgProvisioningStateWrapperInput), "OrgProvisioningStateWrapperInput" },
                { typeof(OrgRemoveOrgUserAsyncRequestInput), "OrgRemoveOrgUserAsyncRequestInput" },
                { typeof(OrgRoleGroupCreateRequestInput), "OrgRoleGroupCreateRequestInput" },
                { typeof(OrgRoleGroupDeleteRequestInput), "OrgRoleGroupDeleteRequestInput" },
                { typeof(OrgRoleGroupFilterInput), "OrgRoleGroupFilterInput" },
                { typeof(OrgRoleGroupInput), "OrgRoleGroupInput" },
                { typeof(OrgRoleGroupStateFilterExpressionInput), "OrgRoleGroupStateFilterExpressionInput" },
                { typeof(OrgRoleGroupStateValueInput), "OrgRoleGroupStateValueInput" },
                { typeof(OrgRoleGroupUpdateInput), "OrgRoleGroupUpdateInput" },
                { typeof(OrgRoleGroupUpdateRequestInput), "OrgRoleGroupUpdateRequestInput" },
                { typeof(OrgServiceAccountCreateRequestInput), "OrgServiceAccountCreateRequestInput" },
                { typeof(OrgServiceAccountCreateSecretRequestInput), "OrgServiceAccountCreateSecretRequestInput" },
                { typeof(OrgServiceAccountCustomRoleInput), "OrgServiceAccountCustomRoleInput" },
                { typeof(OrgServiceAccountCustomRoleUpdateInput), "OrgServiceAccountCustomRoleUpdateInput" },
                { typeof(OrgServiceAccountDeleteRequestInput), "OrgServiceAccountDeleteRequestInput" },
                { typeof(OrgServiceAccountDeleteSecretsRequestInput), "OrgServiceAccountDeleteSecretsRequestInput" },
                { typeof(OrgServiceAccountFilterInput), "OrgServiceAccountFilterInput" },
                { typeof(OrgServiceAccountInput), "OrgServiceAccountInput" },
                { typeof(OrgServiceAccountOneOfAllInput), "OrgServiceAccountOneOfAllInput" },
                { typeof(OrgServiceAccountOneOfSecretsGranularInput), "OrgServiceAccountOneOfSecretsGranularInput" },
                { typeof(OrgServiceAccountStateFilterExpressionInput), "OrgServiceAccountStateFilterExpressionInput" },
                { typeof(OrgServiceAccountStateValueInput), "OrgServiceAccountStateValueInput" },
                { typeof(OrgServiceAccountUpdateInput), "OrgServiceAccountUpdateInput" },
                { typeof(OrgServiceAccountUpdateRequestInput), "OrgServiceAccountUpdateRequestInput" },
                { typeof(OrgStateWrapperInput), "OrgStateWrapperInput" },
                { typeof(OrgUpdateRequestInput), "OrgUpdateRequestInput" },
                { typeof(OrgUpdateV2RequestInput), "OrgUpdateV2RequestInput" },
                { typeof(OrgUserInput), "OrgUserInput" },
                { typeof(PeopleGroupFilter), "PeopleGroupFilter" },
                { typeof(PermissionFilterExpressionInput), "PermissionFilterExpressionInput" },
                { typeof(PersonalAccessTokenCreateRequestInput), "PersonalAccessTokenCreateRequestInput" },
                { typeof(PersonalAccessTokenDeleteRequestInput), "PersonalAccessTokenDeleteRequestInput" },
                { typeof(PersonalAccessTokenFilterInput), "PersonalAccessTokenFilterInput" },
                { typeof(PersonalAccessTokenGetAccessTokenFromPatRequestInput), "PersonalAccessTokenGetAccessTokenFromPATRequestInput" },
                { typeof(PersonalAccessTokenInput), "PersonalAccessTokenInput" },
                { typeof(PersonalAccessTokenUpdateRequestInput), "PersonalAccessTokenUpdateRequestInput" },
                { typeof(PersonFilter), "PersonFilter" },
                { typeof(PlaceFilter), "PlaceFilter" },
                { typeof(PointFilter), "PointFilter" },
                { typeof(PostalAddressInput), "PostalAddressInput" },
                { typeof(RegexMatchInput), "RegexMatchInput" },
                { typeof(RoleManagerFilterInput), "RoleManagerFilterInput" },
                { typeof(RoleManagerRoleStateFilterExpressionInput), "RoleManagerRoleStateFilterExpressionInput" },
                { typeof(RoleManagerRoleTypeFilterExpressionInput), "RoleManagerRoleTypeFilterExpressionInput" },
                { typeof(SignatureMatchInput), "SignatureMatchInput" },
                { typeof(SimpleBoolFilterExpressionInput), "SimpleBoolFilterExpressionInput" },
                { typeof(SiteCreateRequestInput), "SiteCreateRequestInput" },
                { typeof(SiteDeleteRequestInput), "SiteDeleteRequestInput" },
                { typeof(SiteFilter), "SiteFilter" },
                { typeof(SiteMutationInput), "SiteMutationInput" },
                { typeof(SiteUpdateRequestInput), "SiteUpdateRequestInput" },
                { typeof(SpaceCreateRequestInput), "SpaceCreateRequestInput" },
                { typeof(SpaceDeleteRequestInput), "SpaceDeleteRequestInput" },
                { typeof(SpaceFilter), "SpaceFilter" },
                { typeof(SpaceMappingSuggestEquivalentSpacesRequestInput), "SpaceMappingSuggestEquivalentSpacesRequestInput" },
                { typeof(SpaceMappingSuggestFloorLevelsRequestInput), "SpaceMappingSuggestFloorLevelsRequestInput" },
                { typeof(SpaceMappingSuggestSpaceCodesRequestInput), "SpaceMappingSuggestSpaceCodesRequestInput" },
                { typeof(SpaceMutationInput), "SpaceMutationInput" },
                { typeof(SpaceUpdateRequestInput), "SpaceUpdateRequestInput" },
                { typeof(StringArrayFilterExpressionInput), "StringArrayFilterExpressionInput" },
                { typeof(StringArrayUpdateInput), "StringArrayUpdateInput" },
                { typeof(StringArrayValueInput), "StringArrayValueInput" },
                { typeof(StringFilterExpressionInput), "StringFilterExpressionInput" },
                { typeof(SystemTypeFilterExpressionInput), "SystemTypeFilterExpressionInput" },
                { typeof(ThingFilter), "ThingFilter" },
                { typeof(TimestampFilterExpressionInput), "TimestampFilterExpressionInput" },
                { typeof(UnitFilterInput), "UnitFilterInput" },
                { typeof(UserAssignRoleRequestInput), "UserAssignRoleRequestInput" },
                { typeof(UserCreateRequestInput), "UserCreateRequestInput" },
                { typeof(UserFilterInput), "UserFilterInput" },
                { typeof(UserInput), "UserInput" },
                { typeof(UserRemoveOrgMembershipRequestInput), "UserRemoveOrgMembershipRequestInput" },
                { typeof(UserRemoveRoleRequestInput), "UserRemoveRoleRequestInput" },
                { typeof(UserUpdateRequestInput), "UserUpdateRequestInput" },
                { typeof(ValueLocationInput), "ValueLocationInput" },
                { typeof(ValueMatchInput), "ValueMatchInput" },
                { typeof(WebhookReceiverCentrifugoDestinationInput), "WebhookReceiverCentrifugoDestinationInput" },
                { typeof(WebhookReceiverCorsOptionsInput), "WebhookReceiverCORSOptionsInput" },
                { typeof(WebhookReceiverDeleteRequestInput), "WebhookReceiverDeleteRequestInput" },
                { typeof(WebhookReceiverDestinationInput), "WebhookReceiverDestinationInput" },
                { typeof(WebhookReceiverInput), "WebhookReceiverInput" },
                { typeof(WebhookReceiverKafkaDestinationInput), "WebhookReceiverKafkaDestinationInput" },
                { typeof(WebhookReceiverResponseHeadersEntryInput), "WebhookReceiverResponseHeadersEntryInput" },
                { typeof(WebhookReceiverTemporalExecuteWorkflowDestinationInput), "WebhookReceiverTemporalExecuteWorkflowDestinationInput" },
                { typeof(WebhookReceiverTemporalSignalWorkfowDestinationInput), "WebhookReceiverTemporalSignalWorkfowDestinationInput" },
                { typeof(WebhookReceiverUpsertRequestInput), "WebhookReceiverUpsertRequestInput" },
                { typeof(WebhookTargetAuthInput), "WebhookTargetAuthInput" },
                { typeof(WebhookTargetCloudEventBatchedContentModeConfigInput), "WebhookTargetCloudEventBatchedContentModeConfigInput" },
                { typeof(WebhookTargetCloudEventContentModeWrapperInput), "WebhookTargetCloudEventContentModeWrapperInput" },
                { typeof(WebhookTargetCloudEventFilterInput), "WebhookTargetCloudEventFilterInput" },
                { typeof(WebhookTargetCreateInput), "WebhookTargetCreateInput" },
                { typeof(WebhookTargetCreateRequestInput), "WebhookTargetCreateRequestInput" },
                { typeof(WebhookTargetDeleteRequestInput), "WebhookTargetDeleteRequestInput" },
                { typeof(WebhookTargetEnableRequestInput), "WebhookTargetEnableRequestInput" },
                { typeof(WebhookTargetEventFilterInput), "WebhookTargetEventFilterInput" },
                { typeof(WebhookTargetEventFilterTypeExpressionInput), "WebhookTargetEventFilterTypeExpressionInput" },
                { typeof(WebhookTargetFilterInput), "WebhookTargetFilterInput" },
                { typeof(WebhookTargetHttpTargetGranularInput), "WebhookTargetHTTPTargetGranularInput" },
                { typeof(WebhookTargetHttpTargetInput), "WebhookTargetHTTPTargetInput" },
                { typeof(WebhookTargetHttpTargetUpdateInput), "WebhookTargetHTTPTargetUpdateInput" },
                { typeof(WebhookTargetJsonExpressionFilterInput), "WebhookTargetJsonExpressionFilterInput" },
                { typeof(WebhookTargetTargetTypeExpressionInput), "WebhookTargetTargetTypeExpressionInput" },
                { typeof(WebhookTargetTimeseriesFilterInput), "WebhookTargetTimeseriesFilterInput" },
                { typeof(WebhookTargetUpdateInput), "WebhookTargetUpdateInput" },
                { typeof(WebhookTargetUpdateRequestInput), "WebhookTargetUpdateRequestInput" },
                { typeof(WorkOrderFilter), "WorkOrderFilter" },
                { typeof(ZoneFilter), "ZoneFilter" }
            };
    }
    #endregion

    #region enums
    public enum AuthMode
    {
        [EnumMember(Value = "PAT")] Pat
    }

    public enum BundleState
    {
        [EnumMember(Value = "BUNDLE_STATE_ACTIVE")] BundleStateActive,
        [EnumMember(Value = "BUNDLE_STATE_ARCHIVED")] BundleStateArchived,
        [EnumMember(Value = "BUNDLE_STATE_UNSPECIFIED")] BundleStateUnspecified
    }

    public enum CalendarInvitationResponse
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DECLINED")] Declined,
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "TENTATIVE")] Tentative
    }

    public enum CertificateType
    {
        [EnumMember(Value = "CERTIFICATETYPE_UNSPECIFIED")] CertificatetypeUnspecified,
        [EnumMember(Value = "X509_CERT")] X509Cert,
        [EnumMember(Value = "X509_PKIX")] X509Pkix
    }

    public enum CertificateTypeInput
    {
        [EnumMember(Value = "CERTIFICATETYPE_UNSPECIFIED")] CertificatetypeUnspecified,
        [EnumMember(Value = "X509_CERT")] X509Cert,
        [EnumMember(Value = "X509_PKIX")] X509Pkix
    }

    public enum CloudEventSourceType
    {
        [EnumMember(Value = "CLOUDEVENTSOURCETYPE_UNSPECIFIED")] CloudeventsourcetypeUnspecified,
        [EnumMember(Value = "TIMESERIES_POINT")] TimeseriesPoint
    }

    public enum CloudEventSourceTypeInput
    {
        [EnumMember(Value = "CLOUDEVENTSOURCETYPE_UNSPECIFIED")] CloudeventsourcetypeUnspecified,
        [EnumMember(Value = "TIMESERIES_POINT")] TimeseriesPoint
    }

    public enum ConnectorState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "CONNECTING")] Connecting,
        [EnumMember(Value = "CONNECTOR_STATE_UNSPECIFIED")] ConnectorStateUnspecified,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "DELETING")] Deleting,
        [EnumMember(Value = "ERROR_GENERAL")] ErrorGeneral,
        [EnumMember(Value = "STOPPED")] Stopped,
        [EnumMember(Value = "STOPPING")] Stopping
    }

    public enum ConnectorStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "CONNECTING")] Connecting,
        [EnumMember(Value = "CONNECTOR_STATE_UNSPECIFIED")] ConnectorStateUnspecified,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "DELETING")] Deleting,
        [EnumMember(Value = "ERROR_GENERAL")] ErrorGeneral,
        [EnumMember(Value = "STOPPED")] Stopped,
        [EnumMember(Value = "STOPPING")] Stopping
    }

    public enum ConnectorTypeConnectorDirection
    {
        [EnumMember(Value = "CONNECTOR_DIRECTION_UNSPECIFIED")] ConnectorDirectionUnspecified,
        [EnumMember(Value = "DESTINATION")] Destination,
        [EnumMember(Value = "SOURCE")] Source
    }

    public enum ConnectorTypeConnectorDirectionInput
    {
        [EnumMember(Value = "CONNECTOR_DIRECTION_UNSPECIFIED")] ConnectorDirectionUnspecified,
        [EnumMember(Value = "DESTINATION")] Destination,
        [EnumMember(Value = "SOURCE")] Source
    }

    public enum ConnectorTypeRuntimeVersion
    {
        [EnumMember(Value = "RUNTIMEVERSION_UNSPECIFIED")] RuntimeversionUnspecified,
        V1,
        V2,
        V3
    }

    public enum ConnectorTypeRuntimeVersionInput
    {
        [EnumMember(Value = "RUNTIMEVERSION_UNSPECIFIED")] RuntimeversionUnspecified,
        V1,
        V2,
        V3
    }

    public enum ConnectorTypeWebhookReceiveStorage
    {
        [EnumMember(Value = "RECEIVESTORAGE_CENTRIFUGO_CHANNEL")] ReceivestorageCentrifugoChannel,
        [EnumMember(Value = "RECEIVESTORAGE_EXECUTE_WORKFLOW")] ReceivestorageExecuteWorkflow,
        [EnumMember(Value = "RECEIVESTORAGE_KAFKA_SHARED_TOPIC")] ReceivestorageKafkaSharedTopic,
        [EnumMember(Value = "RECEIVESTORAGE_KAFKA_TOPIC")] ReceivestorageKafkaTopic,
        [EnumMember(Value = "RECEIVESTORAGE_SIGNAL_WORKFLOW")] ReceivestorageSignalWorkflow,
        [EnumMember(Value = "RECEIVESTORAGE_UNSPECIFIED")] ReceivestorageUnspecified
    }

    public enum ConnectorTypeWebhookReceiveStorageInput
    {
        [EnumMember(Value = "RECEIVESTORAGE_CENTRIFUGO_CHANNEL")] ReceivestorageCentrifugoChannel,
        [EnumMember(Value = "RECEIVESTORAGE_EXECUTE_WORKFLOW")] ReceivestorageExecuteWorkflow,
        [EnumMember(Value = "RECEIVESTORAGE_KAFKA_SHARED_TOPIC")] ReceivestorageKafkaSharedTopic,
        [EnumMember(Value = "RECEIVESTORAGE_KAFKA_TOPIC")] ReceivestorageKafkaTopic,
        [EnumMember(Value = "RECEIVESTORAGE_SIGNAL_WORKFLOW")] ReceivestorageSignalWorkflow,
        [EnumMember(Value = "RECEIVESTORAGE_UNSPECIFIED")] ReceivestorageUnspecified
    }

    public enum ConnectorUpsertConfigRestartOptionsInput
    {
        [EnumMember(Value = "CONNECTOR_DO_NOT_RESTART")] ConnectorDoNotRestart,
        [EnumMember(Value = "CONNECTOR_RESTART")] ConnectorRestart,
        [EnumMember(Value = "CONNECTOR_RESTART_UNSPECIFIED")] ConnectorRestartUnspecified
    }

    public enum DatatypeKey
    {
        [EnumMember(Value = "DATATYPE_KEY_UNSPECIFIED")] DatatypeKeyUnspecified,
        [EnumMember(Value = "bool")] Bool,
        [EnumMember(Value = "double")] Double,
        [EnumMember(Value = "enum")] Enum,
        [EnumMember(Value = "int")] Int,
        [EnumMember(Value = "json")] Json,
        [EnumMember(Value = "string")] String
    }

    public enum EdgeDirection
    {
        [EnumMember(Value = "ALL")] All,
        [EnumMember(Value = "INCOMING")] Incoming,
        [EnumMember(Value = "OUTGOING")] Outgoing
    }

    public enum EncodingType
    {
        [EnumMember(Value = "BASE64")] Base64,
        [EnumMember(Value = "ENCODINGTYPE_UNSPECIFIED")] EncodingtypeUnspecified,
        [EnumMember(Value = "HEX")] Hex
    }

    public enum EncodingTypeInput
    {
        [EnumMember(Value = "BASE64")] Base64,
        [EnumMember(Value = "ENCODINGTYPE_UNSPECIFIED")] EncodingtypeUnspecified,
        [EnumMember(Value = "HEX")] Hex
    }

    public enum GatewayCourier
    {
        [EnumMember(Value = "COURIER_DHL")] CourierDhl,
        [EnumMember(Value = "COURIER_FEDEX")] CourierFedex,
        [EnumMember(Value = "COURIER_UNSPECIFIED")] CourierUnspecified,
        [EnumMember(Value = "COURIER_UPS")] CourierUps,
        [EnumMember(Value = "COURIER_USPS")] CourierUsps
    }

    public enum GatewayLifecycleState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "ASSIGNED")] Assigned,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "DELIVERED")] Delivered,
        [EnumMember(Value = "EXTENDED_OFFLINE")] ExtendedOffline,
        [EnumMember(Value = "FIRST_BOOT")] FirstBoot,
        [EnumMember(Value = "INVENTORY")] Inventory,
        [EnumMember(Value = "LIFECYCLE_STATE_UNSPECIFIED")] LifecycleStateUnspecified,
        [EnumMember(Value = "PROVISIONED")] Provisioned,
        [EnumMember(Value = "RMA")] Rma,
        [EnumMember(Value = "SHIPPED")] Shipped,
        [EnumMember(Value = "SHIPPING_EXCEPTION")] ShippingException,
        [EnumMember(Value = "SUSPENDED")] Suspended,
        [EnumMember(Value = "TERMINATED")] Terminated
    }

    public enum GatewayLifecycleStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "ASSIGNED")] Assigned,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "DELIVERED")] Delivered,
        [EnumMember(Value = "EXTENDED_OFFLINE")] ExtendedOffline,
        [EnumMember(Value = "FIRST_BOOT")] FirstBoot,
        [EnumMember(Value = "INVENTORY")] Inventory,
        [EnumMember(Value = "LIFECYCLE_STATE_UNSPECIFIED")] LifecycleStateUnspecified,
        [EnumMember(Value = "PROVISIONED")] Provisioned,
        [EnumMember(Value = "RMA")] Rma,
        [EnumMember(Value = "SHIPPED")] Shipped,
        [EnumMember(Value = "SHIPPING_EXCEPTION")] ShippingException,
        [EnumMember(Value = "SUSPENDED")] Suspended,
        [EnumMember(Value = "TERMINATED")] Terminated
    }

    public enum GatewayModel
    {
        [EnumMember(Value = "MODEL_UG100")] ModelUg100,
        [EnumMember(Value = "MODEL_UG110")] ModelUg110,
        [EnumMember(Value = "MODEL_UGCLOUD")] ModelUgcloud,
        [EnumMember(Value = "MODEL_UGCLOUD_AARCH64")] ModelUgcloudAarch64,
        [EnumMember(Value = "MODEL_UGCONTAINER")] ModelUgcontainer,
        [EnumMember(Value = "MODEL_UGCONTAINER_AARCH64")] ModelUgcontainerAarch64,
        [EnumMember(Value = "MODEL_UNSPECIFIED")] ModelUnspecified
    }

    public enum GatewayModelInput
    {
        [EnumMember(Value = "MODEL_UG100")] ModelUg100,
        [EnumMember(Value = "MODEL_UG110")] ModelUg110,
        [EnumMember(Value = "MODEL_UGCLOUD")] ModelUgcloud,
        [EnumMember(Value = "MODEL_UGCLOUD_AARCH64")] ModelUgcloudAarch64,
        [EnumMember(Value = "MODEL_UGCONTAINER")] ModelUgcontainer,
        [EnumMember(Value = "MODEL_UGCONTAINER_AARCH64")] ModelUgcontainerAarch64,
        [EnumMember(Value = "MODEL_UNSPECIFIED")] ModelUnspecified
    }

    public enum GatewayRmaReason
    {
        [EnumMember(Value = "RMA_REASON_CONNECTIVITY")] RmaReasonConnectivity,
        [EnumMember(Value = "RMA_REASON_CUSTOMER_RETURN")] RmaReasonCustomerReturn,
        [EnumMember(Value = "RMA_REASON_HARDWAREFAILURE")] RmaReasonHardwarefailure,
        [EnumMember(Value = "RMA_REASON_OTHER")] RmaReasonOther,
        [EnumMember(Value = "RMA_REASON_UNSPECIFIED")] RmaReasonUnspecified
    }

    public enum GatewaySimType
    {
        [EnumMember(Value = "SIM_TYPE_CERTS_ONLY")] SimTypeCertsOnly,
        [EnumMember(Value = "SIM_TYPE_ESIM")] SimTypeEsim,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER")] SimTypeTwilioSuper,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER_TOB")] SimTypeTwilioSuperTob,
        [EnumMember(Value = "SIM_TYPE_TWILIO_TOB")] SimTypeTwilioTob,
        [EnumMember(Value = "SIM_TYPE_UNSPECIFIED")] SimTypeUnspecified
    }

    public enum GatewayShippingStatus
    {
        [EnumMember(Value = "SHIPPING_STATUS_DELIVERED")] ShippingStatusDelivered,
        [EnumMember(Value = "SHIPPING_STATUS_EXCEPTION")] ShippingStatusException,
        [EnumMember(Value = "SHIPPING_STATUS_SHIPPED")] ShippingStatusShipped,
        [EnumMember(Value = "SHIPPING_STATUS_UNSPECIFIED")] ShippingStatusUnspecified
    }

    public enum GatewaySuspensionReason
    {
        [EnumMember(Value = "SUSPENSION_REASON_ACCOUNT_STATE")] SuspensionReasonAccountState,
        [EnumMember(Value = "SUSPENSION_REASON_CUSTOMER_REQUEST")] SuspensionReasonCustomerRequest,
        [EnumMember(Value = "SUSPENSION_REASON_LOST_TEMPORARY")] SuspensionReasonLostTemporary,
        [EnumMember(Value = "SUSPENSION_REASON_UNSPECIFIED")] SuspensionReasonUnspecified,
        [EnumMember(Value = "SUSPENSION_REASON_UNSUSPEND")] SuspensionReasonUnsuspend
    }

    public enum GatewaySuspensionReasonInput
    {
        [EnumMember(Value = "SUSPENSION_REASON_ACCOUNT_STATE")] SuspensionReasonAccountState,
        [EnumMember(Value = "SUSPENSION_REASON_CUSTOMER_REQUEST")] SuspensionReasonCustomerRequest,
        [EnumMember(Value = "SUSPENSION_REASON_LOST_TEMPORARY")] SuspensionReasonLostTemporary,
        [EnumMember(Value = "SUSPENSION_REASON_UNSPECIFIED")] SuspensionReasonUnspecified,
        [EnumMember(Value = "SUSPENSION_REASON_UNSUSPEND")] SuspensionReasonUnsuspend
    }

    public enum GatewayTerminationReason
    {
        [EnumMember(Value = "TERMINATION_DAMAGED")] TerminationDamaged,
        [EnumMember(Value = "TERMINATION_FAILURE")] TerminationFailure,
        [EnumMember(Value = "TERMINATION_LOST")] TerminationLost,
        [EnumMember(Value = "TERMINATION_REASON_ACCOUNT_STATE")] TerminationReasonAccountState,
        [EnumMember(Value = "TERMINATION_REASON_CUSTOMER_REQUEST")] TerminationReasonCustomerRequest,
        [EnumMember(Value = "TERMINATION_REASON_UNSPECIFIED")] TerminationReasonUnspecified
    }

    public enum GrantRequestType
    {
        [EnumMember(Value = "ENTIRE_BUILDINGS")] EntireBuildings,
        [EnumMember(Value = "ENTIRE_FLOORS")] EntireFloors,
        [EnumMember(Value = "ENTIRE_SITE")] EntireSite,
        [EnumMember(Value = "PARTIAL_FLOORS")] PartialFloors,
        [EnumMember(Value = "REQUESTED_UNSPECIFIED")] RequestedUnspecified
    }

    public enum GrantRequestTypeInput
    {
        [EnumMember(Value = "ENTIRE_BUILDINGS")] EntireBuildings,
        [EnumMember(Value = "ENTIRE_FLOORS")] EntireFloors,
        [EnumMember(Value = "ENTIRE_SITE")] EntireSite,
        [EnumMember(Value = "PARTIAL_FLOORS")] PartialFloors,
        [EnumMember(Value = "REQUESTED_UNSPECIFIED")] RequestedUnspecified
    }

    public enum GrantState
    {
        [EnumMember(Value = "APPROVED")] Approved,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "GRANTSTATE_UNSPECIFIED")] GrantstateUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REJECTED")] Rejected
    }

    public enum GrantStateInput
    {
        [EnumMember(Value = "APPROVED")] Approved,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "GRANTSTATE_UNSPECIFIED")] GrantstateUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REJECTED")] Rejected
    }

    public enum GraphEdgeDirection
    {
        [EnumMember(Value = "IN")] In,
        [EnumMember(Value = "OUT")] Out
    }

    public enum HttpMethod
    {
        [EnumMember(Value = "CONNECT")] Connect,
        [EnumMember(Value = "DELETE")] Delete,
        [EnumMember(Value = "GET")] Get,
        [EnumMember(Value = "HEAD")] Head,
        [EnumMember(Value = "HTTPMETHOD_UNSPECIFIED")] HttpmethodUnspecified,
        [EnumMember(Value = "OPTIONS")] Options,
        [EnumMember(Value = "PATCH")] Patch,
        [EnumMember(Value = "POST")] Post,
        [EnumMember(Value = "PUT")] Put,
        [EnumMember(Value = "TRACE")] Trace
    }

    public enum HttpMethodInput
    {
        [EnumMember(Value = "CONNECT")] Connect,
        [EnumMember(Value = "DELETE")] Delete,
        [EnumMember(Value = "GET")] Get,
        [EnumMember(Value = "HEAD")] Head,
        [EnumMember(Value = "HTTPMETHOD_UNSPECIFIED")] HttpmethodUnspecified,
        [EnumMember(Value = "OPTIONS")] Options,
        [EnumMember(Value = "PATCH")] Patch,
        [EnumMember(Value = "POST")] Post,
        [EnumMember(Value = "PUT")] Put,
        [EnumMember(Value = "TRACE")] Trace
    }

    public enum Interval
    {
        [EnumMember(Value = "INTERVAL_CUSTOM")] IntervalCustom,
        [EnumMember(Value = "INTERVAL_EVERY_3_MONTHS")] IntervalEvery3Months,
        [EnumMember(Value = "INTERVAL_EVERY_6_MONTHS")] IntervalEvery6Months,
        [EnumMember(Value = "INTERVAL_EVERY_MONTH")] IntervalEveryMonth,
        [EnumMember(Value = "INTERVAL_EVERY_YEAR")] IntervalEveryYear,
        [EnumMember(Value = "INTERVAL_ONE_TIME")] IntervalOneTime,
        [EnumMember(Value = "INTERVAL_UNSPECIFIED")] IntervalUnspecified
    }

    public enum InviteStatus
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "EXPIRED")] Expired,
        [EnumMember(Value = "INVITE_STATUS_UNSPECIFIED")] InviteStatusUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REDEEMED")] Redeemed
    }

    public enum InviteStatusInput
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "EXPIRED")] Expired,
        [EnumMember(Value = "INVITE_STATUS_UNSPECIFIED")] InviteStatusUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REDEEMED")] Redeemed
    }

    public enum LiveQueryStatus
    {
        [EnumMember(Value = "FAILING")] Failing,
        [EnumMember(Value = "LIVE_QUERY_STATUS_UNSPECIFIED")] LiveQueryStatusUnspecified,
        [EnumMember(Value = "PAUSED")] Paused,
        [EnumMember(Value = "RUNNING")] Running
    }

    public enum LiveQueryStatusInput
    {
        [EnumMember(Value = "FAILING")] Failing,
        [EnumMember(Value = "LIVE_QUERY_STATUS_UNSPECIFIED")] LiveQueryStatusUnspecified,
        [EnumMember(Value = "PAUSED")] Paused,
        [EnumMember(Value = "RUNNING")] Running
    }

    public enum OrgProvisioningState
    {
        [EnumMember(Value = "PROVISIONING_STATE_ACCEPTED")] ProvisioningStateAccepted,
        [EnumMember(Value = "PROVISIONING_STATE_COMPLETE")] ProvisioningStateComplete,
        [EnumMember(Value = "PROVISIONING_STATE_UNSPECIFIED")] ProvisioningStateUnspecified
    }

    public enum OrgProvisioningStateInput
    {
        [EnumMember(Value = "PROVISIONING_STATE_ACCEPTED")] ProvisioningStateAccepted,
        [EnumMember(Value = "PROVISIONING_STATE_COMPLETE")] ProvisioningStateComplete,
        [EnumMember(Value = "PROVISIONING_STATE_UNSPECIFIED")] ProvisioningStateUnspecified
    }

    public enum OrgRoleGroupState
    {
        [EnumMember(Value = "ORGROLEGROUP_STATE_DISABLED")] OrgrolegroupStateDisabled,
        [EnumMember(Value = "ORGROLEGROUP_STATE_ENABLED")] OrgrolegroupStateEnabled,
        [EnumMember(Value = "ORGROLEGROUP_STATE_UNSPECIFIED")] OrgrolegroupStateUnspecified
    }

    public enum OrgRoleGroupStateInput
    {
        [EnumMember(Value = "ORGROLEGROUP_STATE_DISABLED")] OrgrolegroupStateDisabled,
        [EnumMember(Value = "ORGROLEGROUP_STATE_ENABLED")] OrgrolegroupStateEnabled,
        [EnumMember(Value = "ORGROLEGROUP_STATE_UNSPECIFIED")] OrgrolegroupStateUnspecified
    }

    public enum OrgServiceAccountState
    {
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_DISABLED")] OrgserviceaccountStateDisabled,
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_ENABLED")] OrgserviceaccountStateEnabled,
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_UNSPECIFIED")] OrgserviceaccountStateUnspecified
    }

    public enum OrgServiceAccountStateInput
    {
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_DISABLED")] OrgserviceaccountStateDisabled,
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_ENABLED")] OrgserviceaccountStateEnabled,
        [EnumMember(Value = "ORGSERVICEACCOUNT_STATE_UNSPECIFIED")] OrgserviceaccountStateUnspecified
    }

    public enum OrgState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "ORG_STATE_UNSPECIFIED")] OrgStateUnspecified,
        [EnumMember(Value = "PROVISIONING")] Provisioning,
        [EnumMember(Value = "RESERVED")] Reserved
    }

    public enum OrgStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "ORG_STATE_UNSPECIFIED")] OrgStateUnspecified,
        [EnumMember(Value = "PROVISIONING")] Provisioning,
        [EnumMember(Value = "RESERVED")] Reserved
    }

    public enum Permission
    {
        [EnumMember(Value = "ANAXIENRICHMENT_READWRITE_ALL")] AnaxienrichmentReadwriteAll,
        [EnumMember(Value = "ANAXIENRICHMENT_READ_ALL")] AnaxienrichmentReadAll,
        [EnumMember(Value = "ANAXIINFERENCE_READWRITE_ALL")] AnaxiinferenceReadwriteAll,
        [EnumMember(Value = "ANAXIINFERENCE_READ_ALL")] AnaxiinferenceReadAll,
        [EnumMember(Value = "ANAXILABEL_READ")] AnaxilabelRead,
        [EnumMember(Value = "ANAXILABEL_READWRITE")] AnaxilabelReadwrite,
        [EnumMember(Value = "ANAXILABEL_READWRITE_ALL")] AnaxilabelReadwriteAll,
        [EnumMember(Value = "ANAXILABEL_READ_ALL")] AnaxilabelReadAll,
        [EnumMember(Value = "ANAXIMODEL_READWRITE_ALL")] AnaximodelReadwriteAll,
        [EnumMember(Value = "ANAXIMODEL_READ_ALL")] AnaximodelReadAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READWRITE_ALL")] AnaxistandardlabelReadwriteAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READ_ALL")] AnaxistandardlabelReadAll,
        [EnumMember(Value = "BILLING_READ")] BillingRead,
        [EnumMember(Value = "BILLING_READWRITE")] BillingReadwrite,
        [EnumMember(Value = "BILLING_READWRITE_ALL")] BillingReadwriteAll,
        [EnumMember(Value = "BILLING_READ_ALL")] BillingReadAll,
        [EnumMember(Value = "BUSINESS_WRITE")] BusinessWrite,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READWRITE_ALL")] ConnectorauthserviceReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READ_ALL")] ConnectorauthserviceReadAll,
        [EnumMember(Value = "CONNECTORAUTH_ACCESS")] ConnectorauthAccess,
        [EnumMember(Value = "CONNECTORAUTH_READWRITE_ALL")] ConnectorauthReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTH_READ_ALL")] ConnectorauthReadAll,
        [EnumMember(Value = "CONNECTOR_DESTINATION_READ")] ConnectorDestinationRead,
        [EnumMember(Value = "CONNECTOR_DESTINATION_READ_ALL")] ConnectorDestinationReadAll,
        [EnumMember(Value = "CONNECTOR_DESTINATION_WRITE")] ConnectorDestinationWrite,
        [EnumMember(Value = "CONNECTOR_DESTINATION_WRITE_ALL")] ConnectorDestinationWriteAll,
        [EnumMember(Value = "CONNECTOR_READWRITE_ALL")] ConnectorReadwriteAll,
        [EnumMember(Value = "CONNECTOR_READ_ALL")] ConnectorReadAll,
        [EnumMember(Value = "CONNECTOR_SOURCE_READ")] ConnectorSourceRead,
        [EnumMember(Value = "CONNECTOR_SOURCE_READ_ALL")] ConnectorSourceReadAll,
        [EnumMember(Value = "CONNECTOR_SOURCE_WRITE")] ConnectorSourceWrite,
        [EnumMember(Value = "CONTRIBUTIONREQUEST_READWRITE")] ContributionrequestReadwrite,
        [EnumMember(Value = "DEVICEMANUFACTURER_READWRITE_ALL")] DevicemanufacturerReadwriteAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READ_ALL")] DevicemanufacturerReadAll,
        [EnumMember(Value = "DEVICEMODEL_READWRITE_ALL")] DevicemodelReadwriteAll,
        [EnumMember(Value = "DEVICEMODEL_READ_ALL")] DevicemodelReadAll,
        [EnumMember(Value = "DEVICEPROFILE_READWRITE_ALL")] DeviceprofileReadwriteAll,
        [EnumMember(Value = "DEVICEPROFILE_READ_ALL")] DeviceprofileReadAll,
        [EnumMember(Value = "EVENT_READ_ALL")] EventReadAll,
        [EnumMember(Value = "GATEWAY_PIPELINE_ALL")] GatewayPipelineAll,
        [EnumMember(Value = "GATEWAY_READWRITE_ALL")] GatewayReadwriteAll,
        [EnumMember(Value = "GATEWAY_READ_ALL")] GatewayReadAll,
        [EnumMember(Value = "GRANTS_READ")] GrantsRead,
        [EnumMember(Value = "GRANTS_READWRITE")] GrantsReadwrite,
        [EnumMember(Value = "GRANTS_READWRITE_ALL")] GrantsReadwriteAll,
        [EnumMember(Value = "GRANTS_READ_ALL")] GrantsReadAll,
        [EnumMember(Value = "GRAPH_READWRITE_ALL")] GraphReadwriteAll,
        [EnumMember(Value = "GRAPH_READ_ALL")] GraphReadAll,
        [EnumMember(Value = "LIVEQUERY_READ")] LivequeryRead,
        [EnumMember(Value = "LIVEQUERY_READWRITE")] LivequeryReadwrite,
        [EnumMember(Value = "LIVEQUERY_READWRITE_ALL")] LivequeryReadwriteAll,
        [EnumMember(Value = "LIVEQUERY_READ_ALL")] LivequeryReadAll,
        [EnumMember(Value = "MASTODON_CLIENT_CREATE")] MastodonClientCreate,
        [EnumMember(Value = "MASTODON_GOD")] MastodonGod,
        [EnumMember(Value = "MASTODON_READ")] MastodonRead,
        [EnumMember(Value = "MASTODON_READWRITE")] MastodonReadwrite,
        [EnumMember(Value = "MESSAGING_READ")] MessagingRead,
        [EnumMember(Value = "MESSAGING_READWRITE")] MessagingReadwrite,
        [EnumMember(Value = "MESSAGING_READWRITE_ALL")] MessagingReadwriteAll,
        [EnumMember(Value = "MESSAGING_READ_ALL")] MessagingReadAll,
        [EnumMember(Value = "OPENFGA_WRITE")] OpenfgaWrite,
        [EnumMember(Value = "ORG_READ")] OrgRead,
        [EnumMember(Value = "ORG_READWRITE")] OrgReadwrite,
        [EnumMember(Value = "ORG_READWRITE_ALL")] OrgReadwriteAll,
        [EnumMember(Value = "ORG_READ_ALL")] OrgReadAll,
        [EnumMember(Value = "PERMISSION_UNSPECIFIED")] PermissionUnspecified,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ")] PersonalaccesstokenRead,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE")] PersonalaccesstokenReadwrite,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE_ALL")] PersonalaccesstokenReadwriteAll,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ_ALL")] PersonalaccesstokenReadAll,
        [EnumMember(Value = "PERSON_READ_ALL")] PersonReadAll,
        [EnumMember(Value = "PLACE_READWRITE_ALL")] PlaceReadwriteAll,
        [EnumMember(Value = "PLACE_READ_ALL")] PlaceReadAll,
        [EnumMember(Value = "SECRETS_READWRITE_ALL")] SecretsReadwriteAll,
        [EnumMember(Value = "SECRETS_READ_ALL")] SecretsReadAll,
        [EnumMember(Value = "THING_READWRITE_ALL")] ThingReadwriteAll,
        [EnumMember(Value = "THING_READ_ALL")] ThingReadAll,
        [EnumMember(Value = "TIMESERIES_GOD")] TimeseriesGod,
        [EnumMember(Value = "USER_READ")] UserRead,
        [EnumMember(Value = "USER_READWRITE")] UserReadwrite,
        [EnumMember(Value = "USER_READWRITE_ALL")] UserReadwriteAll,
        [EnumMember(Value = "USER_READ_ALL")] UserReadAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READWRITE_ALL")] WebhookreceiverReadwriteAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READ_ALL")] WebhookreceiverReadAll,
        [EnumMember(Value = "WEBHOOKSENDER_READWRITE_ALL")] WebhooksenderReadwriteAll,
        [EnumMember(Value = "WEBHOOKSENDER_READ_ALL")] WebhooksenderReadAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ")] WebhooktargetRead,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE")] WebhooktargetReadwrite,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE_ALL")] WebhooktargetReadwriteAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ_ALL")] WebhooktargetReadAll
    }

    public enum PermissionInput
    {
        [EnumMember(Value = "ANAXIENRICHMENT_READWRITE_ALL")] AnaxienrichmentReadwriteAll,
        [EnumMember(Value = "ANAXIENRICHMENT_READ_ALL")] AnaxienrichmentReadAll,
        [EnumMember(Value = "ANAXIINFERENCE_READWRITE_ALL")] AnaxiinferenceReadwriteAll,
        [EnumMember(Value = "ANAXIINFERENCE_READ_ALL")] AnaxiinferenceReadAll,
        [EnumMember(Value = "ANAXILABEL_READ")] AnaxilabelRead,
        [EnumMember(Value = "ANAXILABEL_READWRITE")] AnaxilabelReadwrite,
        [EnumMember(Value = "ANAXILABEL_READWRITE_ALL")] AnaxilabelReadwriteAll,
        [EnumMember(Value = "ANAXILABEL_READ_ALL")] AnaxilabelReadAll,
        [EnumMember(Value = "ANAXIMODEL_READWRITE_ALL")] AnaximodelReadwriteAll,
        [EnumMember(Value = "ANAXIMODEL_READ_ALL")] AnaximodelReadAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READWRITE_ALL")] AnaxistandardlabelReadwriteAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READ_ALL")] AnaxistandardlabelReadAll,
        [EnumMember(Value = "BILLING_READ")] BillingRead,
        [EnumMember(Value = "BILLING_READWRITE")] BillingReadwrite,
        [EnumMember(Value = "BILLING_READWRITE_ALL")] BillingReadwriteAll,
        [EnumMember(Value = "BILLING_READ_ALL")] BillingReadAll,
        [EnumMember(Value = "BUSINESS_WRITE")] BusinessWrite,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READWRITE_ALL")] ConnectorauthserviceReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READ_ALL")] ConnectorauthserviceReadAll,
        [EnumMember(Value = "CONNECTORAUTH_ACCESS")] ConnectorauthAccess,
        [EnumMember(Value = "CONNECTORAUTH_READWRITE_ALL")] ConnectorauthReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTH_READ_ALL")] ConnectorauthReadAll,
        [EnumMember(Value = "CONNECTOR_DESTINATION_READ")] ConnectorDestinationRead,
        [EnumMember(Value = "CONNECTOR_DESTINATION_READ_ALL")] ConnectorDestinationReadAll,
        [EnumMember(Value = "CONNECTOR_DESTINATION_WRITE")] ConnectorDestinationWrite,
        [EnumMember(Value = "CONNECTOR_DESTINATION_WRITE_ALL")] ConnectorDestinationWriteAll,
        [EnumMember(Value = "CONNECTOR_READWRITE_ALL")] ConnectorReadwriteAll,
        [EnumMember(Value = "CONNECTOR_READ_ALL")] ConnectorReadAll,
        [EnumMember(Value = "CONNECTOR_SOURCE_READ")] ConnectorSourceRead,
        [EnumMember(Value = "CONNECTOR_SOURCE_READ_ALL")] ConnectorSourceReadAll,
        [EnumMember(Value = "CONNECTOR_SOURCE_WRITE")] ConnectorSourceWrite,
        [EnumMember(Value = "CONTRIBUTIONREQUEST_READWRITE")] ContributionrequestReadwrite,
        [EnumMember(Value = "DEVICEMANUFACTURER_READWRITE_ALL")] DevicemanufacturerReadwriteAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READ_ALL")] DevicemanufacturerReadAll,
        [EnumMember(Value = "DEVICEMODEL_READWRITE_ALL")] DevicemodelReadwriteAll,
        [EnumMember(Value = "DEVICEMODEL_READ_ALL")] DevicemodelReadAll,
        [EnumMember(Value = "DEVICEPROFILE_READWRITE_ALL")] DeviceprofileReadwriteAll,
        [EnumMember(Value = "DEVICEPROFILE_READ_ALL")] DeviceprofileReadAll,
        [EnumMember(Value = "EVENT_READ_ALL")] EventReadAll,
        [EnumMember(Value = "GATEWAY_PIPELINE_ALL")] GatewayPipelineAll,
        [EnumMember(Value = "GATEWAY_READWRITE_ALL")] GatewayReadwriteAll,
        [EnumMember(Value = "GATEWAY_READ_ALL")] GatewayReadAll,
        [EnumMember(Value = "GRANTS_READ")] GrantsRead,
        [EnumMember(Value = "GRANTS_READWRITE")] GrantsReadwrite,
        [EnumMember(Value = "GRANTS_READWRITE_ALL")] GrantsReadwriteAll,
        [EnumMember(Value = "GRANTS_READ_ALL")] GrantsReadAll,
        [EnumMember(Value = "GRAPH_READWRITE_ALL")] GraphReadwriteAll,
        [EnumMember(Value = "GRAPH_READ_ALL")] GraphReadAll,
        [EnumMember(Value = "LIVEQUERY_READ")] LivequeryRead,
        [EnumMember(Value = "LIVEQUERY_READWRITE")] LivequeryReadwrite,
        [EnumMember(Value = "LIVEQUERY_READWRITE_ALL")] LivequeryReadwriteAll,
        [EnumMember(Value = "LIVEQUERY_READ_ALL")] LivequeryReadAll,
        [EnumMember(Value = "MASTODON_CLIENT_CREATE")] MastodonClientCreate,
        [EnumMember(Value = "MASTODON_GOD")] MastodonGod,
        [EnumMember(Value = "MASTODON_READ")] MastodonRead,
        [EnumMember(Value = "MASTODON_READWRITE")] MastodonReadwrite,
        [EnumMember(Value = "MESSAGING_READ")] MessagingRead,
        [EnumMember(Value = "MESSAGING_READWRITE")] MessagingReadwrite,
        [EnumMember(Value = "MESSAGING_READWRITE_ALL")] MessagingReadwriteAll,
        [EnumMember(Value = "MESSAGING_READ_ALL")] MessagingReadAll,
        [EnumMember(Value = "OPENFGA_WRITE")] OpenfgaWrite,
        [EnumMember(Value = "ORG_READ")] OrgRead,
        [EnumMember(Value = "ORG_READWRITE")] OrgReadwrite,
        [EnumMember(Value = "ORG_READWRITE_ALL")] OrgReadwriteAll,
        [EnumMember(Value = "ORG_READ_ALL")] OrgReadAll,
        [EnumMember(Value = "PERMISSION_UNSPECIFIED")] PermissionUnspecified,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ")] PersonalaccesstokenRead,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE")] PersonalaccesstokenReadwrite,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE_ALL")] PersonalaccesstokenReadwriteAll,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ_ALL")] PersonalaccesstokenReadAll,
        [EnumMember(Value = "PERSON_READ_ALL")] PersonReadAll,
        [EnumMember(Value = "PLACE_READWRITE_ALL")] PlaceReadwriteAll,
        [EnumMember(Value = "PLACE_READ_ALL")] PlaceReadAll,
        [EnumMember(Value = "SECRETS_READWRITE_ALL")] SecretsReadwriteAll,
        [EnumMember(Value = "SECRETS_READ_ALL")] SecretsReadAll,
        [EnumMember(Value = "THING_READWRITE_ALL")] ThingReadwriteAll,
        [EnumMember(Value = "THING_READ_ALL")] ThingReadAll,
        [EnumMember(Value = "TIMESERIES_GOD")] TimeseriesGod,
        [EnumMember(Value = "USER_READ")] UserRead,
        [EnumMember(Value = "USER_READWRITE")] UserReadwrite,
        [EnumMember(Value = "USER_READWRITE_ALL")] UserReadwriteAll,
        [EnumMember(Value = "USER_READ_ALL")] UserReadAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READWRITE_ALL")] WebhookreceiverReadwriteAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READ_ALL")] WebhookreceiverReadAll,
        [EnumMember(Value = "WEBHOOKSENDER_READWRITE_ALL")] WebhooksenderReadwriteAll,
        [EnumMember(Value = "WEBHOOKSENDER_READ_ALL")] WebhooksenderReadAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ")] WebhooktargetRead,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE")] WebhooktargetReadwrite,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE_ALL")] WebhooktargetReadwriteAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ_ALL")] WebhooktargetReadAll
    }

    public enum PriceType
    {
        [EnumMember(Value = "PRICE_TYPE_METERED")] PriceTypeMetered,
        [EnumMember(Value = "PRICE_TYPE_ONE_TIME")] PriceTypeOneTime,
        [EnumMember(Value = "PRICE_TYPE_PLATFORM")] PriceTypePlatform,
        [EnumMember(Value = "PRICE_TYPE_PREPAID_METERED")] PriceTypePrepaidMetered,
        [EnumMember(Value = "PRICE_TYPE_UNSPECIFIED")] PriceTypeUnspecified
    }

    public enum ProductType
    {
        [EnumMember(Value = "PRODUCT_TYPE_ONE_TIME")] ProductTypeOneTime,
        [EnumMember(Value = "PRODUCT_TYPE_RECURRING")] ProductTypeRecurring,
        [EnumMember(Value = "PRODUCT_TYPE_UNSPECIFIED")] ProductTypeUnspecified
    }

    public enum Role
    {
        [EnumMember(Value = "ADMIN")] Admin,
        [EnumMember(Value = "DESTINATION_CONNECTOR_MANAGERS")] DestinationConnectorManagers,
        [EnumMember(Value = "EXPLORER")] Explorer,
        [EnumMember(Value = "ROLE_UNSPECIFIED")] RoleUnspecified
    }

    public enum RoleInput
    {
        [EnumMember(Value = "ADMIN")] Admin,
        [EnumMember(Value = "DESTINATION_CONNECTOR_MANAGERS")] DestinationConnectorManagers,
        [EnumMember(Value = "EXPLORER")] Explorer,
        [EnumMember(Value = "ROLE_UNSPECIFIED")] RoleUnspecified
    }

    public enum RoleManagerRoleState
    {
        [EnumMember(Value = "ROLE_STATE_DISABLED")] RoleStateDisabled,
        [EnumMember(Value = "ROLE_STATE_ENABLED")] RoleStateEnabled,
        [EnumMember(Value = "ROLE_STATE_UNSPECIFIED")] RoleStateUnspecified
    }

    public enum RoleManagerRoleStateInput
    {
        [EnumMember(Value = "ROLE_STATE_DISABLED")] RoleStateDisabled,
        [EnumMember(Value = "ROLE_STATE_ENABLED")] RoleStateEnabled,
        [EnumMember(Value = "ROLE_STATE_UNSPECIFIED")] RoleStateUnspecified
    }

    public enum RoleManagerRoleType
    {
        [EnumMember(Value = "ROLE_TYPE_COMMON")] RoleTypeCommon,
        [EnumMember(Value = "ROLE_TYPE_ORG_CONTEXT")] RoleTypeOrgContext,
        [EnumMember(Value = "ROLE_TYPE_UNSPECIFIED")] RoleTypeUnspecified
    }

    public enum RoleManagerRoleTypeInput
    {
        [EnumMember(Value = "ROLE_TYPE_COMMON")] RoleTypeCommon,
        [EnumMember(Value = "ROLE_TYPE_ORG_CONTEXT")] RoleTypeOrgContext,
        [EnumMember(Value = "ROLE_TYPE_UNSPECIFIED")] RoleTypeUnspecified
    }

    public enum ScopeKey
    {
        [EnumMember(Value = "BUILDING")] Building,
        [EnumMember(Value = "CONNECTOR")] Connector,
        [EnumMember(Value = "FLOOR")] Floor,
        [EnumMember(Value = "GLOBAL")] Global,
        [EnumMember(Value = "ORG")] Org,
        [EnumMember(Value = "SCOPE_KEY_UNSPECIFIED")] ScopeKeyUnspecified,
        [EnumMember(Value = "SITE")] Site,
        [EnumMember(Value = "SPACE")] Space,
        [EnumMember(Value = "THING")] Thing
    }

    public enum SignatureType
    {
        [EnumMember(Value = "ECDSA_SHA1")] EcdsaSha1,
        [EnumMember(Value = "ECDSA_SHA224")] EcdsaSha224,
        [EnumMember(Value = "ECDSA_SHA256")] EcdsaSha256,
        [EnumMember(Value = "ECDSA_SHA384")] EcdsaSha384,
        [EnumMember(Value = "ECDSA_SHA3_224")] EcdsaSha3224,
        [EnumMember(Value = "ECDSA_SHA3_256")] EcdsaSha3256,
        [EnumMember(Value = "ECDSA_SHA3_384")] EcdsaSha3384,
        [EnumMember(Value = "ECDSA_SHA3_512")] EcdsaSha3512,
        [EnumMember(Value = "ECDSA_SHA512")] EcdsaSha512,
        [EnumMember(Value = "HMAC_SHA1")] HmacSha1,
        [EnumMember(Value = "HMAC_SHA224")] HmacSha224,
        [EnumMember(Value = "HMAC_SHA256")] HmacSha256,
        [EnumMember(Value = "HMAC_SHA384")] HmacSha384,
        [EnumMember(Value = "HMAC_SHA3_224")] HmacSha3224,
        [EnumMember(Value = "HMAC_SHA3_256")] HmacSha3256,
        [EnumMember(Value = "HMAC_SHA3_384")] HmacSha3384,
        [EnumMember(Value = "HMAC_SHA3_512")] HmacSha3512,
        [EnumMember(Value = "HMAC_SHA512")] HmacSha512,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA1")] RsassaPkcs1V15Sha1,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA224")] RsassaPkcs1V15Sha224,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA256")] RsassaPkcs1V15Sha256,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA384")] RsassaPkcs1V15Sha384,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA512")] RsassaPkcs1V15Sha512,
        [EnumMember(Value = "RSASSA_PSS_SHA3_224")] RsassaPssSha3224,
        [EnumMember(Value = "RSASSA_PSS_SHA3_256")] RsassaPssSha3256,
        [EnumMember(Value = "RSASSA_PSS_SHA3_384")] RsassaPssSha3384,
        [EnumMember(Value = "RSASSA_PSS_SHA3_512")] RsassaPssSha3512,
        [EnumMember(Value = "SIGNATURETYPE_UNSPECIFIED")] SignaturetypeUnspecified
    }

    public enum SignatureTypeInput
    {
        [EnumMember(Value = "ECDSA_SHA1")] EcdsaSha1,
        [EnumMember(Value = "ECDSA_SHA224")] EcdsaSha224,
        [EnumMember(Value = "ECDSA_SHA256")] EcdsaSha256,
        [EnumMember(Value = "ECDSA_SHA384")] EcdsaSha384,
        [EnumMember(Value = "ECDSA_SHA3_224")] EcdsaSha3224,
        [EnumMember(Value = "ECDSA_SHA3_256")] EcdsaSha3256,
        [EnumMember(Value = "ECDSA_SHA3_384")] EcdsaSha3384,
        [EnumMember(Value = "ECDSA_SHA3_512")] EcdsaSha3512,
        [EnumMember(Value = "ECDSA_SHA512")] EcdsaSha512,
        [EnumMember(Value = "HMAC_SHA1")] HmacSha1,
        [EnumMember(Value = "HMAC_SHA224")] HmacSha224,
        [EnumMember(Value = "HMAC_SHA256")] HmacSha256,
        [EnumMember(Value = "HMAC_SHA384")] HmacSha384,
        [EnumMember(Value = "HMAC_SHA3_224")] HmacSha3224,
        [EnumMember(Value = "HMAC_SHA3_256")] HmacSha3256,
        [EnumMember(Value = "HMAC_SHA3_384")] HmacSha3384,
        [EnumMember(Value = "HMAC_SHA3_512")] HmacSha3512,
        [EnumMember(Value = "HMAC_SHA512")] HmacSha512,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA1")] RsassaPkcs1V15Sha1,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA224")] RsassaPkcs1V15Sha224,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA256")] RsassaPkcs1V15Sha256,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA384")] RsassaPkcs1V15Sha384,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA512")] RsassaPkcs1V15Sha512,
        [EnumMember(Value = "RSASSA_PSS_SHA3_224")] RsassaPssSha3224,
        [EnumMember(Value = "RSASSA_PSS_SHA3_256")] RsassaPssSha3256,
        [EnumMember(Value = "RSASSA_PSS_SHA3_384")] RsassaPssSha3384,
        [EnumMember(Value = "RSASSA_PSS_SHA3_512")] RsassaPssSha3512,
        [EnumMember(Value = "SIGNATURETYPE_UNSPECIFIED")] SignaturetypeUnspecified
    }

    public enum SystemTypeKey
    {
        [EnumMember(Value = "AIR_QUALITY_MONITORING_SYSTEM")] AirQualityMonitoringSystem,
        [EnumMember(Value = "CALENDAR_SYSTEM")] CalendarSystem,
        [EnumMember(Value = "ELECTRICAL_SYSTEM")] ElectricalSystem,
        [EnumMember(Value = "ELECTRICITY_SYSTEM")] ElectricitySystem,
        [EnumMember(Value = "ELEVATOR_SYSTEM")] ElevatorSystem,
        [EnumMember(Value = "GAS_SYSTEM")] GasSystem,
        [EnumMember(Value = "HVAC_SYSTEM")] HvacSystem,
        [EnumMember(Value = "LIGHTING_SYSTEM")] LightingSystem,
        [EnumMember(Value = "SAFETY_SYSTEM")] SafetySystem,
        [EnumMember(Value = "SECURITY_SYSTEM")] SecuritySystem,
        [EnumMember(Value = "SEWAGE_SYSTEM")] SewageSystem,
        [EnumMember(Value = "SPATIAL_INTELLIGENCE_SYSTEM")] SpatialIntelligenceSystem,
        [EnumMember(Value = "SYSTEMTYPE_UNKNOWN")] SystemtypeUnknown,
        [EnumMember(Value = "SYSTEM_TYPE_KEY_UNSPECIFIED")] SystemTypeKeyUnspecified,
        [EnumMember(Value = "TELECONFERENCE_SYSTEM")] TeleconferenceSystem,
        [EnumMember(Value = "WATER_SYSTEM")] WaterSystem,
        [EnumMember(Value = "WEATHER_SYSTEM")] WeatherSystem
    }

    public enum SystemTypeKeyInput
    {
        [EnumMember(Value = "AIR_QUALITY_MONITORING_SYSTEM")] AirQualityMonitoringSystem,
        [EnumMember(Value = "CALENDAR_SYSTEM")] CalendarSystem,
        [EnumMember(Value = "ELECTRICAL_SYSTEM")] ElectricalSystem,
        [EnumMember(Value = "ELECTRICITY_SYSTEM")] ElectricitySystem,
        [EnumMember(Value = "ELEVATOR_SYSTEM")] ElevatorSystem,
        [EnumMember(Value = "GAS_SYSTEM")] GasSystem,
        [EnumMember(Value = "HVAC_SYSTEM")] HvacSystem,
        [EnumMember(Value = "LIGHTING_SYSTEM")] LightingSystem,
        [EnumMember(Value = "SAFETY_SYSTEM")] SafetySystem,
        [EnumMember(Value = "SECURITY_SYSTEM")] SecuritySystem,
        [EnumMember(Value = "SEWAGE_SYSTEM")] SewageSystem,
        [EnumMember(Value = "SPATIAL_INTELLIGENCE_SYSTEM")] SpatialIntelligenceSystem,
        [EnumMember(Value = "SYSTEMTYPE_UNKNOWN")] SystemtypeUnknown,
        [EnumMember(Value = "SYSTEM_TYPE_KEY_UNSPECIFIED")] SystemTypeKeyUnspecified,
        [EnumMember(Value = "TELECONFERENCE_SYSTEM")] TeleconferenceSystem,
        [EnumMember(Value = "WATER_SYSTEM")] WaterSystem,
        [EnumMember(Value = "WEATHER_SYSTEM")] WeatherSystem
    }

    public enum TimeseriesAggPeriodInput
    {
        [EnumMember(Value = "AGG_PERIOD_UNSPECIFIED")] AggPeriodUnspecified,
        [EnumMember(Value = "DAY")] Day,
        [EnumMember(Value = "HOUR")] Hour,
        [EnumMember(Value = "MINUTE")] Minute
    }

    public enum TimeseriesNumericalException
    {
        [EnumMember(Value = "INFINITY")] Infinity,
        [EnumMember(Value = "NAN")] Nan,
        [EnumMember(Value = "NEGATIVE_INFINITY")] NegativeInfinity,
        [EnumMember(Value = "NUMERICAL_EXCEPTION_UNSPECIFIED")] NumericalExceptionUnspecified
    }

    public enum WebhookTargetCloudEventContentMode
    {
        [EnumMember(Value = "BATCHED")] Batched,
        [EnumMember(Value = "BINARY")] Binary,
        [EnumMember(Value = "CLOUDEVENTCONTENTMODE_UNSPECIFIED")] CloudeventcontentmodeUnspecified,
        [EnumMember(Value = "STRUCTURED")] Structured
    }

    public enum WebhookTargetCloudEventContentModeInput
    {
        [EnumMember(Value = "BATCHED")] Batched,
        [EnumMember(Value = "BINARY")] Binary,
        [EnumMember(Value = "CLOUDEVENTCONTENTMODE_UNSPECIFIED")] CloudeventcontentmodeUnspecified,
        [EnumMember(Value = "STRUCTURED")] Structured
    }

    public enum WebhookTargetEventFilterTypeInput
    {
        [EnumMember(Value = "CLOUDEVENT")] Cloudevent,
        [EnumMember(Value = "EVENTFILTERTYPE_UNSPECIFIED")] EventfiltertypeUnspecified,
        [EnumMember(Value = "JSONEXPRESSION")] Jsonexpression,
        [EnumMember(Value = "TIMESERIES")] Timeseries
    }

    public enum WebhookTargetTargetTypeInput
    {
        [EnumMember(Value = "HTTP")] Http,
        [EnumMember(Value = "TARGETTYPE_UNSPECIFIED")] TargettypeUnspecified
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class LiveDirective : GraphQlDirective
    {
        public LiveDirective(QueryBuilderParameter<string> name = null) : base("live")
        {
            AddArgument("name", name);
        }
    }
    #endregion

    #region builder classes
    public class ApiKeyQueryBuilder : GraphQlQueryBuilder<ApiKeyQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "apiKey" },
                new GraphQlFieldMetadata { Name = "keyName" },
                new GraphQlFieldMetadata { Name = "passedAs" }
            };

        protected override string TypeName { get { return "APIKey"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ApiKeyQueryBuilder WithApiKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apiKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiKeyQueryBuilder ExceptApiKey()
        {
            return ExceptField("apiKey");
        }

        public ApiKeyQueryBuilder WithKeyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("keyName", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiKeyQueryBuilder ExceptKeyName()
        {
            return ExceptField("keyName");
        }

        public ApiKeyQueryBuilder WithPassedAs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("passedAs", alias, new GraphQlDirective[] { include, skip });
        }

        public ApiKeyQueryBuilder ExceptPassedAs()
        {
            return ExceptField("passedAs");
        }
    }

    public class AccessCredentialQueryBuilder : GraphQlQueryBuilder<AccessCredentialQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(AccessCredentialIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "AccessCredential"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccessCredentialQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public AccessCredentialQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AccessCredentialQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AccessCredentialQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public AccessCredentialQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public AccessCredentialQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AccessCredentialQueryBuilder WithIdentities(AccessCredentialIdentityUnionQueryBuilder accessCredentialIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, accessCredentialIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public AccessCredentialQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public AccessCredentialQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AccessCredentialQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class AccessCredentialIdentityQueryBuilder : GraphQlQueryBuilder<AccessCredentialIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "AccessCredentialIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccessCredentialIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AccessCredentialIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AccessCredentialIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AccessCredentialIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public AccessCredentialIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public AccessCredentialIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class AccessCredentialIdentityModelQueryBuilder : GraphQlQueryBuilder<AccessCredentialIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public AccessCredentialIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "AccessCredentialIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccessCredentialIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AccessCredentialIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AccessCredentialIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AccessCredentialIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public AccessCredentialIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public AccessCredentialIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public AccessCredentialIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public AccessCredentialIdentityModelQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class AccessCredentialIdentityUnionQueryBuilder : GraphQlQueryBuilder<AccessCredentialIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public AccessCredentialIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "AccessCredentialIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccessCredentialIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class AccountQueryBuilder : GraphQlQueryBuilder<AccountQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasBill", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasBillEdges", IsComplex = true, QueryBuilderType = typeof(HasBillEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasProvider", IsComplex = true, QueryBuilderType = typeof(OrganizationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasProviderEdges", IsComplex = true, QueryBuilderType = typeof(HasProviderEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(AccountIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Account"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccountQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public AccountQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AccountQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AccountQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public AccountQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public AccountQueryBuilder WithHasBill(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasBill", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AccountQueryBuilder ExceptHasBill()
        {
            return ExceptField("hasBill");
        }

        public AccountQueryBuilder WithHasBillEdges(HasBillEdgeQueryBuilder hasBillEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasBillEdges", alias, hasBillEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptHasBillEdges()
        {
            return ExceptField("hasBillEdges");
        }

        public AccountQueryBuilder WithHasProvider(OrganizationQueryBuilder organizationQueryBuilder, QueryBuilderParameter<OrganizationFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasProvider", alias, organizationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AccountQueryBuilder ExceptHasProvider()
        {
            return ExceptField("hasProvider");
        }

        public AccountQueryBuilder WithHasProviderEdges(HasProviderEdgeQueryBuilder hasProviderEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasProviderEdges", alias, hasProviderEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptHasProviderEdges()
        {
            return ExceptField("hasProviderEdges");
        }

        public AccountQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AccountQueryBuilder WithIdentities(AccountIdentityUnionQueryBuilder accountIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, accountIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public AccountQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public AccountQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AccountQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class AccountIdentityUnionQueryBuilder : GraphQlQueryBuilder<AccountIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public AccountIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "AccountIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AccountIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AccountIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class AddressQueryBuilder : GraphQlQueryBuilder<AddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "countryName" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "locality" },
                new GraphQlFieldMetadata { Name = "postalCode" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "streetAddress" }
            };

        protected override string TypeName { get { return "Address"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AddressQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public AddressQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AddressQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AddressQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AddressQueryBuilder WithLocality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("locality", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptLocality()
        {
            return ExceptField("locality");
        }

        public AddressQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public AddressQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public AddressQueryBuilder WithStreetAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streetAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptStreetAddress()
        {
            return ExceptField("streetAddress");
        }
    }

    public class AddressMutationQueryBuilder : GraphQlQueryBuilder<AddressMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "countryName" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "locality" },
                new GraphQlFieldMetadata { Name = "postalCode" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "streetAddress" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true },
                new GraphQlFieldMetadata { Name = "validate" }
            };

        protected override string TypeName { get { return "AddressMutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AddressMutationQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public AddressMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AddressMutationQueryBuilder WithLocality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("locality", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptLocality()
        {
            return ExceptField("locality");
        }

        public AddressMutationQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public AddressMutationQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public AddressMutationQueryBuilder WithStreetAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streetAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptStreetAddress()
        {
            return ExceptField("streetAddress");
        }

        public AddressMutationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public AddressMutationQueryBuilder WithValidate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("validate", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }
    }

    public class AgentQueryBuilder : GraphQlQueryBuilder<AgentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(AgentIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Agent"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AgentQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public AgentQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public AgentQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public AgentQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public AgentQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public AgentQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AgentQueryBuilder WithIdentities(AgentIdentityUnionQueryBuilder agentIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, agentIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public AgentQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public AgentQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AgentQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class AgentIdentityUnionQueryBuilder : GraphQlQueryBuilder<AgentIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public AgentIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "AgentIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AgentIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AgentIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class AuthQueryBuilder : GraphQlQueryBuilder<AuthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchQueryBuilder) },
                new GraphQlFieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) }
            };

        protected override string TypeName { get { return "Auth"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AuthQueryBuilder WithAnd(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public AuthQueryBuilder WithMatches(MatchQueryBuilder matchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public AuthQueryBuilder WithNot(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public AuthQueryBuilder WithOr(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }
    }

    public class BaCnetObjectIdQueryBuilder : GraphQlQueryBuilder<BaCnetObjectIdQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "BACnetObjectId"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BaCnetObjectIdQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public BaCnetObjectIdQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public BaCnetObjectIdQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BaCnetObjectIdQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public BaCnetObjectIdQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public BaCnetObjectIdQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class BaCnetObjectIdModelQueryBuilder : GraphQlQueryBuilder<BaCnetObjectIdModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public BaCnetObjectIdModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "BACnetObjectIdModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BaCnetObjectIdModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public BaCnetObjectIdModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public BaCnetObjectIdModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BaCnetObjectIdModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public BaCnetObjectIdModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public BaCnetObjectIdModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetObjectIdModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public BaCnetObjectIdModelQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class BaCnetVendorIdQueryBuilder : GraphQlQueryBuilder<BaCnetVendorIdQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "BACnetVendorId"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BaCnetVendorIdQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public BaCnetVendorIdQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public BaCnetVendorIdQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BaCnetVendorIdQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public BaCnetVendorIdQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public BaCnetVendorIdQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class BaCnetVendorIdModelQueryBuilder : GraphQlQueryBuilder<BaCnetVendorIdModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public BaCnetVendorIdModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "BACnetVendorIdModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BaCnetVendorIdModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public BaCnetVendorIdModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public BaCnetVendorIdModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BaCnetVendorIdModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public BaCnetVendorIdModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public BaCnetVendorIdModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public BaCnetVendorIdModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public BaCnetVendorIdModelQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class BasicAuthQueryBuilder : GraphQlQueryBuilder<BasicAuthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "password" },
                new GraphQlFieldMetadata { Name = "username" }
            };

        protected override string TypeName { get { return "BasicAuth"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BasicAuthQueryBuilder WithPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("password", alias, new GraphQlDirective[] { include, skip });
        }

        public BasicAuthQueryBuilder ExceptPassword()
        {
            return ExceptField("password");
        }

        public BasicAuthQueryBuilder WithUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("username", alias, new GraphQlDirective[] { include, skip });
        }

        public BasicAuthQueryBuilder ExceptUsername()
        {
            return ExceptField("username");
        }
    }

    public class BillingCalculatedProductBundleResponseQueryBuilder : GraphQlQueryBuilder<BillingCalculatedProductBundleResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "calculation", IsComplex = true, QueryBuilderType = typeof(BillingCalculationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "productBundle", IsComplex = true, QueryBuilderType = typeof(ProductBundleResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productSlug" },
                new GraphQlFieldMetadata { Name = "statusMessage" }
            };

        protected override string TypeName { get { return "BillingCalculatedProductBundleResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingCalculatedProductBundleResponseQueryBuilder WithCalculation(BillingCalculationResponseQueryBuilder billingCalculationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("calculation", alias, billingCalculationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptCalculation()
        {
            return ExceptField("calculation");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithProductBundle(ProductBundleResponseQueryBuilder productBundleResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundle", alias, productBundleResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptProductBundle()
        {
            return ExceptField("productBundle");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithProductSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productSlug", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptProductSlug()
        {
            return ExceptField("productSlug");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithStatusMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptStatusMessage()
        {
            return ExceptField("statusMessage");
        }
    }

    public class BillingCalculationResponseQueryBuilder : GraphQlQueryBuilder<BillingCalculationResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "fixedPrice", IsComplex = true },
                new GraphQlFieldMetadata { Name = "itemSlug" },
                new GraphQlFieldMetadata { Name = "overagePrice", IsComplex = true },
                new GraphQlFieldMetadata { Name = "productPriceItem", IsComplex = true, QueryBuilderType = typeof(ProductPriceItemResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "quantity", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unitPrice", IsComplex = true }
            };

        protected override string TypeName { get { return "BillingCalculationResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingCalculationResponseQueryBuilder WithFixedPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fixedPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptFixedPrice()
        {
            return ExceptField("fixedPrice");
        }

        public BillingCalculationResponseQueryBuilder WithItemSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemSlug", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptItemSlug()
        {
            return ExceptField("itemSlug");
        }

        public BillingCalculationResponseQueryBuilder WithOveragePrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("overagePrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptOveragePrice()
        {
            return ExceptField("overagePrice");
        }

        public BillingCalculationResponseQueryBuilder WithProductPriceItem(ProductPriceItemResponseQueryBuilder productPriceItemResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productPriceItem", alias, productPriceItemResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptProductPriceItem()
        {
            return ExceptField("productPriceItem");
        }

        public BillingCalculationResponseQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public BillingCalculationResponseQueryBuilder WithUnitPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptUnitPrice()
        {
            return ExceptField("unitPrice");
        }
    }

    public class BillingProductBundleSubscriptionResponseQueryBuilder : GraphQlQueryBuilder<BillingProductBundleSubscriptionResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "productBundle", IsComplex = true, QueryBuilderType = typeof(BillingCalculatedProductBundleResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "subscriptionId" }
            };

        protected override string TypeName { get { return "BillingProductBundleSubscriptionResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingProductBundleSubscriptionResponseQueryBuilder WithProductBundle(BillingCalculatedProductBundleResponseQueryBuilder billingCalculatedProductBundleResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundle", alias, billingCalculatedProductBundleResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder ExceptProductBundle()
        {
            return ExceptField("productBundle");
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder WithSubscriptionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subscriptionId", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder ExceptSubscriptionId()
        {
            return ExceptField("subscriptionId");
        }
    }

    public class BodyValueLocationQueryBuilder : GraphQlQueryBuilder<BodyValueLocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "bodySource" },
                new GraphQlFieldMetadata { Name = "field" }
            };

        protected override string TypeName { get { return "BodyValueLocation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BodyValueLocationQueryBuilder WithBodySource(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bodySource", alias, new GraphQlDirective[] { include, skip });
        }

        public BodyValueLocationQueryBuilder ExceptBodySource()
        {
            return ExceptField("bodySource");
        }

        public BodyValueLocationQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public BodyValueLocationQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }
    }

    public class BuildingQueryBuilder : GraphQlQueryBuilder<BuildingQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(BuildingIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Building"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public BuildingQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public BuildingQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public BuildingQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public BuildingQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public BuildingQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public BuildingQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public BuildingQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public BuildingQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public BuildingQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public BuildingQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public BuildingQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public BuildingQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public BuildingQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public BuildingQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BuildingQueryBuilder WithIdentities(BuildingIdentityUnionQueryBuilder buildingIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, buildingIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public BuildingQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public BuildingQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public BuildingQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public BuildingQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public BuildingQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public BuildingQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public BuildingQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public BuildingQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public BuildingQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public BuildingQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public BuildingQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public BuildingQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public BuildingQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public BuildingQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public BuildingQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<int?> childDepth = null, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (childDepth != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "childDepth", ArgumentValue = childDepth });

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public BuildingQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public BuildingQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class BuildingCreateResponseQueryBuilder : GraphQlQueryBuilder<BuildingCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuildingCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingCreateResponseQueryBuilder WithBuilding(BuildingMutationQueryBuilder buildingMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("building", alias, buildingMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingCreateResponseQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }
    }

    public class BuildingDeleteResponseQueryBuilder : GraphQlQueryBuilder<BuildingDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "BuildingDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class BuildingIdentityUnionQueryBuilder : GraphQlQueryBuilder<BuildingIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public BuildingIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "BuildingIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class BuildingMutationQueryBuilder : GraphQlQueryBuilder<BuildingMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressMutationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "siteId" }
            };

        protected override string TypeName { get { return "BuildingMutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingMutationQueryBuilder WithAddress(AddressMutationQueryBuilder addressMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public BuildingMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BuildingMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public BuildingMutationQueryBuilder WithSiteId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptSiteId()
        {
            return ExceptField("siteId");
        }
    }

    public class BuildingUpdateResponseQueryBuilder : GraphQlQueryBuilder<BuildingUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuildingUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingUpdateResponseQueryBuilder WithBuilding(BuildingMutationQueryBuilder buildingMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("building", alias, buildingMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingUpdateResponseQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }
    }

    public class CalendarEventQueryBuilder : GraphQlQueryBuilder<CalendarEventQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "endTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasInvitations", IsComplex = true, QueryBuilderType = typeof(CalendarInvitationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasInvitees", IsComplex = true, QueryBuilderType = typeof(CalendarInviteeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(CalendarEventIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "startTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "CalendarEvent"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarEventQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public CalendarEventQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public CalendarEventQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public CalendarEventQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CalendarEventQueryBuilder WithEndTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public CalendarEventQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public CalendarEventQueryBuilder WithHasInvitations(CalendarInvitationQueryBuilder calendarInvitationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitations", alias, calendarInvitationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptHasInvitations()
        {
            return ExceptField("hasInvitations");
        }

        public CalendarEventQueryBuilder WithHasInvitees(CalendarInviteeQueryBuilder calendarInviteeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitees", alias, calendarInviteeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptHasInvitees()
        {
            return ExceptField("hasInvitees");
        }

        public CalendarEventQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CalendarEventQueryBuilder WithIdentities(CalendarEventIdentityUnionQueryBuilder calendarEventIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, calendarEventIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public CalendarEventQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public CalendarEventQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CalendarEventQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public CalendarEventQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class CalendarEventIdentityUnionQueryBuilder : GraphQlQueryBuilder<CalendarEventIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public CalendarEventIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "CalendarEventIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarEventIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class CalendarInvitationQueryBuilder : GraphQlQueryBuilder<CalendarInvitationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "email", IsComplex = true, QueryBuilderType = typeof(EmailAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasInvitee", IsComplex = true, QueryBuilderType = typeof(CalendarInviteeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(CalendarInvitationIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "response" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "CalendarInvitation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarInvitationQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public CalendarInvitationQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public CalendarInvitationQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public CalendarInvitationQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CalendarInvitationQueryBuilder WithEmail(EmailAddressQueryBuilder emailAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("email", alias, emailAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CalendarInvitationQueryBuilder WithEvent(CalendarEventQueryBuilder calendarEventQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("event", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public CalendarInvitationQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public CalendarInvitationQueryBuilder WithHasInvitee(CalendarInviteeQueryBuilder calendarInviteeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitee", alias, calendarInviteeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptHasInvitee()
        {
            return ExceptField("hasInvitee");
        }

        public CalendarInvitationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CalendarInvitationQueryBuilder WithIdentities(CalendarInvitationIdentityUnionQueryBuilder calendarInvitationIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, calendarInvitationIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public CalendarInvitationQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public CalendarInvitationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CalendarInvitationQueryBuilder WithResponse(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("response", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptResponse()
        {
            return ExceptField("response");
        }

        public CalendarInvitationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class CalendarInvitationIdentityUnionQueryBuilder : GraphQlQueryBuilder<CalendarInvitationIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public CalendarInvitationIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "CalendarInvitationIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarInvitationIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class CalendarInviteeQueryBuilder : GraphQlQueryBuilder<CalendarInviteeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public CalendarInviteeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "CalendarInvitee"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarInviteeQueryBuilder WithPersonFragment(PersonQueryBuilder personQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(personQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInviteeQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class CertMatchQueryBuilder : GraphQlQueryBuilder<CertMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "caCerts", IsComplex = true, QueryBuilderType = typeof(CertificateAuthorityBundleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dnsName" },
                new GraphQlFieldMetadata { Name = "serialNumber" }
            };

        protected override string TypeName { get { return "CertMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertMatchQueryBuilder WithCaCerts(CertificateAuthorityBundleQueryBuilder certificateAuthorityBundleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("caCerts", alias, certificateAuthorityBundleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptCaCerts()
        {
            return ExceptField("caCerts");
        }

        public CertMatchQueryBuilder WithDnsName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dnsName", alias, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptDnsName()
        {
            return ExceptField("dnsName");
        }

        public CertMatchQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }
    }

    public class CertificateQueryBuilder : GraphQlQueryBuilder<CertificateQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "certificate" },
                new GraphQlFieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "Certificate"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertificateQueryBuilder WithCertificate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("certificate", alias, new GraphQlDirective[] { include, skip });
        }

        public CertificateQueryBuilder ExceptCertificate()
        {
            return ExceptField("certificate");
        }

        public CertificateQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CertificateQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class CertificateAuthorityBundleQueryBuilder : GraphQlQueryBuilder<CertificateAuthorityBundleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "caCertificates", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) }
            };

        protected override string TypeName { get { return "CertificateAuthorityBundle"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertificateAuthorityBundleQueryBuilder WithCaCertificates(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("caCertificates", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CertificateAuthorityBundleQueryBuilder ExceptCaCertificates()
        {
            return ExceptField("caCertificates");
        }
    }

    public class CollectionQueryBuilder : GraphQlQueryBuilder<CollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "feeds", IsComplex = true, QueryBuilderType = typeof(FeedsUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feedsEdges", IsComplex = true, QueryBuilderType = typeof(FeedsEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasLocation", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasLocationEdges", IsComplex = true, QueryBuilderType = typeof(HasLocationEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(HasPartUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(CollectionIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(IsFedByUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Collection"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CollectionQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public CollectionQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public CollectionQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public CollectionQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CollectionQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public CollectionQueryBuilder WithFeeds(FeedsUnionQueryBuilder feedsUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("feeds", alias, feedsUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptFeeds()
        {
            return ExceptField("feeds");
        }

        public CollectionQueryBuilder WithFeedsEdges(FeedsEdgeQueryBuilder feedsEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feedsEdges", alias, feedsEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptFeedsEdges()
        {
            return ExceptField("feedsEdges");
        }

        public CollectionQueryBuilder WithHasLocation(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasLocation", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptHasLocation()
        {
            return ExceptField("hasLocation");
        }

        public CollectionQueryBuilder WithHasLocationEdges(HasLocationEdgeQueryBuilder hasLocationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasLocationEdges", alias, hasLocationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptHasLocationEdges()
        {
            return ExceptField("hasLocationEdges");
        }

        public CollectionQueryBuilder WithHasPart(HasPartUnionQueryBuilder hasPartUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, hasPartUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public CollectionQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public CollectionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CollectionQueryBuilder WithIdentities(CollectionIdentityUnionQueryBuilder collectionIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, collectionIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public CollectionQueryBuilder WithIsFedBy(IsFedByUnionQueryBuilder isFedByUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, isFedByUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public CollectionQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public CollectionQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public CollectionQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CollectionQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filer = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filer != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filer", ArgumentValue = filer });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CollectionQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public CollectionQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CollectionQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class CollectionIdentityUnionQueryBuilder : GraphQlQueryBuilder<CollectionIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public CollectionIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "CollectionIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CollectionIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CollectionIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ConnectorQueryBuilder : GraphQlQueryBuilder<ConnectorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "baseUrl" },
                new GraphQlFieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "config", IsComplex = true },
                new GraphQlFieldMetadata { Name = "configHash" },
                new GraphQlFieldMetadata { Name = "connectorType", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectorTypeId" },
                new GraphQlFieldMetadata { Name = "contributions", IsComplex = true, QueryBuilderType = typeof(ConnectorContributionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "direction" },
                new GraphQlFieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastSeen", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastUpdatedBy" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "stateDetails" },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "userId" },
                new GraphQlFieldMetadata { Name = "workflowId" }
            };

        protected override string TypeName { get { return "Connector"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorQueryBuilder WithBaseUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptBaseUrl()
        {
            return ExceptField("baseUrl");
        }

        public ConnectorQueryBuilder WithBuildings(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("buildings", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public ConnectorQueryBuilder WithConfig(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("config", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConfig()
        {
            return ExceptField("config");
        }

        public ConnectorQueryBuilder WithConfigHash(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configHash", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConfigHash()
        {
            return ExceptField("configHash");
        }

        public ConnectorQueryBuilder WithConnectorType(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorType", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConnectorType()
        {
            return ExceptField("connectorType");
        }

        public ConnectorQueryBuilder WithConnectorTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectorTypeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorQueryBuilder WithContributions(ConnectorContributionQueryBuilder connectorContributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("contributions", alias, connectorContributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptContributions()
        {
            return ExceptField("contributions");
        }

        public ConnectorQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public ConnectorQueryBuilder WithDirection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direction", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptDirection()
        {
            return ExceptField("direction");
        }

        public ConnectorQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public ConnectorQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorQueryBuilder WithLastSeen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeen", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptLastSeen()
        {
            return ExceptField("lastSeen");
        }

        public ConnectorQueryBuilder WithLastUpdatedBy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdatedBy", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptLastUpdatedBy()
        {
            return ExceptField("lastUpdatedBy");
        }

        public ConnectorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ConnectorQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public ConnectorQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public ConnectorQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public ConnectorQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public ConnectorQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public ConnectorQueryBuilder WithStateDetails(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateDetails", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptStateDetails()
        {
            return ExceptField("stateDetails");
        }

        public ConnectorQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ConnectorQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public ConnectorQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ConnectorQueryBuilder WithWorkflowId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workflowId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptWorkflowId()
        {
            return ExceptField("workflowId");
        }
    }

    public class ConnectorAuthQueryBuilder : GraphQlQueryBuilder<ConnectorAuthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastAccessed", IsComplex = true },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true }
            };

        protected override string TypeName { get { return "ConnectorAuth"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public ConnectorAuthQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorAuthQueryBuilder WithLastAccessed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastAccessed", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptLastAccessed()
        {
            return ExceptField("lastAccessed");
        }

        public ConnectorAuthQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }
    }

    public class ConnectorAuthCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorAuthCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthCreateResponseQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthCreateResponseQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }
    }

    public class ConnectorAuthDeleteResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorAuthDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorAuthResponseSecretQueryBuilder : GraphQlQueryBuilder<ConnectorAuthResponseSecretQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "staticToken", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthStaticTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usernamePassword", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthUsernamePasswordQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorAuthResponseSecret"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthResponseSecretQueryBuilder WithStaticToken(ConnectorAuthStaticTokenQueryBuilder connectorAuthStaticTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staticToken", alias, connectorAuthStaticTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthResponseSecretQueryBuilder ExceptStaticToken()
        {
            return ExceptField("staticToken");
        }

        public ConnectorAuthResponseSecretQueryBuilder WithUsernamePassword(ConnectorAuthUsernamePasswordQueryBuilder connectorAuthUsernamePasswordQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("usernamePassword", alias, connectorAuthUsernamePasswordQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthResponseSecretQueryBuilder ExceptUsernamePassword()
        {
            return ExceptField("usernamePassword");
        }
    }

    public class ConnectorAuthStaticTokenQueryBuilder : GraphQlQueryBuilder<ConnectorAuthStaticTokenQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "token" }
            };

        protected override string TypeName { get { return "ConnectorAuthStaticToken"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthStaticTokenQueryBuilder WithToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthStaticTokenQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }
    }

    public class ConnectorAuthUpdateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorAuthUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthUpdateResponseQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthUpdateResponseQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }
    }

    public class ConnectorAuthUsernamePasswordQueryBuilder : GraphQlQueryBuilder<ConnectorAuthUsernamePasswordQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "password" },
                new GraphQlFieldMetadata { Name = "username" }
            };

        protected override string TypeName { get { return "ConnectorAuthUsernamePassword"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthUsernamePasswordQueryBuilder WithPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("password", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthUsernamePasswordQueryBuilder ExceptPassword()
        {
            return ExceptField("password");
        }

        public ConnectorAuthUsernamePasswordQueryBuilder WithUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("username", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthUsernamePasswordQueryBuilder ExceptUsername()
        {
            return ExceptField("username");
        }
    }

    public class ConnectorContributionQueryBuilder : GraphQlQueryBuilder<ConnectorContributionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "count", IsComplex = true },
                new GraphQlFieldMetadata { Name = "systemType" }
            };

        protected override string TypeName { get { return "ConnectorContribution"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorContributionQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorContributionQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public ConnectorContributionQueryBuilder WithSystemType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemType", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorContributionQueryBuilder ExceptSystemType()
        {
            return ExceptField("systemType");
        }
    }

    public class ConnectorCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connector", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorCreateResponseQueryBuilder WithConnector(ConnectorQueryBuilder connectorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connector", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorCreateResponseQueryBuilder ExceptConnector()
        {
            return ExceptField("connector");
        }
    }

    public class ConnectorDeleteResponseQueryBuilder : GraphQlQueryBuilder<ConnectorDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorRequestQueryBuilder : GraphQlQueryBuilder<ConnectorRequestQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectorTypeId" },
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "ConnectorRequest"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRequestQueryBuilder WithConnectorTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectorTypeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorRequestQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class ConnectorRequestCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorRequestCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "request", IsComplex = true, QueryBuilderType = typeof(ConnectorRequestQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorRequestCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRequestCreateResponseQueryBuilder WithRequest(ConnectorRequestQueryBuilder connectorRequestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("request", alias, connectorRequestQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestCreateResponseQueryBuilder ExceptRequest()
        {
            return ExceptField("request");
        }
    }

    public class ConnectorRestartResponseQueryBuilder : GraphQlQueryBuilder<ConnectorRestartResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorRestartResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRestartResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRestartResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorStartResponseQueryBuilder : GraphQlQueryBuilder<ConnectorStartResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorStartResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorStartResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorStartResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorStopResponseQueryBuilder : GraphQlQueryBuilder<ConnectorStopResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorStopResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorStopResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorStopResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorTypeQueryBuilder : GraphQlQueryBuilder<ConnectorTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "configSchema", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "direction" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataRecordQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "runtimeVersion" },
                new GraphQlFieldMetadata { Name = "taskQueue" },
                new GraphQlFieldMetadata { Name = "version" },
                new GraphQlFieldMetadata { Name = "webhookReceiveStorage" }
            };

        protected override string TypeName { get { return "ConnectorType"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorTypeQueryBuilder WithConfigSchema(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configSchema", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptConfigSchema()
        {
            return ExceptField("configSchema");
        }

        public ConnectorTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ConnectorTypeQueryBuilder WithDirection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direction", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptDirection()
        {
            return ExceptField("direction");
        }

        public ConnectorTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorTypeQueryBuilder WithMetadata(MetadataRecordQueryBuilder metadataRecordQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataRecordQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public ConnectorTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ConnectorTypeQueryBuilder WithRuntimeVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runtimeVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptRuntimeVersion()
        {
            return ExceptField("runtimeVersion");
        }

        public ConnectorTypeQueryBuilder WithTaskQueue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taskQueue", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptTaskQueue()
        {
            return ExceptField("taskQueue");
        }

        public ConnectorTypeQueryBuilder WithVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("version", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptVersion()
        {
            return ExceptField("version");
        }

        public ConnectorTypeQueryBuilder WithWebhookReceiveStorage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webhookReceiveStorage", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptWebhookReceiveStorage()
        {
            return ExceptField("webhookReceiveStorage");
        }
    }

    public class ConnectorTypeListAvailableResponseQueryBuilder : GraphQlQueryBuilder<ConnectorTypeListAvailableResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "available", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "requested", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "uponRequest", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorTypeListAvailableResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorTypeListAvailableResponseQueryBuilder WithAvailable(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("available", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeListAvailableResponseQueryBuilder ExceptAvailable()
        {
            return ExceptField("available");
        }

        public ConnectorTypeListAvailableResponseQueryBuilder WithRequested(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("requested", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeListAvailableResponseQueryBuilder ExceptRequested()
        {
            return ExceptField("requested");
        }

        public ConnectorTypeListAvailableResponseQueryBuilder WithUponRequest(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("uponRequest", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeListAvailableResponseQueryBuilder ExceptUponRequest()
        {
            return ExceptField("uponRequest");
        }
    }

    public class ConnectorUpdateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connector", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorUpdateResponseQueryBuilder WithConnector(ConnectorQueryBuilder connectorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connector", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpdateResponseQueryBuilder ExceptConnector()
        {
            return ExceptField("connector");
        }
    }

    public class ConnectorUpsertConfigResponseQueryBuilder : GraphQlQueryBuilder<ConnectorUpsertConfigResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "config", IsComplex = true },
                new GraphQlFieldMetadata { Name = "configHash" },
                new GraphQlFieldMetadata { Name = "configUnchanged" },
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "ConnectorUpsertConfigResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorUpsertConfigResponseQueryBuilder WithConfig(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("config", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptConfig()
        {
            return ExceptField("config");
        }

        public ConnectorUpsertConfigResponseQueryBuilder WithConfigHash(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configHash", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptConfigHash()
        {
            return ExceptField("configHash");
        }

        public ConnectorUpsertConfigResponseQueryBuilder WithConfigUnchanged(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configUnchanged", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptConfigUnchanged()
        {
            return ExceptField("configUnchanged");
        }

        public ConnectorUpsertConfigResponseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class ContributionRequestQueryBuilder : GraphQlQueryBuilder<ContributionRequestQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "properties", IsComplex = true, QueryBuilderType = typeof(ContributionRequestPropertyValuesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "target", IsComplex = true, QueryBuilderType = typeof(ContributionRequestTargetEntityQueryBuilder) }
            };

        protected override string TypeName { get { return "ContributionRequest"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ContributionRequestQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ContributionRequestQueryBuilder WithProperties(ContributionRequestPropertyValuesQueryBuilder contributionRequestPropertyValuesQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("properties", alias, contributionRequestPropertyValuesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestQueryBuilder ExceptProperties()
        {
            return ExceptField("properties");
        }

        public ContributionRequestQueryBuilder WithTarget(ContributionRequestTargetEntityQueryBuilder contributionRequestTargetEntityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("target", alias, contributionRequestTargetEntityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class ContributionRequestCreateResponseQueryBuilder : GraphQlQueryBuilder<ContributionRequestCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "contributionRequest", IsComplex = true, QueryBuilderType = typeof(ContributionRequestQueryBuilder) }
            };

        protected override string TypeName { get { return "ContributionRequestCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ContributionRequestCreateResponseQueryBuilder WithContributionRequest(ContributionRequestQueryBuilder contributionRequestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("contributionRequest", alias, contributionRequestQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestCreateResponseQueryBuilder ExceptContributionRequest()
        {
            return ExceptField("contributionRequest");
        }
    }

    public class ContributionRequestPropertyValuesQueryBuilder : GraphQlQueryBuilder<ContributionRequestPropertyValuesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "additionalName" },
                new GraphQlFieldMetadata { Name = "address" },
                new GraphQlFieldMetadata { Name = "attachment", IsComplex = true },
                new GraphQlFieldMetadata { Name = "callInfo" },
                new GraphQlFieldMetadata { Name = "countryName" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "deviceModelId" },
                new GraphQlFieldMetadata { Name = "elevation" },
                new GraphQlFieldMetadata { Name = "endTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "familyName" },
                new GraphQlFieldMetadata { Name = "firmwareVersion" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "givenName" },
                new GraphQlFieldMetadata { Name = "hostname" },
                new GraphQlFieldMetadata { Name = "iCalUid" },
                new GraphQlFieldMetadata { Name = "image" },
                new GraphQlFieldMetadata { Name = "ipv4Address", IsComplex = true },
                new GraphQlFieldMetadata { Name = "ipv6Address", IsComplex = true },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "locality" },
                new GraphQlFieldMetadata { Name = "macAddress" },
                new GraphQlFieldMetadata { Name = "maxLimit" },
                new GraphQlFieldMetadata { Name = "maxOccupancy" },
                new GraphQlFieldMetadata { Name = "minLimit" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "postalCode" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "response" },
                new GraphQlFieldMetadata { Name = "seeAlso" },
                new GraphQlFieldMetadata { Name = "serialNumber" },
                new GraphQlFieldMetadata { Name = "stateTexts", IsComplex = true },
                new GraphQlFieldMetadata { Name = "streetAddress" },
                new GraphQlFieldMetadata { Name = "systemType", IsComplex = true },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unit" },
                new GraphQlFieldMetadata { Name = "valueType" }
            };

        protected override string TypeName { get { return "ContributionRequestPropertyValues"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ContributionRequestPropertyValuesQueryBuilder WithAdditionalName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("additionalName", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptAdditionalName()
        {
            return ExceptField("additionalName");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithAttachment(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attachment", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptAttachment()
        {
            return ExceptField("attachment");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithCallInfo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("callInfo", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptCallInfo()
        {
            return ExceptField("callInfo");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithDeviceModelId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deviceModelId", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptDeviceModelId()
        {
            return ExceptField("deviceModelId");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithElevation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("elevation", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptElevation()
        {
            return ExceptField("elevation");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithEndTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithFamilyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("familyName", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptFamilyName()
        {
            return ExceptField("familyName");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithFirmwareVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firmwareVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptFirmwareVersion()
        {
            return ExceptField("firmwareVersion");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithGivenName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("givenName", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptGivenName()
        {
            return ExceptField("givenName");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithHostname(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hostname", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptHostname()
        {
            return ExceptField("hostname");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithICalUid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("iCalUid", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptICalUid()
        {
            return ExceptField("iCalUid");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithImage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("image", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithIpv4Address(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ipv4Address", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptIpv4Address()
        {
            return ExceptField("ipv4Address");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithIpv6Address(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ipv6Address", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptIpv6Address()
        {
            return ExceptField("ipv6Address");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithLocality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("locality", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptLocality()
        {
            return ExceptField("locality");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithMacAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("macAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptMacAddress()
        {
            return ExceptField("macAddress");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithMaxLimit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxLimit", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptMaxLimit()
        {
            return ExceptField("maxLimit");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithMaxOccupancy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxOccupancy", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptMaxOccupancy()
        {
            return ExceptField("maxOccupancy");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithMinLimit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minLimit", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptMinLimit()
        {
            return ExceptField("minLimit");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithResponse(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("response", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptResponse()
        {
            return ExceptField("response");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithSeeAlso(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seeAlso", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptSeeAlso()
        {
            return ExceptField("seeAlso");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithStateTexts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateTexts", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptStateTexts()
        {
            return ExceptField("stateTexts");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithStreetAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streetAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptStreetAddress()
        {
            return ExceptField("streetAddress");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithSystemType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemType", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptSystemType()
        {
            return ExceptField("systemType");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unit", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptUnit()
        {
            return ExceptField("unit");
        }

        public ContributionRequestPropertyValuesQueryBuilder WithValueType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("valueType", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestPropertyValuesQueryBuilder ExceptValueType()
        {
            return ExceptField("valueType");
        }
    }

    public class ContributionRequestTargetEntityQueryBuilder : GraphQlQueryBuilder<ContributionRequestTargetEntityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "ContributionRequestTargetEntity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ContributionRequestTargetEntityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ContributionRequestTargetEntityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class DeviceLibraryModelQueryBuilder : GraphQlQueryBuilder<DeviceLibraryModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "imageUrl" },
                new GraphQlFieldMetadata { Name = "manufacturer", IsComplex = true, QueryBuilderType = typeof(DeviceManufacturerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manufacturerId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "seeAlsoUrls", IsComplex = true }
            };

        protected override string TypeName { get { return "DeviceLibraryModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceLibraryModelQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DeviceLibraryModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DeviceLibraryModelQueryBuilder WithImageUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imageUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptImageUrl()
        {
            return ExceptField("imageUrl");
        }

        public DeviceLibraryModelQueryBuilder WithManufacturer(DeviceManufacturerQueryBuilder deviceManufacturerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manufacturer", alias, deviceManufacturerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptManufacturer()
        {
            return ExceptField("manufacturer");
        }

        public DeviceLibraryModelQueryBuilder WithManufacturerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("manufacturerId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptManufacturerId()
        {
            return ExceptField("manufacturerId");
        }

        public DeviceLibraryModelQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public DeviceLibraryModelQueryBuilder WithSeeAlsoUrls(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seeAlsoUrls", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceLibraryModelQueryBuilder ExceptSeeAlsoUrls()
        {
            return ExceptField("seeAlsoUrls");
        }
    }

    public class DeviceManufacturerQueryBuilder : GraphQlQueryBuilder<DeviceManufacturerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "logoUrl" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "DeviceManufacturer"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceManufacturerQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DeviceManufacturerQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DeviceManufacturerQueryBuilder WithLogoUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logoUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptLogoUrl()
        {
            return ExceptField("logoUrl");
        }

        public DeviceManufacturerQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class DeviceModelQueryBuilder : GraphQlQueryBuilder<DeviceModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(DeviceModelIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manufacturedBy", IsComplex = true, QueryBuilderType = typeof(AgentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manufacturedByEdges", IsComplex = true, QueryBuilderType = typeof(ManufacturedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "DeviceModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceModelQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public DeviceModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public DeviceModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public DeviceModelQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DeviceModelQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public DeviceModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DeviceModelQueryBuilder WithIdentities(DeviceModelIdentityUnionQueryBuilder deviceModelIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, deviceModelIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public DeviceModelQueryBuilder WithManufacturedBy(AgentQueryBuilder agentQueryBuilder, QueryBuilderParameter<AgentFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("manufacturedBy", alias, agentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DeviceModelQueryBuilder ExceptManufacturedBy()
        {
            return ExceptField("manufacturedBy");
        }

        public DeviceModelQueryBuilder WithManufacturedByEdges(ManufacturedByEdgeQueryBuilder manufacturedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manufacturedByEdges", alias, manufacturedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptManufacturedByEdges()
        {
            return ExceptField("manufacturedByEdges");
        }

        public DeviceModelQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public DeviceModelQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public DeviceModelQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class DeviceModelIdentityUnionQueryBuilder : GraphQlQueryBuilder<DeviceModelIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public DeviceModelIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "DeviceModelIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceModelIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class DurationQueryBuilder : GraphQlQueryBuilder<DurationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "nanos" },
                new GraphQlFieldMetadata { Name = "seconds", IsComplex = true }
            };

        protected override string TypeName { get { return "Duration"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DurationQueryBuilder WithNanos(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nanos", alias, new GraphQlDirective[] { include, skip });
        }

        public DurationQueryBuilder ExceptNanos()
        {
            return ExceptField("nanos");
        }

        public DurationQueryBuilder WithSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seconds", alias, new GraphQlDirective[] { include, skip });
        }

        public DurationQueryBuilder ExceptSeconds()
        {
            return ExceptField("seconds");
        }
    }

    public class EdgeQueryBuilder : GraphQlQueryBuilder<EdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        public EdgeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Edge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public EdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public EdgeQueryBuilder WithFeedsEdgeFragment(FeedsEdgeQueryBuilder feedsEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(feedsEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasAccessCredentialEdgeFragment(HasAccessCredentialEdgeQueryBuilder hasAccessCredentialEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasAccessCredentialEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasAssignedGroupEdgeFragment(HasAssignedGroupEdgeQueryBuilder hasAssignedGroupEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasAssignedGroupEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasAssigneeEdgeFragment(HasAssigneeEdgeQueryBuilder hasAssigneeEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasAssigneeEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasBillEdgeFragment(HasBillEdgeQueryBuilder hasBillEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasBillEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasDeviceModelEdgeFragment(HasDeviceModelEdgeQueryBuilder hasDeviceModelEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasDeviceModelEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasHeartbeatEdgeFragment(HasHeartbeatEdgeQueryBuilder hasHeartbeatEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasHeartbeatEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasLocationEdgeFragment(HasLocationEdgeQueryBuilder hasLocationEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasLocationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasMemberEdgeFragment(HasMemberEdgeQueryBuilder hasMemberEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasMemberEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasPartEdgeFragment(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasPointEdgeFragment(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasPrimaryContactEdgeFragment(HasPrimaryContactEdgeQueryBuilder hasPrimaryContactEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasPrimaryContactEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithHasProviderEdgeFragment(HasProviderEdgeQueryBuilder hasProviderEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(hasProviderEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsAdjacentToEdgeFragment(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsBilledToEdgeFragment(IsBilledToEdgeQueryBuilder isBilledToEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isBilledToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsClosedByEdgeFragment(IsClosedByEdgeQueryBuilder isClosedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isClosedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsCreatedByEdgeFragment(IsCreatedByEdgeQueryBuilder isCreatedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isCreatedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsFedByEdgeFragment(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsLocationOfEdgeFragment(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsMemberOfEdgeFragment(IsMemberOfEdgeQueryBuilder isMemberOfEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isMemberOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsPartOfEdgeFragment(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsPointOfEdgeFragment(IsPointOfEdgeQueryBuilder isPointOfEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isPointOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsReportedByEdgeFragment(IsReportedByEdgeQueryBuilder isReportedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isReportedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsResponsibilityOfEdgeFragment(IsResponsibilityOfEdgeQueryBuilder isResponsibilityOfEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isResponsibilityOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsResponsibleForEdgeFragment(IsResponsibleForEdgeQueryBuilder isResponsibleForEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isResponsibleForEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithIsServedByEdgeFragment(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithManufacturedByEdgeFragment(ManufacturedByEdgeQueryBuilder manufacturedByEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(manufacturedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithRelatesToEdgeFragment(RelatesToEdgeQueryBuilder relatesToEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(relatesToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithServesEdgeFragment(ServesEdgeQueryBuilder servesEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(servesEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class EmailAddressQueryBuilder : GraphQlQueryBuilder<EmailAddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "address" },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(EmailAddressIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "EmailAddress"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailAddressQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public EmailAddressQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public EmailAddressQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EmailAddressQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EmailAddressQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public EmailAddressQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public EmailAddressQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EmailAddressQueryBuilder WithIdentities(EmailAddressIdentityUnionQueryBuilder emailAddressIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, emailAddressIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public EmailAddressQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public EmailAddressQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EmailAddressQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class EmailAddressIdentityQueryBuilder : GraphQlQueryBuilder<EmailAddressIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "EmailAddressIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailAddressIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EmailAddressIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EmailAddressIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EmailAddressIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public EmailAddressIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public EmailAddressIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class EmailAddressIdentityModelQueryBuilder : GraphQlQueryBuilder<EmailAddressIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public EmailAddressIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "EmailAddressIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailAddressIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EmailAddressIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EmailAddressIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EmailAddressIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public EmailAddressIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public EmailAddressIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public EmailAddressIdentityModelQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class EmailAddressIdentityUnionQueryBuilder : GraphQlQueryBuilder<EmailAddressIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public EmailAddressIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "EmailAddressIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailAddressIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class EmailIdentityQueryBuilder : GraphQlQueryBuilder<EmailIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "EmailIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EmailIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EmailIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EmailIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public EmailIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public EmailIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class EmailIdentityModelQueryBuilder : GraphQlQueryBuilder<EmailIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public EmailIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "EmailIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EmailIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EmailIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EmailIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public EmailIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public EmailIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public EmailIdentityModelQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class EventQueryBuilder : GraphQlQueryBuilder<EventQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "endTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "startTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        public EventQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Event"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EventQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public EventQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public EventQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public EventQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public EventQueryBuilder WithEndTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public EventQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public EventQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EventQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public EventQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EventQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public EventQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public EventQueryBuilder WithCalendarEventFragment(CalendarEventQueryBuilder calendarEventQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(calendarEventQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ExternalIdentityQueryBuilder : GraphQlQueryBuilder<ExternalIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "ExternalIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ExternalIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public ExternalIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public ExternalIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ExternalIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public ExternalIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public ExternalIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class ExternalIdentityModelQueryBuilder : GraphQlQueryBuilder<ExternalIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public ExternalIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "ExternalIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ExternalIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public ExternalIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public ExternalIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ExternalIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public ExternalIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public ExternalIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ExternalIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public ExternalIdentityModelQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class FeedsEdgeQueryBuilder : GraphQlQueryBuilder<FeedsEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "FeedsEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FeedsEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedsEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public FeedsEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class FeedsUnionQueryBuilder : GraphQlQueryBuilder<FeedsUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public FeedsUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "FeedsUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FeedsUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class FloorQueryBuilder : GraphQlQueryBuilder<FloorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(FloorIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true },
                new GraphQlFieldMetadata { Name = "zones", IsComplex = true, QueryBuilderType = typeof(ZoneQueryBuilder) }
            };

        protected override string TypeName { get { return "Floor"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorQueryBuilder WithBuilding(BuildingQueryBuilder buildingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("building", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }

        public FloorQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public FloorQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public FloorQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public FloorQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public FloorQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public FloorQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public FloorQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public FloorQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public FloorQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public FloorQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public FloorQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public FloorQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public FloorQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public FloorQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorQueryBuilder WithIdentities(FloorIdentityUnionQueryBuilder floorIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, floorIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public FloorQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public FloorQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public FloorQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public FloorQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public FloorQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public FloorQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public FloorQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public FloorQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public FloorQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public FloorQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public FloorQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public FloorQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public FloorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public FloorQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public FloorQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<int?> childDepth = null, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (childDepth != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "childDepth", ArgumentValue = childDepth });

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public FloorQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public FloorQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FloorQueryBuilder WithZones(ZoneQueryBuilder zoneQueryBuilder, QueryBuilderParameter<ZoneFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("zones", alias, zoneQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptZones()
        {
            return ExceptField("zones");
        }
    }

    public class FloorCreateResponseQueryBuilder : GraphQlQueryBuilder<FloorCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "FloorCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorCreateResponseQueryBuilder WithFloor(FloorMutationQueryBuilder floorMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("floor", alias, floorMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorCreateResponseQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }
    }

    public class FloorDeleteResponseQueryBuilder : GraphQlQueryBuilder<FloorDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "FloorDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class FloorIdentityUnionQueryBuilder : GraphQlQueryBuilder<FloorIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public FloorIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "FloorIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class FloorLevelIdentityQueryBuilder : GraphQlQueryBuilder<FloorLevelIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "FloorLevelIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorLevelIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public FloorLevelIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public FloorLevelIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorLevelIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public FloorLevelIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public FloorLevelIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class FloorLevelIdentityModelQueryBuilder : GraphQlQueryBuilder<FloorLevelIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public FloorLevelIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "FloorLevelIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorLevelIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public FloorLevelIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public FloorLevelIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorLevelIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public FloorLevelIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public FloorLevelIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorLevelIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public FloorLevelIdentityModelQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class FloorMutationQueryBuilder : GraphQlQueryBuilder<FloorMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "buildingId" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "FloorMutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorMutationQueryBuilder WithBuildingId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildingId", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptBuildingId()
        {
            return ExceptField("buildingId");
        }

        public FloorMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public FloorMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorMutationQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public FloorMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public FloorMutationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class FloorUpdateResponseQueryBuilder : GraphQlQueryBuilder<FloorUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "FloorUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorUpdateResponseQueryBuilder WithFloor(FloorMutationQueryBuilder floorMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("floor", alias, floorMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorUpdateResponseQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }
    }

    public class GatewayQueryBuilder : GraphQlQueryBuilder<GatewayQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "active", IsComplex = true, QueryBuilderType = typeof(GatewayActiveDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "assignment", IsComplex = true, QueryBuilderType = typeof(GatewayAssignmentDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "firstBoot", IsComplex = true, QueryBuilderType = typeof(GatewayFirstBootDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gatewayId" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "provisioning", IsComplex = true, QueryBuilderType = typeof(GatewayProvisioningDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "registration", IsComplex = true, QueryBuilderType = typeof(GatewayRegistrationDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rma", IsComplex = true, QueryBuilderType = typeof(GatewayRmaDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "shipping", IsComplex = true, QueryBuilderType = typeof(GatewayShippingDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "stateTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "suspension", IsComplex = true, QueryBuilderType = typeof(GatewaySuspensionDetailsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "termination", IsComplex = true, QueryBuilderType = typeof(GatewayTerminationDetailsQueryBuilder) }
            };

        protected override string TypeName { get { return "Gateway"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayQueryBuilder WithActive(GatewayActiveDetailsQueryBuilder gatewayActiveDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("active", alias, gatewayActiveDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptActive()
        {
            return ExceptField("active");
        }

        public GatewayQueryBuilder WithAssignment(GatewayAssignmentDetailsQueryBuilder gatewayAssignmentDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("assignment", alias, gatewayAssignmentDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptAssignment()
        {
            return ExceptField("assignment");
        }

        public GatewayQueryBuilder WithFirstBoot(GatewayFirstBootDetailsQueryBuilder gatewayFirstBootDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("firstBoot", alias, gatewayFirstBootDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptFirstBoot()
        {
            return ExceptField("firstBoot");
        }

        public GatewayQueryBuilder WithGatewayId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gatewayId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptGatewayId()
        {
            return ExceptField("gatewayId");
        }

        public GatewayQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public GatewayQueryBuilder WithProvisioning(GatewayProvisioningDetailsQueryBuilder gatewayProvisioningDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("provisioning", alias, gatewayProvisioningDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptProvisioning()
        {
            return ExceptField("provisioning");
        }

        public GatewayQueryBuilder WithRegistration(GatewayRegistrationDetailsQueryBuilder gatewayRegistrationDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("registration", alias, gatewayRegistrationDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptRegistration()
        {
            return ExceptField("registration");
        }

        public GatewayQueryBuilder WithRma(GatewayRmaDetailsQueryBuilder gatewayRmaDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rma", alias, gatewayRmaDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptRma()
        {
            return ExceptField("rma");
        }

        public GatewayQueryBuilder WithShipping(GatewayShippingDetailsQueryBuilder gatewayShippingDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shipping", alias, gatewayShippingDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptShipping()
        {
            return ExceptField("shipping");
        }

        public GatewayQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public GatewayQueryBuilder WithStateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptStateTime()
        {
            return ExceptField("stateTime");
        }

        public GatewayQueryBuilder WithSuspension(GatewaySuspensionDetailsQueryBuilder gatewaySuspensionDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("suspension", alias, gatewaySuspensionDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptSuspension()
        {
            return ExceptField("suspension");
        }

        public GatewayQueryBuilder WithTermination(GatewayTerminationDetailsQueryBuilder gatewayTerminationDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("termination", alias, gatewayTerminationDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptTermination()
        {
            return ExceptField("termination");
        }
    }

    public class GatewayActiveDetailsQueryBuilder : GraphQlQueryBuilder<GatewayActiveDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "lastSeenTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "ugagentVersion" }
            };

        protected override string TypeName { get { return "GatewayActiveDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayActiveDetailsQueryBuilder WithLastSeenTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeenTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayActiveDetailsQueryBuilder ExceptLastSeenTime()
        {
            return ExceptField("lastSeenTime");
        }

        public GatewayActiveDetailsQueryBuilder WithUgagentVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ugagentVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayActiveDetailsQueryBuilder ExceptUgagentVersion()
        {
            return ExceptField("ugagentVersion");
        }
    }

    public class GatewayAssignResponseQueryBuilder : GraphQlQueryBuilder<GatewayAssignResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GatewayAssignResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayAssignResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GatewayAssignmentDetailsQueryBuilder : GraphQlQueryBuilder<GatewayAssignmentDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "assignmentTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "physicalPlaceId" },
                new GraphQlFieldMetadata { Name = "preciseGeoLocation", IsComplex = true },
                new GraphQlFieldMetadata { Name = "servesPlaceIds", IsComplex = true },
                new GraphQlFieldMetadata { Name = "servesSystemTypes", IsComplex = true },
                new GraphQlFieldMetadata { Name = "supportAccessAllowed" },
                new GraphQlFieldMetadata { Name = "supportAccessExpiration", IsComplex = true },
                new GraphQlFieldMetadata { Name = "uniqueName" }
            };

        protected override string TypeName { get { return "GatewayAssignmentDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayAssignmentDetailsQueryBuilder WithAssignmentTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assignmentTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptAssignmentTime()
        {
            return ExceptField("assignmentTime");
        }

        public GatewayAssignmentDetailsQueryBuilder WithPhysicalPlaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalPlaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptPhysicalPlaceId()
        {
            return ExceptField("physicalPlaceId");
        }

        public GatewayAssignmentDetailsQueryBuilder WithPreciseGeoLocation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("preciseGeoLocation", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptPreciseGeoLocation()
        {
            return ExceptField("preciseGeoLocation");
        }

        public GatewayAssignmentDetailsQueryBuilder WithServesPlaceIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("servesPlaceIds", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptServesPlaceIds()
        {
            return ExceptField("servesPlaceIds");
        }

        public GatewayAssignmentDetailsQueryBuilder WithServesSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("servesSystemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptServesSystemTypes()
        {
            return ExceptField("servesSystemTypes");
        }

        public GatewayAssignmentDetailsQueryBuilder WithSupportAccessAllowed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportAccessAllowed", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptSupportAccessAllowed()
        {
            return ExceptField("supportAccessAllowed");
        }

        public GatewayAssignmentDetailsQueryBuilder WithSupportAccessExpiration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportAccessExpiration", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptSupportAccessExpiration()
        {
            return ExceptField("supportAccessExpiration");
        }

        public GatewayAssignmentDetailsQueryBuilder WithUniqueName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uniqueName", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptUniqueName()
        {
            return ExceptField("uniqueName");
        }
    }

    public class GatewayFirstBootDetailsQueryBuilder : GraphQlQueryBuilder<GatewayFirstBootDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "bootTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayFirstBootDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayFirstBootDetailsQueryBuilder WithBootTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bootTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayFirstBootDetailsQueryBuilder ExceptBootTime()
        {
            return ExceptField("bootTime");
        }
    }

    public class GatewayGenerateContainerSiDsResponseQueryBuilder : GraphQlQueryBuilder<GatewayGenerateContainerSiDsResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "availableCertificateCn" },
                new GraphQlFieldMetadata { Name = "signingCertificateCn" }
            };

        protected override string TypeName { get { return "GatewayGenerateContainerSIDsResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayGenerateContainerSiDsResponseQueryBuilder WithAvailableCertificateCn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("availableCertificateCn", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder ExceptAvailableCertificateCn()
        {
            return ExceptField("availableCertificateCn");
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder WithSigningCertificateCn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signingCertificateCn", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder ExceptSigningCertificateCn()
        {
            return ExceptField("signingCertificateCn");
        }
    }

    public class GatewayNoteQueryBuilder : GraphQlQueryBuilder<GatewayNoteQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "note" },
                new GraphQlFieldMetadata { Name = "time", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayNote"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayNoteQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayNoteQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public GatewayNoteQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayNoteQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }
    }

    public class GatewayProvisioningDetailsQueryBuilder : GraphQlQueryBuilder<GatewayProvisioningDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "provisionTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayProvisioningDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayProvisioningDetailsQueryBuilder WithProvisionTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provisionTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayProvisioningDetailsQueryBuilder ExceptProvisionTime()
        {
            return ExceptField("provisionTime");
        }
    }

    public class GatewayRmaDetailsQueryBuilder : GraphQlQueryBuilder<GatewayRmaDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reason" },
                new GraphQlFieldMetadata { Name = "rmaTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayRMADetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRmaDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewayRmaDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewayRmaDetailsQueryBuilder WithRmaTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rmaTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptRmaTime()
        {
            return ExceptField("rmaTime");
        }
    }

    public class GatewayRegisterContainerResponseQueryBuilder : GraphQlQueryBuilder<GatewayRegisterContainerResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "deviceId" },
                new GraphQlFieldMetadata { Name = "gatewayId" }
            };

        protected override string TypeName { get { return "GatewayRegisterContainerResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRegisterContainerResponseQueryBuilder WithDeviceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deviceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegisterContainerResponseQueryBuilder ExceptDeviceId()
        {
            return ExceptField("deviceId");
        }

        public GatewayRegisterContainerResponseQueryBuilder WithGatewayId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gatewayId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegisterContainerResponseQueryBuilder ExceptGatewayId()
        {
            return ExceptField("gatewayId");
        }
    }

    public class GatewayRegistrationDetailsQueryBuilder : GraphQlQueryBuilder<GatewayRegistrationDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "imei" },
                new GraphQlFieldMetadata { Name = "lanMac" },
                new GraphQlFieldMetadata { Name = "mappedModel" },
                new GraphQlFieldMetadata { Name = "serialNumber" },
                new GraphQlFieldMetadata { Name = "sim", IsComplex = true, QueryBuilderType = typeof(GatewaySimInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "GatewayRegistrationDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRegistrationDetailsQueryBuilder WithImei(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imei", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptImei()
        {
            return ExceptField("imei");
        }

        public GatewayRegistrationDetailsQueryBuilder WithLanMac(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lanMac", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptLanMac()
        {
            return ExceptField("lanMac");
        }

        public GatewayRegistrationDetailsQueryBuilder WithMappedModel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedModel", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptMappedModel()
        {
            return ExceptField("mappedModel");
        }

        public GatewayRegistrationDetailsQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }

        public GatewayRegistrationDetailsQueryBuilder WithSim(GatewaySimInfoQueryBuilder gatewaySimInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sim", alias, gatewaySimInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptSim()
        {
            return ExceptField("sim");
        }
    }

    public class GatewaySimCertificateQueryBuilder : GraphQlQueryBuilder<GatewaySimCertificateQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "pem" },
                new GraphQlFieldMetadata { Name = "subjectKeyId" }
            };

        protected override string TypeName { get { return "GatewaySIMCertificate"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySimCertificateQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GatewaySimCertificateQueryBuilder WithPem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pem", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptPem()
        {
            return ExceptField("pem");
        }

        public GatewaySimCertificateQueryBuilder WithSubjectKeyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subjectKeyId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptSubjectKeyId()
        {
            return ExceptField("subjectKeyId");
        }
    }

    public class GatewaySimInfoQueryBuilder : GraphQlQueryBuilder<GatewaySimInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "availableCertificate", IsComplex = true, QueryBuilderType = typeof(GatewaySimCertificateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "iccid" },
                new GraphQlFieldMetadata { Name = "signingCertificate", IsComplex = true, QueryBuilderType = typeof(GatewaySimCertificateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "simType" }
            };

        protected override string TypeName { get { return "GatewaySIMInfo"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySimInfoQueryBuilder WithAvailableCertificate(GatewaySimCertificateQueryBuilder gatewaySimCertificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableCertificate", alias, gatewaySimCertificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptAvailableCertificate()
        {
            return ExceptField("availableCertificate");
        }

        public GatewaySimInfoQueryBuilder WithIccid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("iccid", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptIccid()
        {
            return ExceptField("iccid");
        }

        public GatewaySimInfoQueryBuilder WithSigningCertificate(GatewaySimCertificateQueryBuilder gatewaySimCertificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signingCertificate", alias, gatewaySimCertificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptSigningCertificate()
        {
            return ExceptField("signingCertificate");
        }

        public GatewaySimInfoQueryBuilder WithSimType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("simType", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptSimType()
        {
            return ExceptField("simType");
        }
    }

    public class GatewayShippingDetailsQueryBuilder : GraphQlQueryBuilder<GatewayShippingDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "courier" },
                new GraphQlFieldMetadata { Name = "shipTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "statusTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "trackingNumber" }
            };

        protected override string TypeName { get { return "GatewayShippingDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayShippingDetailsQueryBuilder WithCourier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("courier", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptCourier()
        {
            return ExceptField("courier");
        }

        public GatewayShippingDetailsQueryBuilder WithShipTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptShipTime()
        {
            return ExceptField("shipTime");
        }

        public GatewayShippingDetailsQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public GatewayShippingDetailsQueryBuilder WithStatusTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptStatusTime()
        {
            return ExceptField("statusTime");
        }

        public GatewayShippingDetailsQueryBuilder WithTrackingNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackingNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptTrackingNumber()
        {
            return ExceptField("trackingNumber");
        }
    }

    public class GatewaySuspendResponseQueryBuilder : GraphQlQueryBuilder<GatewaySuspendResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GatewaySuspendResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySuspendResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspendResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GatewaySuspensionDetailsQueryBuilder : GraphQlQueryBuilder<GatewaySuspensionDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reason" },
                new GraphQlFieldMetadata { Name = "suspensionTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewaySuspensionDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySuspensionDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewaySuspensionDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewaySuspensionDetailsQueryBuilder WithSuspensionTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("suspensionTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptSuspensionTime()
        {
            return ExceptField("suspensionTime");
        }
    }

    public class GatewayTerminationDetailsQueryBuilder : GraphQlQueryBuilder<GatewayTerminationDetailsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reason" },
                new GraphQlFieldMetadata { Name = "terminationTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayTerminationDetails"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayTerminationDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewayTerminationDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewayTerminationDetailsQueryBuilder WithTerminationTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("terminationTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptTerminationTime()
        {
            return ExceptField("terminationTime");
        }
    }

    public class GenericIdentityQueryBuilder : GraphQlQueryBuilder<GenericIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "GenericIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GenericIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public GenericIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public GenericIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GenericIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public GenericIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public GenericIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class GenericPlaceQueryBuilder : GraphQlQueryBuilder<GenericPlaceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(GenericPlaceIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "GenericPlace"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GenericPlaceQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public GenericPlaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public GenericPlaceQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public GenericPlaceQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public GenericPlaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public GenericPlaceQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public GenericPlaceQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public GenericPlaceQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public GenericPlaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public GenericPlaceQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public GenericPlaceQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public GenericPlaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public GenericPlaceQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public GenericPlaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public GenericPlaceQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public GenericPlaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GenericPlaceQueryBuilder WithIdentities(GenericPlaceIdentityUnionQueryBuilder genericPlaceIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, genericPlaceIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public GenericPlaceQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public GenericPlaceQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public GenericPlaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public GenericPlaceQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public GenericPlaceQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public GenericPlaceQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public GenericPlaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public GenericPlaceQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public GenericPlaceQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public GenericPlaceQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public GenericPlaceQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public GenericPlaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GenericPlaceQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public GenericPlaceQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public GenericPlaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public GenericPlaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class GenericPlaceIdentityUnionQueryBuilder : GraphQlQueryBuilder<GenericPlaceIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public GenericPlaceIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "GenericPlaceIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GenericPlaceIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class GeoPointQueryBuilder : GraphQlQueryBuilder<GeoPointQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "coordinates", IsComplex = true },
                new GraphQlFieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "GeoPoint"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GeoPointQueryBuilder WithCoordinates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coordinates", alias, new GraphQlDirective[] { include, skip });
        }

        public GeoPointQueryBuilder ExceptCoordinates()
        {
            return ExceptField("coordinates");
        }

        public GeoPointQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public GeoPointQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class GrantQueryBuilder : GraphQlQueryBuilder<GrantQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "approvalTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "grantedPlacesAndTypes", IsComplex = true, QueryBuilderType = typeof(GrantPlacesAndTypesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "granteeUserId" },
                new GraphQlFieldMetadata { Name = "grantorNotes", IsComplex = true, QueryBuilderType = typeof(GrantNoteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "grantorUserId" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "requestTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "requests", IsComplex = true, QueryBuilderType = typeof(GrantRequestQueryBuilder) },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "updateTime", IsComplex = true }
            };

        protected override string TypeName { get { return "Grant"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantQueryBuilder WithApprovalTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("approvalTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptApprovalTime()
        {
            return ExceptField("approvalTime");
        }

        public GrantQueryBuilder WithGrantedPlacesAndTypes(GrantPlacesAndTypesQueryBuilder grantPlacesAndTypesQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantedPlacesAndTypes", alias, grantPlacesAndTypesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantedPlacesAndTypes()
        {
            return ExceptField("grantedPlacesAndTypes");
        }

        public GrantQueryBuilder WithGranteeUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("granteeUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGranteeUserId()
        {
            return ExceptField("granteeUserId");
        }

        public GrantQueryBuilder WithGrantorNotes(GrantNoteQueryBuilder grantNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantorNotes", alias, grantNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantorNotes()
        {
            return ExceptField("grantorNotes");
        }

        public GrantQueryBuilder WithGrantorUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantorUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantorUserId()
        {
            return ExceptField("grantorUserId");
        }

        public GrantQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GrantQueryBuilder WithRequestTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptRequestTime()
        {
            return ExceptField("requestTime");
        }

        public GrantQueryBuilder WithRequests(GrantRequestQueryBuilder grantRequestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("requests", alias, grantRequestQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptRequests()
        {
            return ExceptField("requests");
        }

        public GrantQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public GrantQueryBuilder WithUpdateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptUpdateTime()
        {
            return ExceptField("updateTime");
        }
    }

    public class GrantCreateResponseQueryBuilder : GraphQlQueryBuilder<GrantCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "GrantCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantCreateResponseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantCreateResponseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class GrantDeleteResponseQueryBuilder : GraphQlQueryBuilder<GrantDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GrantDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GrantNoteQueryBuilder : GraphQlQueryBuilder<GrantNoteQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "note" },
                new GraphQlFieldMetadata { Name = "time", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantNote"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantNoteQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantNoteQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public GrantNoteQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantNoteQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }
    }

    public class GrantPlacesAndTypesQueryBuilder : GraphQlQueryBuilder<GrantPlacesAndTypesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "grantedIds", IsComplex = true },
                new GraphQlFieldMetadata { Name = "grantedSystemTypes", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantPlacesAndTypes"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantPlacesAndTypesQueryBuilder WithGrantedIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantedIds", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantPlacesAndTypesQueryBuilder ExceptGrantedIds()
        {
            return ExceptField("grantedIds");
        }

        public GrantPlacesAndTypesQueryBuilder WithGrantedSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantedSystemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantPlacesAndTypesQueryBuilder ExceptGrantedSystemTypes()
        {
            return ExceptField("grantedSystemTypes");
        }
    }

    public class GrantRequestQueryBuilder : GraphQlQueryBuilder<GrantRequestQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "requestNote" },
                new GraphQlFieldMetadata { Name = "requestType" },
                new GraphQlFieldMetadata { Name = "systemTypes", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantRequest"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantRequestQueryBuilder WithRequestNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestNote", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptRequestNote()
        {
            return ExceptField("requestNote");
        }

        public GrantRequestQueryBuilder WithRequestType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestType", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptRequestType()
        {
            return ExceptField("requestType");
        }

        public GrantRequestQueryBuilder WithSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptSystemTypes()
        {
            return ExceptField("systemTypes");
        }
    }

    public class GrantUpdateResponseQueryBuilder : GraphQlQueryBuilder<GrantUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GrantUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantUpdateResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantUpdateResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GraphNodeQueryBuilder : GraphQlQueryBuilder<GraphNodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        public GraphNodeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "GraphNode"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GraphNodeQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public GraphNodeQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public GraphNodeQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public GraphNodeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public GraphNodeQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public GraphNodeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GraphNodeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public GraphNodeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GraphNodeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public GraphNodeQueryBuilder WithAccessCredentialFragment(AccessCredentialQueryBuilder accessCredentialQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithAccountFragment(AccountQueryBuilder accountQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accountQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithAgentFragment(AgentQueryBuilder agentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(agentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithCalendarEventFragment(CalendarEventQueryBuilder calendarEventQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(calendarEventQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithCalendarInvitationFragment(CalendarInvitationQueryBuilder calendarInvitationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(calendarInvitationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithDeviceModelFragment(DeviceModelQueryBuilder deviceModelQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(deviceModelQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithEmailAddressFragment(EmailAddressQueryBuilder emailAddressQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithHeartbeatFragment(HeartbeatQueryBuilder heartbeatQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(heartbeatQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithLeaseFragment(LeaseQueryBuilder leaseQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(leaseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithOrganizationFragment(OrganizationQueryBuilder organizationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(organizationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithPeopleGroupFragment(PeopleGroupQueryBuilder peopleGroupQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(peopleGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithPersonFragment(PersonQueryBuilder personQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(personQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithPointFragment(PointQueryBuilder pointQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithWorkOrderFragment(WorkOrderQueryBuilder workOrderQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(workOrderQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GraphNodeQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class Hmac256QueryBuilder : GraphQlQueryBuilder<Hmac256QueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "signingKeys", IsComplex = true }
            };

        protected override string TypeName { get { return "HMAC256"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public Hmac256QueryBuilder WithSigningKeys(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signingKeys", alias, new GraphQlDirective[] { include, skip });
        }

        public Hmac256QueryBuilder ExceptSigningKeys()
        {
            return ExceptField("signingKeys");
        }
    }

    public class HasAccessCredentialEdgeQueryBuilder : GraphQlQueryBuilder<HasAccessCredentialEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasAccessCredentialEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasAccessCredentialEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasAccessCredentialEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasAccessCredentialEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasAccessCredentialEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasAssignedGroupEdgeQueryBuilder : GraphQlQueryBuilder<HasAssignedGroupEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasAssignedGroupEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasAssignedGroupEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasAssignedGroupEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasAssignedGroupEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasAssignedGroupEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasAssigneeEdgeQueryBuilder : GraphQlQueryBuilder<HasAssigneeEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasAssigneeEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasAssigneeEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasAssigneeEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasAssigneeEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasAssigneeEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasBillEdgeQueryBuilder : GraphQlQueryBuilder<HasBillEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasBillEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasBillEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasBillEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasBillEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasBillEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasDeviceModelEdgeQueryBuilder : GraphQlQueryBuilder<HasDeviceModelEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasDeviceModelEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasDeviceModelEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasDeviceModelEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasDeviceModelEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasDeviceModelEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasHeartbeatEdgeQueryBuilder : GraphQlQueryBuilder<HasHeartbeatEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasHeartbeatEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasHeartbeatEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasHeartbeatEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasHeartbeatEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasHeartbeatEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasLocationEdgeQueryBuilder : GraphQlQueryBuilder<HasLocationEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasLocationEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasLocationEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasLocationEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasLocationEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasLocationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasMemberEdgeQueryBuilder : GraphQlQueryBuilder<HasMemberEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasMemberEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasMemberEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasMemberEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasMemberEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasMemberEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasPartEdgeQueryBuilder : GraphQlQueryBuilder<HasPartEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasPartEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasPartEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasPartEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasPartEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasPartUnionQueryBuilder : GraphQlQueryBuilder<HasPartUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public HasPartUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "HasPartUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasPartUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPartUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class HasPointEdgeQueryBuilder : GraphQlQueryBuilder<HasPointEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasPointEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasPointEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasPointEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasPointEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPointEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasPrimaryContactEdgeQueryBuilder : GraphQlQueryBuilder<HasPrimaryContactEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasPrimaryContactEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasPrimaryContactEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasPrimaryContactEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasPrimaryContactEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasPrimaryContactEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HasProviderEdgeQueryBuilder : GraphQlQueryBuilder<HasProviderEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "HasProviderEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HasProviderEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HasProviderEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HasProviderEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HasProviderEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class HeartbeatQueryBuilder : GraphQlQueryBuilder<HeartbeatQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasHeartbeat", IsComplex = true, QueryBuilderType = typeof(HeartbeatQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasHeartbeatEdges", IsComplex = true, QueryBuilderType = typeof(HasHeartbeatEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(HeartbeatIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isBilledTo", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isBilledToEdges", IsComplex = true, QueryBuilderType = typeof(IsBilledToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPointOf", IsComplex = true, QueryBuilderType = typeof(IsPointOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPointOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPointOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Heartbeat"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HeartbeatQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public HeartbeatQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public HeartbeatQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public HeartbeatQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public HeartbeatQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public HeartbeatQueryBuilder WithHasHeartbeat(HeartbeatQueryBuilder heartbeatQueryBuilder, QueryBuilderParameter<HeartbeatFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasHeartbeat", alias, heartbeatQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeartbeatQueryBuilder ExceptHasHeartbeat()
        {
            return ExceptField("hasHeartbeat");
        }

        public HeartbeatQueryBuilder WithHasHeartbeatEdges(HasHeartbeatEdgeQueryBuilder hasHeartbeatEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasHeartbeatEdges", alias, hasHeartbeatEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptHasHeartbeatEdges()
        {
            return ExceptField("hasHeartbeatEdges");
        }

        public HeartbeatQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public HeartbeatQueryBuilder WithIdentities(HeartbeatIdentityUnionQueryBuilder heartbeatIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, heartbeatIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public HeartbeatQueryBuilder WithIsBilledTo(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isBilledTo", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeartbeatQueryBuilder ExceptIsBilledTo()
        {
            return ExceptField("isBilledTo");
        }

        public HeartbeatQueryBuilder WithIsBilledToEdges(IsBilledToEdgeQueryBuilder isBilledToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isBilledToEdges", alias, isBilledToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptIsBilledToEdges()
        {
            return ExceptField("isBilledToEdges");
        }

        public HeartbeatQueryBuilder WithIsPointOf(IsPointOfUnionQueryBuilder isPointOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPointOf", alias, isPointOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeartbeatQueryBuilder ExceptIsPointOf()
        {
            return ExceptField("isPointOf");
        }

        public HeartbeatQueryBuilder WithIsPointOfEdges(IsPointOfEdgeQueryBuilder isPointOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPointOfEdges", alias, isPointOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptIsPointOfEdges()
        {
            return ExceptField("isPointOfEdges");
        }

        public HeartbeatQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public HeartbeatQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public HeartbeatQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class HeartbeatIdentityUnionQueryBuilder : GraphQlQueryBuilder<HeartbeatIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public HeartbeatIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "HeartbeatIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public HeartbeatIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeartbeatIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class IpAllowlistMatchQueryBuilder : GraphQlQueryBuilder<IpAllowlistMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "allowedIps", IsComplex = true }
            };

        protected override string TypeName { get { return "IPAllowlistMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IpAllowlistMatchQueryBuilder WithAllowedIps(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowedIps", alias, new GraphQlDirective[] { include, skip });
        }

        public IpAllowlistMatchQueryBuilder ExceptAllowedIps()
        {
            return ExceptField("allowedIps");
        }
    }

    public class IdentityQueryBuilder : GraphQlQueryBuilder<IdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public IdentityQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Identity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public IdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public IdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public IdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public IdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public IdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public IdentityQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdentityQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class InviteQueryBuilder : GraphQlQueryBuilder<InviteQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "expiration", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "inviterUserId" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true },
                new GraphQlFieldMetadata { Name = "status" }
            };

        protected override string TypeName { get { return "Invite"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public InviteQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public InviteQueryBuilder WithExpiration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expiration", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptExpiration()
        {
            return ExceptField("expiration");
        }

        public InviteQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public InviteQueryBuilder WithInviterUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inviterUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptInviterUserId()
        {
            return ExceptField("inviterUserId");
        }

        public InviteQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public InviteQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public InviteQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }
    }

    public class InviteCreateResponseQueryBuilder : GraphQlQueryBuilder<InviteCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "invite", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "inviteToken" }
            };

        protected override string TypeName { get { return "InviteCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteCreateResponseQueryBuilder WithInvite(InviteQueryBuilder inviteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("invite", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteCreateResponseQueryBuilder ExceptInvite()
        {
            return ExceptField("invite");
        }

        public InviteCreateResponseQueryBuilder WithInviteToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inviteToken", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteCreateResponseQueryBuilder ExceptInviteToken()
        {
            return ExceptField("inviteToken");
        }
    }

    public class InviteDeleteResponseQueryBuilder : GraphQlQueryBuilder<InviteDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "InviteDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class InviteUpdateResponseQueryBuilder : GraphQlQueryBuilder<InviteUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "invite", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) }
            };

        protected override string TypeName { get { return "InviteUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteUpdateResponseQueryBuilder WithInvite(InviteQueryBuilder inviteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("invite", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteUpdateResponseQueryBuilder ExceptInvite()
        {
            return ExceptField("invite");
        }
    }

    public class IsAdjacentToEdgeQueryBuilder : GraphQlQueryBuilder<IsAdjacentToEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsAdjacentToEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsAdjacentToEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsAdjacentToEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsAdjacentToEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsAdjacentToEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsBilledToEdgeQueryBuilder : GraphQlQueryBuilder<IsBilledToEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsBilledToEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsBilledToEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsBilledToEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsBilledToEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsBilledToEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsClosedByEdgeQueryBuilder : GraphQlQueryBuilder<IsClosedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsClosedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsClosedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsClosedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsClosedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsClosedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsCreatedByEdgeQueryBuilder : GraphQlQueryBuilder<IsCreatedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsCreatedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsCreatedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsCreatedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsCreatedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsCreatedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsFedByEdgeQueryBuilder : GraphQlQueryBuilder<IsFedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsFedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsFedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsFedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsFedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsFedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsFedByUnionQueryBuilder : GraphQlQueryBuilder<IsFedByUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public IsFedByUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "IsFedByUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsFedByUnionQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsFedByUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class IsLocationOfEdgeQueryBuilder : GraphQlQueryBuilder<IsLocationOfEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsLocationOfEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsLocationOfEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsLocationOfEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsLocationOfEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsLocationOfEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsLocationOfUnionQueryBuilder : GraphQlQueryBuilder<IsLocationOfUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public IsLocationOfUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "IsLocationOfUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsLocationOfUnionQueryBuilder WithCollectionFragment(CollectionQueryBuilder collectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(collectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsLocationOfUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class IsMemberOfEdgeQueryBuilder : GraphQlQueryBuilder<IsMemberOfEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsMemberOfEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsMemberOfEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsMemberOfEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsMemberOfEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsMemberOfEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsPartOfEdgeQueryBuilder : GraphQlQueryBuilder<IsPartOfEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsPartOfEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsPartOfEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsPartOfEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsPartOfEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPartOfEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsPointOfEdgeQueryBuilder : GraphQlQueryBuilder<IsPointOfEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsPointOfEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsPointOfEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsPointOfEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsPointOfUnionQueryBuilder : GraphQlQueryBuilder<IsPointOfUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public IsPointOfUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "IsPointOfUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsPointOfUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class IsReportedByEdgeQueryBuilder : GraphQlQueryBuilder<IsReportedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsReportedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsReportedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsReportedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsReportedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsReportedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsResponsibilityOfEdgeQueryBuilder : GraphQlQueryBuilder<IsResponsibilityOfEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsResponsibilityOfEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsResponsibilityOfEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsResponsibilityOfEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsResponsibilityOfEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsResponsibilityOfEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsResponsibleForEdgeQueryBuilder : GraphQlQueryBuilder<IsResponsibleForEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsResponsibleForEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsResponsibleForEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsResponsibleForEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsResponsibleForEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsResponsibleForEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class IsServedByEdgeQueryBuilder : GraphQlQueryBuilder<IsServedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "IsServedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsServedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public IsServedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public IsServedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsServedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class LeaseQueryBuilder : GraphQlQueryBuilder<LeaseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(LeaseIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leaseOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leasee", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Lease"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LeaseQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public LeaseQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaseQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public LeaseQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public LeaseQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public LeaseQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public LeaseQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public LeaseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeaseQueryBuilder WithIdentities(LeaseIdentityUnionQueryBuilder leaseIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, leaseIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public LeaseQueryBuilder WithLeaseOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("leaseOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaseQueryBuilder ExceptLeaseOf()
        {
            return ExceptField("leaseOf");
        }

        public LeaseQueryBuilder WithLeasee(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leasee", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptLeasee()
        {
            return ExceptField("leasee");
        }

        public LeaseQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public LeaseQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeaseQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaseQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class LeaseIdentityUnionQueryBuilder : GraphQlQueryBuilder<LeaseIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public LeaseIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "LeaseIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LeaseIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaseIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class LiveQueryQueryBuilder : GraphQlQueryBuilder<LiveQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastErrorDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastResult", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastResultDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "query" },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "variables", IsComplex = true }
            };

        protected override string TypeName { get { return "LiveQuery"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public LiveQueryQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public LiveQueryQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LiveQueryQueryBuilder WithLastErrorDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastErrorDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptLastErrorDate()
        {
            return ExceptField("lastErrorDate");
        }

        public LiveQueryQueryBuilder WithLastResult(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastResult", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptLastResult()
        {
            return ExceptField("lastResult");
        }

        public LiveQueryQueryBuilder WithLastResultDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastResultDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptLastResultDate()
        {
            return ExceptField("lastResultDate");
        }

        public LiveQueryQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LiveQueryQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public LiveQueryQueryBuilder WithQuery(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("query", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptQuery()
        {
            return ExceptField("query");
        }

        public LiveQueryQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public LiveQueryQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public LiveQueryQueryBuilder WithVariables(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("variables", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryQueryBuilder ExceptVariables()
        {
            return ExceptField("variables");
        }
    }

    public class LiveQueryCreateResponseQueryBuilder : GraphQlQueryBuilder<LiveQueryCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "liveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveQueryCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryCreateResponseQueryBuilder WithLiveQuery(LiveQueryQueryBuilder liveQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("liveQuery", alias, liveQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryCreateResponseQueryBuilder ExceptLiveQuery()
        {
            return ExceptField("liveQuery");
        }
    }

    public class LiveQueryDeleteResponseQueryBuilder : GraphQlQueryBuilder<LiveQueryDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "LiveQueryDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class LiveQueryPauseResponseQueryBuilder : GraphQlQueryBuilder<LiveQueryPauseResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "LiveQueryPauseResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryPauseResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryPauseResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class LiveQueryResumeResponseQueryBuilder : GraphQlQueryBuilder<LiveQueryResumeResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "LiveQueryResumeResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryResumeResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryResumeResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class LiveQueryUpdateResponseQueryBuilder : GraphQlQueryBuilder<LiveQueryUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "liveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveQueryUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LiveQueryUpdateResponseQueryBuilder WithLiveQuery(LiveQueryQueryBuilder liveQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("liveQuery", alias, liveQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveQueryUpdateResponseQueryBuilder ExceptLiveQuery()
        {
            return ExceptField("liveQuery");
        }
    }

    public class MtlsMatchQueryBuilder : GraphQlQueryBuilder<MtlsMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "clientCert", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "issuerCert", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappedCert" },
                new GraphQlFieldMetadata { Name = "matchCert", IsComplex = true, QueryBuilderType = typeof(CertMatchQueryBuilder) }
            };

        protected override string TypeName { get { return "MTLSMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MtlsMatchQueryBuilder WithClientCert(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("clientCert", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptClientCert()
        {
            return ExceptField("clientCert");
        }

        public MtlsMatchQueryBuilder WithIssuerCert(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("issuerCert", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptIssuerCert()
        {
            return ExceptField("issuerCert");
        }

        public MtlsMatchQueryBuilder WithMappedCert(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedCert", alias, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptMappedCert()
        {
            return ExceptField("mappedCert");
        }

        public MtlsMatchQueryBuilder WithMatchCert(CertMatchQueryBuilder certMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchCert", alias, certMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptMatchCert()
        {
            return ExceptField("matchCert");
        }
    }

    public class ManufacturedByEdgeQueryBuilder : GraphQlQueryBuilder<ManufacturedByEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "ManufacturedByEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ManufacturedByEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ManufacturedByEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public ManufacturedByEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ManufacturedByEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MatchQueryBuilder : GraphQlQueryBuilder<MatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "ipAllowlist", IsComplex = true, QueryBuilderType = typeof(IpAllowlistMatchQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mtls", IsComplex = true, QueryBuilderType = typeof(MtlsMatchQueryBuilder) },
                new GraphQlFieldMetadata { Name = "noAuth" },
                new GraphQlFieldMetadata { Name = "regex", IsComplex = true, QueryBuilderType = typeof(RegexMatchQueryBuilder) },
                new GraphQlFieldMetadata { Name = "signature", IsComplex = true, QueryBuilderType = typeof(SignatureMatchQueryBuilder) },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(ValueMatchQueryBuilder) }
            };

        protected override string TypeName { get { return "Match"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MatchQueryBuilder WithIpAllowlist(IpAllowlistMatchQueryBuilder ipAllowlistMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ipAllowlist", alias, ipAllowlistMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptIpAllowlist()
        {
            return ExceptField("ipAllowlist");
        }

        public MatchQueryBuilder WithMtls(MtlsMatchQueryBuilder mtlsMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mtls", alias, mtlsMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptMtls()
        {
            return ExceptField("mtls");
        }

        public MatchQueryBuilder WithNoAuth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("noAuth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptNoAuth()
        {
            return ExceptField("noAuth");
        }

        public MatchQueryBuilder WithRegex(RegexMatchQueryBuilder regexMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("regex", alias, regexMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptRegex()
        {
            return ExceptField("regex");
        }

        public MatchQueryBuilder WithSignature(SignatureMatchQueryBuilder signatureMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signature", alias, signatureMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptSignature()
        {
            return ExceptField("signature");
        }

        public MatchQueryBuilder WithValue(ValueMatchQueryBuilder valueMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, valueMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MetadataEntryQueryBuilder : GraphQlQueryBuilder<MetadataEntryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "MetadataEntry"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MetadataEntryQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataEntryQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MetadataEntryQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataEntryQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MetadataRecordQueryBuilder : GraphQlQueryBuilder<MetadataRecordQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "MetadataRecord"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MetadataRecordQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataRecordQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MetadataRecordQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataRecordQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "assignGateway", IsComplex = true, QueryBuilderType = typeof(GatewayAssignResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "assignRole", IsComplex = true, QueryBuilderType = typeof(UserAssignRoleResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createConnectorRequest", IsComplex = true, QueryBuilderType = typeof(ConnectorRequestCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createContributionRequest", IsComplex = true, QueryBuilderType = typeof(ContributionRequestCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createFloor", IsComplex = true, QueryBuilderType = typeof(FloorCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createGrant", IsComplex = true, QueryBuilderType = typeof(GrantCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createInvite", IsComplex = true, QueryBuilderType = typeof(InviteCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createLiveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createOrgRoleGroup", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createOrgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createPersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createSecretOrgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountCreateSecretResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createSite", IsComplex = true, QueryBuilderType = typeof(SiteCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createSpace", IsComplex = true, QueryBuilderType = typeof(SpaceCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createUser", IsComplex = true, QueryBuilderType = typeof(UserCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCreateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteFloor", IsComplex = true, QueryBuilderType = typeof(FloorDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteGrant", IsComplex = true, QueryBuilderType = typeof(GrantDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteInvite", IsComplex = true, QueryBuilderType = typeof(InviteDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteLiveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteOrgRoleGroup", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteOrgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletePersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteSecretsOrgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountDeleteSecretsResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteSite", IsComplex = true, QueryBuilderType = typeof(SiteDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteSpace", IsComplex = true, QueryBuilderType = typeof(SpaceDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteWebhookReceiver", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetDeleteResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "enableWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetEnableResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "generateContainerSIDs", IsComplex = true, QueryBuilderType = typeof(GatewayGenerateContainerSiDsResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pauseLiveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryPauseResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "registerGatewayContainer", IsComplex = true, QueryBuilderType = typeof(GatewayRegisterContainerResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "removeOrgMembershipUser", IsComplex = true, QueryBuilderType = typeof(UserRemoveOrgMembershipResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "removeOrgUser", IsComplex = true, QueryBuilderType = typeof(OrgRemoveOrgUserAsyncResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "removeRole", IsComplex = true, QueryBuilderType = typeof(UserRemoveRoleResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "restartConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorRestartResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resumeLiveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryResumeResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "startConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorStartResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stopConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorStopResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "suspendGateway", IsComplex = true, QueryBuilderType = typeof(GatewaySuspendResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateFloor", IsComplex = true, QueryBuilderType = typeof(FloorUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateGrant", IsComplex = true, QueryBuilderType = typeof(GrantUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateInvite", IsComplex = true, QueryBuilderType = typeof(InviteUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLiveQuery", IsComplex = true, QueryBuilderType = typeof(LiveQueryUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOrgRoleGroup", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOrgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOrganization", IsComplex = true, QueryBuilderType = typeof(OrgUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOrganizationV2", IsComplex = true, QueryBuilderType = typeof(OrgUpdateV2ResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatePersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateSite", IsComplex = true, QueryBuilderType = typeof(SiteUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateSpace", IsComplex = true, QueryBuilderType = typeof(SpaceUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateUser", IsComplex = true, QueryBuilderType = typeof(UserUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetUpdateResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "upsertConfigConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorUpsertConfigResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "upsertWebhookReceiver", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverUpsertResponseQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithAssignGateway(GatewayAssignResponseQueryBuilder gatewayAssignResponseQueryBuilder, QueryBuilderParameter<GatewayAssignRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("assignGateway", alias, gatewayAssignResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptAssignGateway()
        {
            return ExceptField("assignGateway");
        }

        public MutationQueryBuilder WithAssignRole(UserAssignRoleResponseQueryBuilder userAssignRoleResponseQueryBuilder, QueryBuilderParameter<UserAssignRoleRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("assignRole", alias, userAssignRoleResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptAssignRole()
        {
            return ExceptField("assignRole");
        }

        public MutationQueryBuilder WithCreateBuilding(BuildingCreateResponseQueryBuilder buildingCreateResponseQueryBuilder, QueryBuilderParameter<BuildingCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createBuilding", alias, buildingCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateBuilding()
        {
            return ExceptField("createBuilding");
        }

        public MutationQueryBuilder WithCreateConnector(ConnectorCreateResponseQueryBuilder connectorCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createConnector", alias, connectorCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateConnector()
        {
            return ExceptField("createConnector");
        }

        public MutationQueryBuilder WithCreateConnectorAuth(ConnectorAuthCreateResponseQueryBuilder connectorAuthCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createConnectorAuth", alias, connectorAuthCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateConnectorAuth()
        {
            return ExceptField("createConnectorAuth");
        }

        public MutationQueryBuilder WithCreateConnectorRequest(ConnectorRequestCreateResponseQueryBuilder connectorRequestCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorRequestCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createConnectorRequest", alias, connectorRequestCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateConnectorRequest()
        {
            return ExceptField("createConnectorRequest");
        }

        public MutationQueryBuilder WithCreateContributionRequest(ContributionRequestCreateResponseQueryBuilder contributionRequestCreateResponseQueryBuilder, QueryBuilderParameter<ContributionRequestCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createContributionRequest", alias, contributionRequestCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateContributionRequest()
        {
            return ExceptField("createContributionRequest");
        }

        public MutationQueryBuilder WithCreateFloor(FloorCreateResponseQueryBuilder floorCreateResponseQueryBuilder, QueryBuilderParameter<FloorCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createFloor", alias, floorCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateFloor()
        {
            return ExceptField("createFloor");
        }

        public MutationQueryBuilder WithCreateGrant(GrantCreateResponseQueryBuilder grantCreateResponseQueryBuilder, QueryBuilderParameter<GrantCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createGrant", alias, grantCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateGrant()
        {
            return ExceptField("createGrant");
        }

        public MutationQueryBuilder WithCreateInvite(InviteCreateResponseQueryBuilder inviteCreateResponseQueryBuilder, QueryBuilderParameter<InviteCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createInvite", alias, inviteCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateInvite()
        {
            return ExceptField("createInvite");
        }

        public MutationQueryBuilder WithCreateLiveQuery(LiveQueryCreateResponseQueryBuilder liveQueryCreateResponseQueryBuilder, QueryBuilderParameter<LiveQueryCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createLiveQuery", alias, liveQueryCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateLiveQuery()
        {
            return ExceptField("createLiveQuery");
        }

        public MutationQueryBuilder WithCreateOrgRoleGroup(OrgRoleGroupCreateResponseQueryBuilder orgRoleGroupCreateResponseQueryBuilder, QueryBuilderParameter<OrgRoleGroupCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createOrgRoleGroup", alias, orgRoleGroupCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateOrgRoleGroup()
        {
            return ExceptField("createOrgRoleGroup");
        }

        public MutationQueryBuilder WithCreateOrgServiceAccount(OrgServiceAccountCreateResponseQueryBuilder orgServiceAccountCreateResponseQueryBuilder, QueryBuilderParameter<OrgServiceAccountCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createOrgServiceAccount", alias, orgServiceAccountCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateOrgServiceAccount()
        {
            return ExceptField("createOrgServiceAccount");
        }

        public MutationQueryBuilder WithCreatePersonalAccessToken(PersonalAccessTokenCreateResponseQueryBuilder personalAccessTokenCreateResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createPersonalAccessToken", alias, personalAccessTokenCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreatePersonalAccessToken()
        {
            return ExceptField("createPersonalAccessToken");
        }

        public MutationQueryBuilder WithCreateSecretOrgServiceAccount(OrgServiceAccountCreateSecretResponseQueryBuilder orgServiceAccountCreateSecretResponseQueryBuilder, QueryBuilderParameter<OrgServiceAccountCreateSecretRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createSecretOrgServiceAccount", alias, orgServiceAccountCreateSecretResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSecretOrgServiceAccount()
        {
            return ExceptField("createSecretOrgServiceAccount");
        }

        public MutationQueryBuilder WithCreateSite(SiteCreateResponseQueryBuilder siteCreateResponseQueryBuilder, QueryBuilderParameter<SiteCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createSite", alias, siteCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSite()
        {
            return ExceptField("createSite");
        }

        public MutationQueryBuilder WithCreateSpace(SpaceCreateResponseQueryBuilder spaceCreateResponseQueryBuilder, QueryBuilderParameter<SpaceCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createSpace", alias, spaceCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSpace()
        {
            return ExceptField("createSpace");
        }

        public MutationQueryBuilder WithCreateUser(UserCreateResponseQueryBuilder userCreateResponseQueryBuilder, QueryBuilderParameter<UserCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createUser", alias, userCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateUser()
        {
            return ExceptField("createUser");
        }

        public MutationQueryBuilder WithCreateWebhookTarget(WebhookTargetCreateResponseQueryBuilder webhookTargetCreateResponseQueryBuilder, QueryBuilderParameter<WebhookTargetCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createWebhookTarget", alias, webhookTargetCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateWebhookTarget()
        {
            return ExceptField("createWebhookTarget");
        }

        public MutationQueryBuilder WithDeleteBuilding(BuildingDeleteResponseQueryBuilder buildingDeleteResponseQueryBuilder, QueryBuilderParameter<BuildingDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteBuilding", alias, buildingDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteBuilding()
        {
            return ExceptField("deleteBuilding");
        }

        public MutationQueryBuilder WithDeleteConnector(ConnectorDeleteResponseQueryBuilder connectorDeleteResponseQueryBuilder, QueryBuilderParameter<ConnectorDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteConnector", alias, connectorDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteConnector()
        {
            return ExceptField("deleteConnector");
        }

        public MutationQueryBuilder WithDeleteConnectorAuth(ConnectorAuthDeleteResponseQueryBuilder connectorAuthDeleteResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteConnectorAuth", alias, connectorAuthDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteConnectorAuth()
        {
            return ExceptField("deleteConnectorAuth");
        }

        public MutationQueryBuilder WithDeleteFloor(FloorDeleteResponseQueryBuilder floorDeleteResponseQueryBuilder, QueryBuilderParameter<FloorDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteFloor", alias, floorDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteFloor()
        {
            return ExceptField("deleteFloor");
        }

        public MutationQueryBuilder WithDeleteGrant(GrantDeleteResponseQueryBuilder grantDeleteResponseQueryBuilder, QueryBuilderParameter<GrantDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteGrant", alias, grantDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteGrant()
        {
            return ExceptField("deleteGrant");
        }

        public MutationQueryBuilder WithDeleteInvite(InviteDeleteResponseQueryBuilder inviteDeleteResponseQueryBuilder, QueryBuilderParameter<InviteDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteInvite", alias, inviteDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteInvite()
        {
            return ExceptField("deleteInvite");
        }

        public MutationQueryBuilder WithDeleteLiveQuery(LiveQueryDeleteResponseQueryBuilder liveQueryDeleteResponseQueryBuilder, QueryBuilderParameter<LiveQueryDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteLiveQuery", alias, liveQueryDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteLiveQuery()
        {
            return ExceptField("deleteLiveQuery");
        }

        public MutationQueryBuilder WithDeleteOrgRoleGroup(OrgRoleGroupDeleteResponseQueryBuilder orgRoleGroupDeleteResponseQueryBuilder, QueryBuilderParameter<OrgRoleGroupDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteOrgRoleGroup", alias, orgRoleGroupDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteOrgRoleGroup()
        {
            return ExceptField("deleteOrgRoleGroup");
        }

        public MutationQueryBuilder WithDeleteOrgServiceAccount(OrgServiceAccountDeleteResponseQueryBuilder orgServiceAccountDeleteResponseQueryBuilder, QueryBuilderParameter<OrgServiceAccountDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteOrgServiceAccount", alias, orgServiceAccountDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteOrgServiceAccount()
        {
            return ExceptField("deleteOrgServiceAccount");
        }

        public MutationQueryBuilder WithDeletePersonalAccessToken(PersonalAccessTokenDeleteResponseQueryBuilder personalAccessTokenDeleteResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deletePersonalAccessToken", alias, personalAccessTokenDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeletePersonalAccessToken()
        {
            return ExceptField("deletePersonalAccessToken");
        }

        public MutationQueryBuilder WithDeleteSecretsOrgServiceAccount(OrgServiceAccountDeleteSecretsResponseQueryBuilder orgServiceAccountDeleteSecretsResponseQueryBuilder, QueryBuilderParameter<OrgServiceAccountDeleteSecretsRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteSecretsOrgServiceAccount", alias, orgServiceAccountDeleteSecretsResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSecretsOrgServiceAccount()
        {
            return ExceptField("deleteSecretsOrgServiceAccount");
        }

        public MutationQueryBuilder WithDeleteSite(SiteDeleteResponseQueryBuilder siteDeleteResponseQueryBuilder, QueryBuilderParameter<SiteDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteSite", alias, siteDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSite()
        {
            return ExceptField("deleteSite");
        }

        public MutationQueryBuilder WithDeleteSpace(SpaceDeleteResponseQueryBuilder spaceDeleteResponseQueryBuilder, QueryBuilderParameter<SpaceDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteSpace", alias, spaceDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSpace()
        {
            return ExceptField("deleteSpace");
        }

        public MutationQueryBuilder WithDeleteWebhookReceiver(WebhookReceiverDeleteResponseQueryBuilder webhookReceiverDeleteResponseQueryBuilder, QueryBuilderParameter<WebhookReceiverDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteWebhookReceiver", alias, webhookReceiverDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteWebhookReceiver()
        {
            return ExceptField("deleteWebhookReceiver");
        }

        public MutationQueryBuilder WithDeleteWebhookTarget(WebhookTargetDeleteResponseQueryBuilder webhookTargetDeleteResponseQueryBuilder, QueryBuilderParameter<WebhookTargetDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteWebhookTarget", alias, webhookTargetDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteWebhookTarget()
        {
            return ExceptField("deleteWebhookTarget");
        }

        public MutationQueryBuilder WithEnableWebhookTarget(WebhookTargetEnableResponseQueryBuilder webhookTargetEnableResponseQueryBuilder, QueryBuilderParameter<WebhookTargetEnableRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("enableWebhookTarget", alias, webhookTargetEnableResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptEnableWebhookTarget()
        {
            return ExceptField("enableWebhookTarget");
        }

        public MutationQueryBuilder WithGenerateContainerSiDs(GatewayGenerateContainerSiDsResponseQueryBuilder gatewayGenerateContainerSiDsResponseQueryBuilder, QueryBuilderParameter<GatewayGenerateContainerSiDsRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("generateContainerSIDs", alias, gatewayGenerateContainerSiDsResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptGenerateContainerSiDs()
        {
            return ExceptField("generateContainerSIDs");
        }

        public MutationQueryBuilder WithPauseLiveQuery(LiveQueryPauseResponseQueryBuilder liveQueryPauseResponseQueryBuilder, QueryBuilderParameter<LiveQueryPauseRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("pauseLiveQuery", alias, liveQueryPauseResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptPauseLiveQuery()
        {
            return ExceptField("pauseLiveQuery");
        }

        public MutationQueryBuilder WithRegisterGatewayContainer(GatewayRegisterContainerResponseQueryBuilder gatewayRegisterContainerResponseQueryBuilder, QueryBuilderParameter<GatewayRegisterContainerRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("registerGatewayContainer", alias, gatewayRegisterContainerResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRegisterGatewayContainer()
        {
            return ExceptField("registerGatewayContainer");
        }

        public MutationQueryBuilder WithRemoveOrgMembershipUser(UserRemoveOrgMembershipResponseQueryBuilder userRemoveOrgMembershipResponseQueryBuilder, QueryBuilderParameter<UserRemoveOrgMembershipRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("removeOrgMembershipUser", alias, userRemoveOrgMembershipResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRemoveOrgMembershipUser()
        {
            return ExceptField("removeOrgMembershipUser");
        }

        public MutationQueryBuilder WithRemoveOrgUser(OrgRemoveOrgUserAsyncResponseQueryBuilder orgRemoveOrgUserAsyncResponseQueryBuilder, QueryBuilderParameter<OrgRemoveOrgUserAsyncRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("removeOrgUser", alias, orgRemoveOrgUserAsyncResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRemoveOrgUser()
        {
            return ExceptField("removeOrgUser");
        }

        public MutationQueryBuilder WithRemoveRole(UserRemoveRoleResponseQueryBuilder userRemoveRoleResponseQueryBuilder, QueryBuilderParameter<UserRemoveRoleRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("removeRole", alias, userRemoveRoleResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRemoveRole()
        {
            return ExceptField("removeRole");
        }

        public MutationQueryBuilder WithRestartConnector(ConnectorRestartResponseQueryBuilder connectorRestartResponseQueryBuilder, QueryBuilderParameter<ConnectorRestartRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("restartConnector", alias, connectorRestartResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRestartConnector()
        {
            return ExceptField("restartConnector");
        }

        public MutationQueryBuilder WithResumeLiveQuery(LiveQueryResumeResponseQueryBuilder liveQueryResumeResponseQueryBuilder, QueryBuilderParameter<LiveQueryResumeRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("resumeLiveQuery", alias, liveQueryResumeResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptResumeLiveQuery()
        {
            return ExceptField("resumeLiveQuery");
        }

        public MutationQueryBuilder WithStartConnector(ConnectorStartResponseQueryBuilder connectorStartResponseQueryBuilder, QueryBuilderParameter<ConnectorStartRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("startConnector", alias, connectorStartResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptStartConnector()
        {
            return ExceptField("startConnector");
        }

        public MutationQueryBuilder WithStopConnector(ConnectorStopResponseQueryBuilder connectorStopResponseQueryBuilder, QueryBuilderParameter<ConnectorStopRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("stopConnector", alias, connectorStopResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptStopConnector()
        {
            return ExceptField("stopConnector");
        }

        public MutationQueryBuilder WithSuspendGateway(GatewaySuspendResponseQueryBuilder gatewaySuspendResponseQueryBuilder, QueryBuilderParameter<GatewaySuspendRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("suspendGateway", alias, gatewaySuspendResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSuspendGateway()
        {
            return ExceptField("suspendGateway");
        }

        public MutationQueryBuilder WithUpdateBuilding(BuildingUpdateResponseQueryBuilder buildingUpdateResponseQueryBuilder, QueryBuilderParameter<BuildingUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateBuilding", alias, buildingUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateBuilding()
        {
            return ExceptField("updateBuilding");
        }

        public MutationQueryBuilder WithUpdateConnector(ConnectorUpdateResponseQueryBuilder connectorUpdateResponseQueryBuilder, QueryBuilderParameter<ConnectorUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateConnector", alias, connectorUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateConnector()
        {
            return ExceptField("updateConnector");
        }

        public MutationQueryBuilder WithUpdateConnectorAuth(ConnectorAuthUpdateResponseQueryBuilder connectorAuthUpdateResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateConnectorAuth", alias, connectorAuthUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateConnectorAuth()
        {
            return ExceptField("updateConnectorAuth");
        }

        public MutationQueryBuilder WithUpdateFloor(FloorUpdateResponseQueryBuilder floorUpdateResponseQueryBuilder, QueryBuilderParameter<FloorUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateFloor", alias, floorUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateFloor()
        {
            return ExceptField("updateFloor");
        }

        public MutationQueryBuilder WithUpdateGrant(GrantUpdateResponseQueryBuilder grantUpdateResponseQueryBuilder, QueryBuilderParameter<GrantUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateGrant", alias, grantUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateGrant()
        {
            return ExceptField("updateGrant");
        }

        public MutationQueryBuilder WithUpdateInvite(InviteUpdateResponseQueryBuilder inviteUpdateResponseQueryBuilder, QueryBuilderParameter<InviteUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateInvite", alias, inviteUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateInvite()
        {
            return ExceptField("updateInvite");
        }

        public MutationQueryBuilder WithUpdateLiveQuery(LiveQueryUpdateResponseQueryBuilder liveQueryUpdateResponseQueryBuilder, QueryBuilderParameter<LiveQueryUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateLiveQuery", alias, liveQueryUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLiveQuery()
        {
            return ExceptField("updateLiveQuery");
        }

        public MutationQueryBuilder WithUpdateOrgRoleGroup(OrgRoleGroupUpdateResponseQueryBuilder orgRoleGroupUpdateResponseQueryBuilder, QueryBuilderParameter<OrgRoleGroupUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateOrgRoleGroup", alias, orgRoleGroupUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOrgRoleGroup()
        {
            return ExceptField("updateOrgRoleGroup");
        }

        public MutationQueryBuilder WithUpdateOrgServiceAccount(OrgServiceAccountUpdateResponseQueryBuilder orgServiceAccountUpdateResponseQueryBuilder, QueryBuilderParameter<OrgServiceAccountUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateOrgServiceAccount", alias, orgServiceAccountUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOrgServiceAccount()
        {
            return ExceptField("updateOrgServiceAccount");
        }

        public MutationQueryBuilder WithUpdateOrganization(OrgUpdateResponseQueryBuilder orgUpdateResponseQueryBuilder, QueryBuilderParameter<OrgUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateOrganization", alias, orgUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOrganization()
        {
            return ExceptField("updateOrganization");
        }

        public MutationQueryBuilder WithUpdateOrganizationV2(OrgUpdateV2ResponseQueryBuilder orgUpdateV2ResponseQueryBuilder, QueryBuilderParameter<OrgUpdateV2RequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateOrganizationV2", alias, orgUpdateV2ResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOrganizationV2()
        {
            return ExceptField("updateOrganizationV2");
        }

        public MutationQueryBuilder WithUpdatePersonalAccessToken(PersonalAccessTokenUpdateResponseQueryBuilder personalAccessTokenUpdateResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updatePersonalAccessToken", alias, personalAccessTokenUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePersonalAccessToken()
        {
            return ExceptField("updatePersonalAccessToken");
        }

        public MutationQueryBuilder WithUpdateSite(SiteUpdateResponseQueryBuilder siteUpdateResponseQueryBuilder, QueryBuilderParameter<SiteUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateSite", alias, siteUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSite()
        {
            return ExceptField("updateSite");
        }

        public MutationQueryBuilder WithUpdateSpace(SpaceUpdateResponseQueryBuilder spaceUpdateResponseQueryBuilder, QueryBuilderParameter<SpaceUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateSpace", alias, spaceUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSpace()
        {
            return ExceptField("updateSpace");
        }

        public MutationQueryBuilder WithUpdateUser(UserUpdateResponseQueryBuilder userUpdateResponseQueryBuilder, QueryBuilderParameter<UserUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateUser", alias, userUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUser()
        {
            return ExceptField("updateUser");
        }

        public MutationQueryBuilder WithUpdateWebhookTarget(WebhookTargetUpdateResponseQueryBuilder webhookTargetUpdateResponseQueryBuilder, QueryBuilderParameter<WebhookTargetUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateWebhookTarget", alias, webhookTargetUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateWebhookTarget()
        {
            return ExceptField("updateWebhookTarget");
        }

        public MutationQueryBuilder WithUpsertConfigConnector(ConnectorUpsertConfigResponseQueryBuilder connectorUpsertConfigResponseQueryBuilder, QueryBuilderParameter<ConnectorUpsertConfigRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("upsertConfigConnector", alias, connectorUpsertConfigResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpsertConfigConnector()
        {
            return ExceptField("upsertConfigConnector");
        }

        public MutationQueryBuilder WithUpsertWebhookReceiver(WebhookReceiverUpsertResponseQueryBuilder webhookReceiverUpsertResponseQueryBuilder, QueryBuilderParameter<WebhookReceiverUpsertRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("upsertWebhookReceiver", alias, webhookReceiverUpsertResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpsertWebhookReceiver()
        {
            return ExceptField("upsertWebhookReceiver");
        }
    }

    public class NameIdentityQueryBuilder : GraphQlQueryBuilder<NameIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "NameIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public NameIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public NameIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public NameIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NameIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public NameIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public NameIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class NameIdentityModelQueryBuilder : GraphQlQueryBuilder<NameIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public NameIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "NameIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public NameIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public NameIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public NameIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NameIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public NameIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public NameIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public NameIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public NameIdentityModelQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class OAuth2ClientCredentialsFlowQueryBuilder : GraphQlQueryBuilder<OAuth2ClientCredentialsFlowQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "clientId" },
                new GraphQlFieldMetadata { Name = "clientSecret" },
                new GraphQlFieldMetadata { Name = "headerPrefix" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "tokenEndpoint" }
            };

        protected override string TypeName { get { return "OAuth2ClientCredentialsFlow"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OAuth2ClientCredentialsFlowQueryBuilder WithClientId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientId", alias, new GraphQlDirective[] { include, skip });
        }

        public OAuth2ClientCredentialsFlowQueryBuilder ExceptClientId()
        {
            return ExceptField("clientId");
        }

        public OAuth2ClientCredentialsFlowQueryBuilder WithClientSecret(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientSecret", alias, new GraphQlDirective[] { include, skip });
        }

        public OAuth2ClientCredentialsFlowQueryBuilder ExceptClientSecret()
        {
            return ExceptField("clientSecret");
        }

        public OAuth2ClientCredentialsFlowQueryBuilder WithHeaderPrefix(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("headerPrefix", alias, new GraphQlDirective[] { include, skip });
        }

        public OAuth2ClientCredentialsFlowQueryBuilder ExceptHeaderPrefix()
        {
            return ExceptField("headerPrefix");
        }

        public OAuth2ClientCredentialsFlowQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public OAuth2ClientCredentialsFlowQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public OAuth2ClientCredentialsFlowQueryBuilder WithTokenEndpoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tokenEndpoint", alias, new GraphQlDirective[] { include, skip });
        }

        public OAuth2ClientCredentialsFlowQueryBuilder ExceptTokenEndpoint()
        {
            return ExceptField("tokenEndpoint");
        }
    }

    public class OneTimePriceItemQueryBuilder : GraphQlQueryBuilder<OneTimePriceItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "priceId" },
                new GraphQlFieldMetadata { Name = "tier", IsComplex = true, QueryBuilderType = typeof(TierQueryBuilder) }
            };

        protected override string TypeName { get { return "OneTimePriceItem"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OneTimePriceItemQueryBuilder WithPriceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priceId", alias, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemQueryBuilder ExceptPriceId()
        {
            return ExceptField("priceId");
        }

        public OneTimePriceItemQueryBuilder WithTier(TierQueryBuilder tierQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tier", alias, tierQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemQueryBuilder ExceptTier()
        {
            return ExceptField("tier");
        }
    }

    public class OneTimePriceItemsQueryBuilder : GraphQlQueryBuilder<OneTimePriceItemsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(OneTimePriceItemQueryBuilder) }
            };

        protected override string TypeName { get { return "OneTimePriceItems"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OneTimePriceItemsQueryBuilder WithItems(OneTimePriceItemQueryBuilder oneTimePriceItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, oneTimePriceItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemsQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }
    }

    public class OrgQueryBuilder : GraphQlQueryBuilder<OrgQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "authenticationChallenge", IsComplex = true, QueryBuilderType = typeof(OrgAuthenticationChallengeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "gateways", IsComplex = true, QueryBuilderType = typeof(GatewayQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataRecordQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "provisioningState" },
                new GraphQlFieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "stripeCustomerId" },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "Org"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgQueryBuilder WithAuthenticationChallenge(OrgAuthenticationChallengeQueryBuilder orgAuthenticationChallengeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("authenticationChallenge", alias, orgAuthenticationChallengeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptAuthenticationChallenge()
        {
            return ExceptField("authenticationChallenge");
        }

        public OrgQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public OrgQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public OrgQueryBuilder WithGateways(GatewayQueryBuilder gatewayQueryBuilder, QueryBuilderParameter<GatewayFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("gateways", alias, gatewayQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptGateways()
        {
            return ExceptField("gateways");
        }

        public OrgQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrgQueryBuilder WithMetadata(MetadataRecordQueryBuilder metadataRecordQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataRecordQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public OrgQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrgQueryBuilder WithProvisioningState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provisioningState", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptProvisioningState()
        {
            return ExceptField("provisioningState");
        }

        public OrgQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public OrgQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public OrgQueryBuilder WithStripeCustomerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stripeCustomerId", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptStripeCustomerId()
        {
            return ExceptField("stripeCustomerId");
        }

        public OrgQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public OrgQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public OrgQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<UserFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }
    }

    public class OrgAuthenticationChallengeQueryBuilder : GraphQlQueryBuilder<OrgAuthenticationChallengeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connection" },
                new GraphQlFieldMetadata { Name = "enabled" }
            };

        protected override string TypeName { get { return "OrgAuthenticationChallenge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgAuthenticationChallengeQueryBuilder WithConnection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connection", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgAuthenticationChallengeQueryBuilder ExceptConnection()
        {
            return ExceptField("connection");
        }

        public OrgAuthenticationChallengeQueryBuilder WithEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("enabled", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgAuthenticationChallengeQueryBuilder ExceptEnabled()
        {
            return ExceptField("enabled");
        }
    }

    public class OrgIsOrgNameAvailableResponseQueryBuilder : GraphQlQueryBuilder<OrgIsOrgNameAvailableResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "isAvailable" },
                new GraphQlFieldMetadata { Name = "suggestedOrgName" }
            };

        protected override string TypeName { get { return "OrgIsOrgNameAvailableResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgIsOrgNameAvailableResponseQueryBuilder WithIsAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgIsOrgNameAvailableResponseQueryBuilder ExceptIsAvailable()
        {
            return ExceptField("isAvailable");
        }

        public OrgIsOrgNameAvailableResponseQueryBuilder WithSuggestedOrgName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("suggestedOrgName", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgIsOrgNameAvailableResponseQueryBuilder ExceptSuggestedOrgName()
        {
            return ExceptField("suggestedOrgName");
        }
    }

    public class OrgRemoveOrgUserAsyncResponseQueryBuilder : GraphQlQueryBuilder<OrgRemoveOrgUserAsyncResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "OrgRemoveOrgUserAsyncResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgRemoveOrgUserAsyncResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRemoveOrgUserAsyncResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class OrgRoleGroupCreateResponseQueryBuilder : GraphQlQueryBuilder<OrgRoleGroupCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgRoleGroup", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupDtoQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgRoleGroupCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgRoleGroupCreateResponseQueryBuilder WithOrgRoleGroup(OrgRoleGroupDtoQueryBuilder orgRoleGroupDtoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("orgRoleGroup", alias, orgRoleGroupDtoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupCreateResponseQueryBuilder ExceptOrgRoleGroup()
        {
            return ExceptField("orgRoleGroup");
        }
    }

    public class OrgRoleGroupDtoQueryBuilder : GraphQlQueryBuilder<OrgRoleGroupDtoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isSynced" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "OrgRoleGroupDTO"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgRoleGroupDtoQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public OrgRoleGroupDtoQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public OrgRoleGroupDtoQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrgRoleGroupDtoQueryBuilder WithIsSynced(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSynced", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptIsSynced()
        {
            return ExceptField("isSynced");
        }

        public OrgRoleGroupDtoQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrgRoleGroupDtoQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public OrgRoleGroupDtoQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public OrgRoleGroupDtoQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDtoQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class OrgRoleGroupDeleteResponseQueryBuilder : GraphQlQueryBuilder<OrgRoleGroupDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "success" }
            };

        protected override string TypeName { get { return "OrgRoleGroupDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgRoleGroupDeleteResponseQueryBuilder WithSuccess(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("success", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupDeleteResponseQueryBuilder ExceptSuccess()
        {
            return ExceptField("success");
        }
    }

    public class OrgRoleGroupUpdateResponseQueryBuilder : GraphQlQueryBuilder<OrgRoleGroupUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgRoleGroup", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupDtoQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgRoleGroupUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgRoleGroupUpdateResponseQueryBuilder WithOrgRoleGroup(OrgRoleGroupDtoQueryBuilder orgRoleGroupDtoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("orgRoleGroup", alias, orgRoleGroupDtoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgRoleGroupUpdateResponseQueryBuilder ExceptOrgRoleGroup()
        {
            return ExceptField("orgRoleGroup");
        }
    }

    public class OrgServiceAccountContainerQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountContainerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountDtoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "secrets", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountSecretHintQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgServiceAccountContainer"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountContainerQueryBuilder WithOrgServiceAccount(OrgServiceAccountDtoQueryBuilder orgServiceAccountDtoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("orgServiceAccount", alias, orgServiceAccountDtoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountContainerQueryBuilder ExceptOrgServiceAccount()
        {
            return ExceptField("orgServiceAccount");
        }

        public OrgServiceAccountContainerQueryBuilder WithSecrets(OrgServiceAccountSecretHintQueryBuilder orgServiceAccountSecretHintQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("secrets", alias, orgServiceAccountSecretHintQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountContainerQueryBuilder ExceptSecrets()
        {
            return ExceptField("secrets");
        }
    }

    public class OrgServiceAccountCreateResponseQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountDtoQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgServiceAccountCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountCreateResponseQueryBuilder WithOrgServiceAccount(OrgServiceAccountDtoQueryBuilder orgServiceAccountDtoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("orgServiceAccount", alias, orgServiceAccountDtoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateResponseQueryBuilder ExceptOrgServiceAccount()
        {
            return ExceptField("orgServiceAccount");
        }
    }

    public class OrgServiceAccountCreateSecretResponseQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountCreateSecretResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "clientId" },
                new GraphQlFieldMetadata { Name = "clientSecret" },
                new GraphQlFieldMetadata { Name = "expirationUnix", IsComplex = true },
                new GraphQlFieldMetadata { Name = "secretName" },
                new GraphQlFieldMetadata { Name = "serviceAccountName" }
            };

        protected override string TypeName { get { return "OrgServiceAccountCreateSecretResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountCreateSecretResponseQueryBuilder WithClientId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientId", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder ExceptClientId()
        {
            return ExceptField("clientId");
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder WithClientSecret(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientSecret", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder ExceptClientSecret()
        {
            return ExceptField("clientSecret");
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder WithExpirationUnix(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expirationUnix", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder ExceptExpirationUnix()
        {
            return ExceptField("expirationUnix");
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder WithSecretName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secretName", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder ExceptSecretName()
        {
            return ExceptField("secretName");
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder WithServiceAccountName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serviceAccountName", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCreateSecretResponseQueryBuilder ExceptServiceAccountName()
        {
            return ExceptField("serviceAccountName");
        }
    }

    public class OrgServiceAccountCustomRoleQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountCustomRoleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "permissions", IsComplex = true }
            };

        protected override string TypeName { get { return "OrgServiceAccountCustomRole"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountCustomRoleQueryBuilder WithPermissions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("permissions", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountCustomRoleQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }
    }

    public class OrgServiceAccountDtoQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountDtoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "clientId" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "customRole", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountCustomRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isSynced" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "orgRoleGroups", IsComplex = true },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "OrgServiceAccountDTO"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountDtoQueryBuilder WithClientId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientId", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptClientId()
        {
            return ExceptField("clientId");
        }

        public OrgServiceAccountDtoQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public OrgServiceAccountDtoQueryBuilder WithCustomRole(OrgServiceAccountCustomRoleQueryBuilder orgServiceAccountCustomRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("customRole", alias, orgServiceAccountCustomRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptCustomRole()
        {
            return ExceptField("customRole");
        }

        public OrgServiceAccountDtoQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public OrgServiceAccountDtoQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrgServiceAccountDtoQueryBuilder WithIsSynced(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSynced", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptIsSynced()
        {
            return ExceptField("isSynced");
        }

        public OrgServiceAccountDtoQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrgServiceAccountDtoQueryBuilder WithOrgRoleGroups(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orgRoleGroups", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptOrgRoleGroups()
        {
            return ExceptField("orgRoleGroups");
        }

        public OrgServiceAccountDtoQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public OrgServiceAccountDtoQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDtoQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class OrgServiceAccountDeleteResponseQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "success" }
            };

        protected override string TypeName { get { return "OrgServiceAccountDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountDeleteResponseQueryBuilder WithSuccess(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("success", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDeleteResponseQueryBuilder ExceptSuccess()
        {
            return ExceptField("success");
        }
    }

    public class OrgServiceAccountDeleteSecretsResponseQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountDeleteSecretsResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "OrgServiceAccountDeleteSecretsResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountDeleteSecretsResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountDeleteSecretsResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class OrgServiceAccountSecretHintQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountSecretHintQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "expirationUnix", IsComplex = true },
                new GraphQlFieldMetadata { Name = "secretName" }
            };

        protected override string TypeName { get { return "OrgServiceAccountSecretHint"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountSecretHintQueryBuilder WithExpirationUnix(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expirationUnix", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountSecretHintQueryBuilder ExceptExpirationUnix()
        {
            return ExceptField("expirationUnix");
        }

        public OrgServiceAccountSecretHintQueryBuilder WithSecretName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secretName", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountSecretHintQueryBuilder ExceptSecretName()
        {
            return ExceptField("secretName");
        }
    }

    public class OrgServiceAccountUpdateResponseQueryBuilder : GraphQlQueryBuilder<OrgServiceAccountUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgServiceAccount", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountDtoQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgServiceAccountUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgServiceAccountUpdateResponseQueryBuilder WithOrgServiceAccount(OrgServiceAccountDtoQueryBuilder orgServiceAccountDtoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("orgServiceAccount", alias, orgServiceAccountDtoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgServiceAccountUpdateResponseQueryBuilder ExceptOrgServiceAccount()
        {
            return ExceptField("orgServiceAccount");
        }
    }

    public class OrgUpdateResponseQueryBuilder : GraphQlQueryBuilder<OrgUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "org", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgUpdateResponseQueryBuilder WithOrg(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("org", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgUpdateResponseQueryBuilder ExceptOrg()
        {
            return ExceptField("org");
        }
    }

    public class OrgUpdateV2ResponseQueryBuilder : GraphQlQueryBuilder<OrgUpdateV2ResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "org", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgUpdateV2Response"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgUpdateV2ResponseQueryBuilder WithOrg(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("org", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgUpdateV2ResponseQueryBuilder ExceptOrg()
        {
            return ExceptField("org");
        }
    }

    public class OrganizationQueryBuilder : GraphQlQueryBuilder<OrganizationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasMember", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasMemberEdges", IsComplex = true, QueryBuilderType = typeof(HasMemberEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(OrganizationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPrimaryContact", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPrimaryContactEdges", IsComplex = true, QueryBuilderType = typeof(HasPrimaryContactEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(OrganizationIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isProviderOf", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Organization"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrganizationQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public OrganizationQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public OrganizationQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public OrganizationQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public OrganizationQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public OrganizationQueryBuilder WithHasMember(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasMember", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrganizationQueryBuilder ExceptHasMember()
        {
            return ExceptField("hasMember");
        }

        public OrganizationQueryBuilder WithHasMemberEdges(HasMemberEdgeQueryBuilder hasMemberEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasMemberEdges", alias, hasMemberEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptHasMemberEdges()
        {
            return ExceptField("hasMemberEdges");
        }

        public OrganizationQueryBuilder WithHasPart(OrganizationQueryBuilder organizationQueryBuilder, QueryBuilderParameter<OrganizationFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, organizationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrganizationQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public OrganizationQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public OrganizationQueryBuilder WithHasPrimaryContact(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPrimaryContact", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrganizationQueryBuilder ExceptHasPrimaryContact()
        {
            return ExceptField("hasPrimaryContact");
        }

        public OrganizationQueryBuilder WithHasPrimaryContactEdges(HasPrimaryContactEdgeQueryBuilder hasPrimaryContactEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPrimaryContactEdges", alias, hasPrimaryContactEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptHasPrimaryContactEdges()
        {
            return ExceptField("hasPrimaryContactEdges");
        }

        public OrganizationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrganizationQueryBuilder WithIdentities(OrganizationIdentityUnionQueryBuilder organizationIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, organizationIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public OrganizationQueryBuilder WithIsProviderOf(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isProviderOf", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrganizationQueryBuilder ExceptIsProviderOf()
        {
            return ExceptField("isProviderOf");
        }

        public OrganizationQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrganizationQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public OrganizationQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public OrganizationQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public OrganizationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrganizationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public OrganizationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class OrganizationIdentityUnionQueryBuilder : GraphQlQueryBuilder<OrganizationIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public OrganizationIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "OrganizationIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrganizationIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrganizationIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PeopleGroupQueryBuilder : GraphQlQueryBuilder<PeopleGroupQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasMember", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasMemberEdges", IsComplex = true, QueryBuilderType = typeof(HasMemberEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPrimaryContact", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPrimaryContactEdges", IsComplex = true, QueryBuilderType = typeof(HasPrimaryContactEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(PeopleGroupIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isProviderOf", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isResponsibleFor", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isResponsibleForEdges", IsComplex = true, QueryBuilderType = typeof(IsResponsibleForEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "PeopleGroup"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PeopleGroupQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public PeopleGroupQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PeopleGroupQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PeopleGroupQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PeopleGroupQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PeopleGroupQueryBuilder WithHasMember(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasMember", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PeopleGroupQueryBuilder ExceptHasMember()
        {
            return ExceptField("hasMember");
        }

        public PeopleGroupQueryBuilder WithHasMemberEdges(HasMemberEdgeQueryBuilder hasMemberEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasMemberEdges", alias, hasMemberEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptHasMemberEdges()
        {
            return ExceptField("hasMemberEdges");
        }

        public PeopleGroupQueryBuilder WithHasPart(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public PeopleGroupQueryBuilder WithHasPrimaryContact(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPrimaryContact", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PeopleGroupQueryBuilder ExceptHasPrimaryContact()
        {
            return ExceptField("hasPrimaryContact");
        }

        public PeopleGroupQueryBuilder WithHasPrimaryContactEdges(HasPrimaryContactEdgeQueryBuilder hasPrimaryContactEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPrimaryContactEdges", alias, hasPrimaryContactEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptHasPrimaryContactEdges()
        {
            return ExceptField("hasPrimaryContactEdges");
        }

        public PeopleGroupQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PeopleGroupQueryBuilder WithIdentities(PeopleGroupIdentityUnionQueryBuilder peopleGroupIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, peopleGroupIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public PeopleGroupQueryBuilder WithIsProviderOf(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isProviderOf", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PeopleGroupQueryBuilder ExceptIsProviderOf()
        {
            return ExceptField("isProviderOf");
        }

        public PeopleGroupQueryBuilder WithIsResponsibleFor(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isResponsibleFor", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PeopleGroupQueryBuilder ExceptIsResponsibleFor()
        {
            return ExceptField("isResponsibleFor");
        }

        public PeopleGroupQueryBuilder WithIsResponsibleForEdges(IsResponsibleForEdgeQueryBuilder isResponsibleForEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isResponsibleForEdges", alias, isResponsibleForEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptIsResponsibleForEdges()
        {
            return ExceptField("isResponsibleForEdges");
        }

        public PeopleGroupQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PeopleGroupQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public PeopleGroupQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public PeopleGroupQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public PeopleGroupQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PeopleGroupQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class PeopleGroupIdentityUnionQueryBuilder : GraphQlQueryBuilder<PeopleGroupIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public PeopleGroupIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "PeopleGroupIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PeopleGroupIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PeopleGroupIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PersonQueryBuilder : GraphQlQueryBuilder<PersonQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "additionalName" },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "emails", IsComplex = true, QueryBuilderType = typeof(EmailAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "familyName" },
                new GraphQlFieldMetadata { Name = "givenName" },
                new GraphQlFieldMetadata { Name = "hasAccessCredential", IsComplex = true, QueryBuilderType = typeof(AccessCredentialQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasAccessCredentialEdges", IsComplex = true, QueryBuilderType = typeof(HasAccessCredentialEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasCalendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasCalendarInvitations", IsComplex = true, QueryBuilderType = typeof(CalendarInvitationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(PersonIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isMemberOf", IsComplex = true, QueryBuilderType = typeof(OrganizationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isMemberOfEdges", IsComplex = true, QueryBuilderType = typeof(IsMemberOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Person"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonQueryBuilder WithAdditionalName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("additionalName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptAdditionalName()
        {
            return ExceptField("additionalName");
        }

        public PersonQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public PersonQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PersonQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PersonQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PersonQueryBuilder WithEmails(EmailAddressQueryBuilder emailAddressQueryBuilder, QueryBuilderParameter<EmailFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("emails", alias, emailAddressQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptEmails()
        {
            return ExceptField("emails");
        }

        public PersonQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PersonQueryBuilder WithFamilyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("familyName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptFamilyName()
        {
            return ExceptField("familyName");
        }

        public PersonQueryBuilder WithGivenName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("givenName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptGivenName()
        {
            return ExceptField("givenName");
        }

        public PersonQueryBuilder WithHasAccessCredential(AccessCredentialQueryBuilder accessCredentialQueryBuilder, QueryBuilderParameter<AccessCredentialFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasAccessCredential", alias, accessCredentialQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptHasAccessCredential()
        {
            return ExceptField("hasAccessCredential");
        }

        public PersonQueryBuilder WithHasAccessCredentialEdges(HasAccessCredentialEdgeQueryBuilder hasAccessCredentialEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAccessCredentialEdges", alias, hasAccessCredentialEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptHasAccessCredentialEdges()
        {
            return ExceptField("hasAccessCredentialEdges");
        }

        public PersonQueryBuilder WithHasCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasCalendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptHasCalendarEvents()
        {
            return ExceptField("hasCalendarEvents");
        }

        public PersonQueryBuilder WithHasCalendarInvitations(CalendarInvitationQueryBuilder calendarInvitationQueryBuilder, QueryBuilderParameter<CalendarInvitationFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasCalendarInvitations", alias, calendarInvitationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptHasCalendarInvitations()
        {
            return ExceptField("hasCalendarInvitations");
        }

        public PersonQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PersonQueryBuilder WithIdentities(PersonIdentityUnionQueryBuilder personIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, personIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public PersonQueryBuilder WithIsMemberOf(OrganizationQueryBuilder organizationQueryBuilder, QueryBuilderParameter<OrganizationFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isMemberOf", alias, organizationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptIsMemberOf()
        {
            return ExceptField("isMemberOf");
        }

        public PersonQueryBuilder WithIsMemberOfEdges(IsMemberOfEdgeQueryBuilder isMemberOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isMemberOfEdges", alias, isMemberOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptIsMemberOfEdges()
        {
            return ExceptField("isMemberOfEdges");
        }

        public PersonQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public PersonQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PersonQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class PersonIdentityUnionQueryBuilder : GraphQlQueryBuilder<PersonIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public PersonIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "PersonIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PersonalAccessTokenQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "integrityId" },
                new GraphQlFieldMetadata { Name = "lastExchanged", IsComplex = true },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "permissions", IsComplex = true },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "PersonalAccessToken"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public PersonalAccessTokenQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PersonalAccessTokenQueryBuilder WithIntegrityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("integrityId", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptIntegrityId()
        {
            return ExceptField("integrityId");
        }

        public PersonalAccessTokenQueryBuilder WithLastExchanged(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastExchanged", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptLastExchanged()
        {
            return ExceptField("lastExchanged");
        }

        public PersonalAccessTokenQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PersonalAccessTokenQueryBuilder WithPermissions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("permissions", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public PersonalAccessTokenQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public PersonalAccessTokenQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class PersonalAccessTokenCreateResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "pat", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "token" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenCreateResponseQueryBuilder WithPat(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pat", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenCreateResponseQueryBuilder ExceptPat()
        {
            return ExceptField("pat");
        }

        public PersonalAccessTokenCreateResponseQueryBuilder WithToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenCreateResponseQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }
    }

    public class PersonalAccessTokenDeleteResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "isAvailable" },
                new GraphQlFieldMetadata { Name = "suggestedName" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenIsPatNameAvailableResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder WithIsAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder ExceptIsAvailable()
        {
            return ExceptField("isAvailable");
        }

        public PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder WithSuggestedName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("suggestedName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder ExceptSuggestedName()
        {
            return ExceptField("suggestedName");
        }
    }

    public class PersonalAccessTokenUpdateResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "pat", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "token" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenUpdateResponseQueryBuilder WithPat(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pat", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder ExceptPat()
        {
            return ExceptField("pat");
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder WithToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }
    }

    public class PlaceQueryBuilder : GraphQlQueryBuilder<PlaceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        public PlaceQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Place"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PlaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public PlaceQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public PlaceQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public PlaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public PlaceQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PlaceQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PlaceQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PlaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PlaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public PlaceQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public PlaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public PlaceQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public PlaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlaceQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public PlaceQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public PlaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public PlaceQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public PlaceQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public PlaceQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public PlaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public PlaceQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public PlaceQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public PlaceQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public PlaceQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public PlaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PlaceQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public PlaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public PlaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public PlaceQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PointQueryBuilder : GraphQlQueryBuilder<PointQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "aggregation", IsComplex = true, QueryBuilderType = typeof(TimeseriesAggregateRowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "datatype" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasBill", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasHeartbeat", IsComplex = true, QueryBuilderType = typeof(HeartbeatQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasHeartbeatEdges", IsComplex = true, QueryBuilderType = typeof(HasHeartbeatEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(PointIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isBilledTo", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isBilledToEdges", IsComplex = true, QueryBuilderType = typeof(IsBilledToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPointOf", IsComplex = true, QueryBuilderType = typeof(IsPointOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPointOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPointOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(TimeseriesRowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stateTexts", IsComplex = true },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unit", IsComplex = true, QueryBuilderType = typeof(UnitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unused" },
                new GraphQlFieldMetadata { Name = "valueMap", IsComplex = true }
            };

        protected override string TypeName { get { return "Point"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PointQueryBuilder WithAggregation(TimeseriesAggregateRowQueryBuilder timeseriesAggregateRowQueryBuilder, QueryBuilderParameter<object> endTime = null, QueryBuilderParameter<TimeseriesAggPeriodInput?> period = null, QueryBuilderParameter<int?> periodIncrement = null, QueryBuilderParameter<object> startTime = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (endTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endTime", ArgumentValue = endTime });

            if (period != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "period", ArgumentValue = period });

            if (periodIncrement != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "periodIncrement", ArgumentValue = periodIncrement });

            if (startTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startTime", ArgumentValue = startTime });

            return WithObjectField("aggregation", alias, timeseriesAggregateRowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptAggregation()
        {
            return ExceptField("aggregation");
        }

        public PointQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public PointQueryBuilder WithDatatype(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("datatype", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptDatatype()
        {
            return ExceptField("datatype");
        }

        public PointQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PointQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PointQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PointQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PointQueryBuilder WithHasBill(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasBill", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptHasBill()
        {
            return ExceptField("hasBill");
        }

        public PointQueryBuilder WithHasHeartbeat(HeartbeatQueryBuilder heartbeatQueryBuilder, QueryBuilderParameter<HeartbeatFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasHeartbeat", alias, heartbeatQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptHasHeartbeat()
        {
            return ExceptField("hasHeartbeat");
        }

        public PointQueryBuilder WithHasHeartbeatEdges(HasHeartbeatEdgeQueryBuilder hasHeartbeatEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasHeartbeatEdges", alias, hasHeartbeatEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptHasHeartbeatEdges()
        {
            return ExceptField("hasHeartbeatEdges");
        }

        public PointQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PointQueryBuilder WithIdentities(PointIdentityUnionQueryBuilder pointIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, pointIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public PointQueryBuilder WithIsBilledTo(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isBilledTo", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptIsBilledTo()
        {
            return ExceptField("isBilledTo");
        }

        public PointQueryBuilder WithIsBilledToEdges(IsBilledToEdgeQueryBuilder isBilledToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isBilledToEdges", alias, isBilledToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptIsBilledToEdges()
        {
            return ExceptField("isBilledToEdges");
        }

        public PointQueryBuilder WithIsPointOf(IsPointOfUnionQueryBuilder isPointOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPointOf", alias, isPointOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptIsPointOf()
        {
            return ExceptField("isPointOf");
        }

        public PointQueryBuilder WithIsPointOfEdges(IsPointOfEdgeQueryBuilder isPointOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPointOfEdges", alias, isPointOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptIsPointOfEdges()
        {
            return ExceptField("isPointOfEdges");
        }

        public PointQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public PointQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PointQueryBuilder WithSeries(TimeseriesRowQueryBuilder timeseriesRowQueryBuilder, QueryBuilderParameter<object> endTime = null, QueryBuilderParameter<object> ingestionEndTime = null, QueryBuilderParameter<object> ingestionStartTime = null, QueryBuilderParameter<bool?> latest = null, QueryBuilderParameter<object> startTime = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (endTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endTime", ArgumentValue = endTime });

            if (ingestionEndTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ingestionEndTime", ArgumentValue = ingestionEndTime });

            if (ingestionStartTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ingestionStartTime", ArgumentValue = ingestionStartTime });

            if (latest != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "latest", ArgumentValue = latest });

            if (startTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startTime", ArgumentValue = startTime });

            return WithObjectField("series", alias, timeseriesRowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public PointQueryBuilder WithStateTexts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateTexts", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptStateTexts()
        {
            return ExceptField("stateTexts");
        }

        public PointQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public PointQueryBuilder WithUnit(UnitQueryBuilder unitQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unit", alias, unitQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptUnit()
        {
            return ExceptField("unit");
        }

        public PointQueryBuilder WithUnused(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unused", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptUnused()
        {
            return ExceptField("unused");
        }

        public PointQueryBuilder WithValueMap(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("valueMap", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptValueMap()
        {
            return ExceptField("valueMap");
        }
    }

    public class PointIdentityUnionQueryBuilder : GraphQlQueryBuilder<PointIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public PointIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "PointIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PointIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PostalAddressIdentityQueryBuilder : GraphQlQueryBuilder<PostalAddressIdentityQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "PostalAddressIdentity"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PostalAddressIdentityQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PostalAddressIdentityQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PostalAddressIdentityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PostalAddressIdentityQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public PostalAddressIdentityQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public PostalAddressIdentityQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class PostalAddressIdentityModelQueryBuilder : GraphQlQueryBuilder<PostalAddressIdentityModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public PostalAddressIdentityModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "PostalAddressIdentityModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PostalAddressIdentityModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public PostalAddressIdentityModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public PostalAddressIdentityModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PostalAddressIdentityModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public PostalAddressIdentityModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public PostalAddressIdentityModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public PostalAddressIdentityModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public PostalAddressIdentityModelQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ProductBundleResponseQueryBuilder : GraphQlQueryBuilder<ProductBundleResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "archived_at", IsComplex = true },
                new GraphQlFieldMetadata { Name = "created_at" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "interval" },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ProductPriceItemResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataEntryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "plan" },
                new GraphQlFieldMetadata { Name = "productType" },
                new GraphQlFieldMetadata { Name = "sku" },
                new GraphQlFieldMetadata { Name = "slug" },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "updated_at" }
            };

        protected override string TypeName { get { return "ProductBundleResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductBundleResponseQueryBuilder WithArchivedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("archived_at", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptArchivedAt()
        {
            return ExceptField("archived_at");
        }

        public ProductBundleResponseQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created_at", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("created_at");
        }

        public ProductBundleResponseQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ProductBundleResponseQueryBuilder WithInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("interval", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptInterval()
        {
            return ExceptField("interval");
        }

        public ProductBundleResponseQueryBuilder WithItems(ProductPriceItemResponseQueryBuilder productPriceItemResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, productPriceItemResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ProductBundleResponseQueryBuilder WithMetadata(MetadataEntryQueryBuilder metadataEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public ProductBundleResponseQueryBuilder WithPlan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("plan", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptPlan()
        {
            return ExceptField("plan");
        }

        public ProductBundleResponseQueryBuilder WithProductType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productType", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptProductType()
        {
            return ExceptField("productType");
        }

        public ProductBundleResponseQueryBuilder WithSku(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sku", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptSku()
        {
            return ExceptField("sku");
        }

        public ProductBundleResponseQueryBuilder WithSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slug", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptSlug()
        {
            return ExceptField("slug");
        }

        public ProductBundleResponseQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public ProductBundleResponseQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ProductBundleResponseQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated_at", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updated_at");
        }
    }

    public class ProductPriceItemResponseQueryBuilder : GraphQlQueryBuilder<ProductPriceItemResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "lookupKey" },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataEntryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "oneTimePriceItems", IsComplex = true, QueryBuilderType = typeof(OneTimePriceItemsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "priceId" },
                new GraphQlFieldMetadata { Name = "quantityEnabled" },
                new GraphQlFieldMetadata { Name = "quantityRange", IsComplex = true, QueryBuilderType = typeof(QuantityRangeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "slug" },
                new GraphQlFieldMetadata { Name = "tiers", IsComplex = true, QueryBuilderType = typeof(TierQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tiersMode" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "unitAmount", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unitAmountDecimal" }
            };

        protected override string TypeName { get { return "ProductPriceItemResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductPriceItemResponseQueryBuilder WithLookupKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lookupKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptLookupKey()
        {
            return ExceptField("lookupKey");
        }

        public ProductPriceItemResponseQueryBuilder WithMetadata(MetadataEntryQueryBuilder metadataEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public ProductPriceItemResponseQueryBuilder WithOneTimePriceItems(OneTimePriceItemsQueryBuilder oneTimePriceItemsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("oneTimePriceItems", alias, oneTimePriceItemsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptOneTimePriceItems()
        {
            return ExceptField("oneTimePriceItems");
        }

        public ProductPriceItemResponseQueryBuilder WithPriceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priceId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptPriceId()
        {
            return ExceptField("priceId");
        }

        public ProductPriceItemResponseQueryBuilder WithQuantityEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantityEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptQuantityEnabled()
        {
            return ExceptField("quantityEnabled");
        }

        public ProductPriceItemResponseQueryBuilder WithQuantityRange(QuantityRangeQueryBuilder quantityRangeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("quantityRange", alias, quantityRangeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptQuantityRange()
        {
            return ExceptField("quantityRange");
        }

        public ProductPriceItemResponseQueryBuilder WithSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slug", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptSlug()
        {
            return ExceptField("slug");
        }

        public ProductPriceItemResponseQueryBuilder WithTiers(TierQueryBuilder tierQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tiers", alias, tierQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptTiers()
        {
            return ExceptField("tiers");
        }

        public ProductPriceItemResponseQueryBuilder WithTiersMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tiersMode", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptTiersMode()
        {
            return ExceptField("tiersMode");
        }

        public ProductPriceItemResponseQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ProductPriceItemResponseQueryBuilder WithUnitAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptUnitAmount()
        {
            return ExceptField("unitAmount");
        }

        public ProductPriceItemResponseQueryBuilder WithUnitAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptUnitAmountDecimal()
        {
            return ExceptField("unitAmountDecimal");
        }
    }

    public class QuantityRangeQueryBuilder : GraphQlQueryBuilder<QuantityRangeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "max", IsComplex = true },
                new GraphQlFieldMetadata { Name = "min", IsComplex = true }
            };

        protected override string TypeName { get { return "QuantityRange"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public QuantityRangeQueryBuilder WithMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("max", alias, new GraphQlDirective[] { include, skip });
        }

        public QuantityRangeQueryBuilder ExceptMax()
        {
            return ExceptField("max");
        }

        public QuantityRangeQueryBuilder WithMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("min", alias, new GraphQlDirective[] { include, skip });
        }

        public QuantityRangeQueryBuilder ExceptMin()
        {
            return ExceptField("min");
        }
    }

    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "accessConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthResponseSecretQueryBuilder) },
                new GraphQlFieldMetadata { Name = "accessTokenFromPAT" },
                new GraphQlFieldMetadata { Name = "accounts", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "availableConnectorTypes", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeListAvailableResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectorTypes", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gateways", IsComplex = true, QueryBuilderType = typeof(GatewayQueryBuilder) },
                new GraphQlFieldMetadata { Name = "getOrgMembershipsUser", IsComplex = true, QueryBuilderType = typeof(UserOrgDetailQueryBuilder) },
                new GraphQlFieldMetadata { Name = "grants", IsComplex = true, QueryBuilderType = typeof(GrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "invites", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isOrgNameAvailable", IsComplex = true, QueryBuilderType = typeof(OrgIsOrgNameAvailableResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPatNameAvailable", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leases", IsComplex = true, QueryBuilderType = typeof(LeaseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "liveQueries", IsComplex = true, QueryBuilderType = typeof(LiveQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "orgRoleGroups", IsComplex = true, QueryBuilderType = typeof(OrgRoleGroupDtoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "orgServiceAccounts", IsComplex = true, QueryBuilderType = typeof(OrgServiceAccountContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "people", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "productBundleSubscriptions", IsComplex = true, QueryBuilderType = typeof(BillingProductBundleSubscriptionResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roleManagers", IsComplex = true, QueryBuilderType = typeof(RoleManagerRoleDtoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "suggestEquivalentSpaces", IsComplex = true, QueryBuilderType = typeof(SpaceMappingSuggestedEquivalentSpacesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "suggestFloorLevels", IsComplex = true, QueryBuilderType = typeof(SpaceMappingFloorLevelSuggestionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "suggestSpaceCodes", IsComplex = true, QueryBuilderType = typeof(SpaceMappingSpaceCodeSuggestionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tokens", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "units", IsComplex = true, QueryBuilderType = typeof(UnitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "webhookTargets", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) },
                new GraphQlFieldMetadata { Name = "workOrders", IsComplex = true, QueryBuilderType = typeof(WorkOrderQueryBuilder) },
                new GraphQlFieldMetadata { Name = "zones", IsComplex = true, QueryBuilderType = typeof(ZoneQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithAccessConnectorAuth(ConnectorAuthResponseSecretQueryBuilder connectorAuthResponseSecretQueryBuilder, QueryBuilderParameter<ConnectorAuthAccessRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("accessConnectorAuth", alias, connectorAuthResponseSecretQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAccessConnectorAuth()
        {
            return ExceptField("accessConnectorAuth");
        }

        public QueryQueryBuilder WithAccessTokenFromPat(QueryBuilderParameter<PersonalAccessTokenGetAccessTokenFromPatRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithScalarField("accessTokenFromPAT", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAccessTokenFromPat()
        {
            return ExceptField("accessTokenFromPAT");
        }

        public QueryQueryBuilder WithAccounts(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("accounts", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAccounts()
        {
            return ExceptField("accounts");
        }

        public QueryQueryBuilder WithAvailableConnectorTypes(ConnectorTypeListAvailableResponseQueryBuilder connectorTypeListAvailableResponseQueryBuilder, QueryBuilderParameter<ConnectorTypeFilterInput> filter = null, QueryBuilderParameter<bool?> includeRequested = null, QueryBuilderParameter<bool?> includeUponRequest = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            if (includeRequested != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includeRequested", ArgumentValue = includeRequested });

            if (includeUponRequest != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includeUponRequest", ArgumentValue = includeUponRequest });

            return WithObjectField("availableConnectorTypes", alias, connectorTypeListAvailableResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAvailableConnectorTypes()
        {
            return ExceptField("availableConnectorTypes");
        }

        public QueryQueryBuilder WithBuildings(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("buildings", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public QueryQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public QueryQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public QueryQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });

            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }

        public QueryQueryBuilder WithConnectorTypes(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, QueryBuilderParameter<ConnectorTypeFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectorTypes", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectorTypes()
        {
            return ExceptField("connectorTypes");
        }

        public QueryQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public QueryQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public QueryQueryBuilder WithGateways(GatewayQueryBuilder gatewayQueryBuilder, QueryBuilderParameter<GatewayFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("gateways", alias, gatewayQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGateways()
        {
            return ExceptField("gateways");
        }

        public QueryQueryBuilder WithGetOrgMembershipsUser(UserOrgDetailQueryBuilder userOrgDetailQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("getOrgMembershipsUser", alias, userOrgDetailQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptGetOrgMembershipsUser()
        {
            return ExceptField("getOrgMembershipsUser");
        }

        public QueryQueryBuilder WithGrants(GrantQueryBuilder grantQueryBuilder, QueryBuilderParameter<GrantFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("grants", alias, grantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrants()
        {
            return ExceptField("grants");
        }

        public QueryQueryBuilder WithInvites(InviteQueryBuilder inviteQueryBuilder, QueryBuilderParameter<InviteFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("invites", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvites()
        {
            return ExceptField("invites");
        }

        public QueryQueryBuilder WithIsOrgNameAvailable(OrgIsOrgNameAvailableResponseQueryBuilder orgIsOrgNameAvailableResponseQueryBuilder, QueryBuilderParameter<string> orgName = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (orgName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orgName", ArgumentValue = orgName });

            return WithObjectField("isOrgNameAvailable", alias, orgIsOrgNameAvailableResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIsOrgNameAvailable()
        {
            return ExceptField("isOrgNameAvailable");
        }

        public QueryQueryBuilder WithIsPatNameAvailable(PersonalAccessTokenIsPatNameAvailableResponseQueryBuilder personalAccessTokenIsPatNameAvailableResponseQueryBuilder, QueryBuilderParameter<string> name = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (name != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name });

            return WithObjectField("isPatNameAvailable", alias, personalAccessTokenIsPatNameAvailableResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIsPatNameAvailable()
        {
            return ExceptField("isPatNameAvailable");
        }

        public QueryQueryBuilder WithLeases(LeaseQueryBuilder leaseQueryBuilder, QueryBuilderParameter<LeaseFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("leases", alias, leaseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLeases()
        {
            return ExceptField("leases");
        }

        public QueryQueryBuilder WithLiveQueries(LiveQueryQueryBuilder liveQueryQueryBuilder, QueryBuilderParameter<LiveQueryFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("liveQueries", alias, liveQueryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLiveQueries()
        {
            return ExceptField("liveQueries");
        }

        public QueryQueryBuilder WithMe(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("me", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptMe()
        {
            return ExceptField("me");
        }

        public QueryQueryBuilder WithOrgRoleGroups(OrgRoleGroupDtoQueryBuilder orgRoleGroupDtoQueryBuilder, QueryBuilderParameter<OrgRoleGroupFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("orgRoleGroups", alias, orgRoleGroupDtoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOrgRoleGroups()
        {
            return ExceptField("orgRoleGroups");
        }

        public QueryQueryBuilder WithOrgServiceAccounts(OrgServiceAccountContainerQueryBuilder orgServiceAccountContainerQueryBuilder, QueryBuilderParameter<OrgServiceAccountFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("orgServiceAccounts", alias, orgServiceAccountContainerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOrgServiceAccounts()
        {
            return ExceptField("orgServiceAccounts");
        }

        public QueryQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public QueryQueryBuilder WithPeople(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("people", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPeople()
        {
            return ExceptField("people");
        }

        public QueryQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public QueryQueryBuilder WithProductBundleSubscriptions(BillingProductBundleSubscriptionResponseQueryBuilder billingProductBundleSubscriptionResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundleSubscriptions", alias, billingProductBundleSubscriptionResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptProductBundleSubscriptions()
        {
            return ExceptField("productBundleSubscriptions");
        }

        public QueryQueryBuilder WithRoleManagers(RoleManagerRoleDtoQueryBuilder roleManagerRoleDtoQueryBuilder, QueryBuilderParameter<RoleManagerFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("roleManagers", alias, roleManagerRoleDtoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptRoleManagers()
        {
            return ExceptField("roleManagers");
        }

        public QueryQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public QueryQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public QueryQueryBuilder WithSuggestEquivalentSpaces(SpaceMappingSuggestedEquivalentSpacesQueryBuilder spaceMappingSuggestedEquivalentSpacesQueryBuilder, QueryBuilderParameter<SpaceMappingSuggestEquivalentSpacesRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("suggestEquivalentSpaces", alias, spaceMappingSuggestedEquivalentSpacesQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSuggestEquivalentSpaces()
        {
            return ExceptField("suggestEquivalentSpaces");
        }

        public QueryQueryBuilder WithSuggestFloorLevels(SpaceMappingFloorLevelSuggestionQueryBuilder spaceMappingFloorLevelSuggestionQueryBuilder, QueryBuilderParameter<SpaceMappingSuggestFloorLevelsRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("suggestFloorLevels", alias, spaceMappingFloorLevelSuggestionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSuggestFloorLevels()
        {
            return ExceptField("suggestFloorLevels");
        }

        public QueryQueryBuilder WithSuggestSpaceCodes(SpaceMappingSpaceCodeSuggestionQueryBuilder spaceMappingSpaceCodeSuggestionQueryBuilder, QueryBuilderParameter<SpaceMappingSuggestSpaceCodesRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("suggestSpaceCodes", alias, spaceMappingSpaceCodeSuggestionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSuggestSpaceCodes()
        {
            return ExceptField("suggestSpaceCodes");
        }

        public QueryQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public QueryQueryBuilder WithTokens(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, QueryBuilderParameter<PersonalAccessTokenFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("tokens", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTokens()
        {
            return ExceptField("tokens");
        }

        public QueryQueryBuilder WithUnits(UnitQueryBuilder unitQueryBuilder, QueryBuilderParameter<UnitFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("units", alias, unitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUnits()
        {
            return ExceptField("units");
        }

        public QueryQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<UserFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public QueryQueryBuilder WithWebhookTargets(WebhookTargetQueryBuilder webhookTargetQueryBuilder, QueryBuilderParameter<WebhookTargetFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("webhookTargets", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptWebhookTargets()
        {
            return ExceptField("webhookTargets");
        }

        public QueryQueryBuilder WithWorkOrders(WorkOrderQueryBuilder workOrderQueryBuilder, QueryBuilderParameter<WorkOrderFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("workOrders", alias, workOrderQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptWorkOrders()
        {
            return ExceptField("workOrders");
        }

        public QueryQueryBuilder WithZones(ZoneQueryBuilder zoneQueryBuilder, QueryBuilderParameter<ZoneFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("zones", alias, zoneQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptZones()
        {
            return ExceptField("zones");
        }
    }

    public class RegexMatchQueryBuilder : GraphQlQueryBuilder<RegexMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "regex" }
            };

        protected override string TypeName { get { return "RegexMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RegexMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RegexMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public RegexMatchQueryBuilder WithRegex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regex", alias, new GraphQlDirective[] { include, skip });
        }

        public RegexMatchQueryBuilder ExceptRegex()
        {
            return ExceptField("regex");
        }
    }

    public class RelatesToEdgeQueryBuilder : GraphQlQueryBuilder<RelatesToEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "RelatesToEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RelatesToEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatesToEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public RelatesToEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class RelatesToUnionQueryBuilder : GraphQlQueryBuilder<RelatesToUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public RelatesToUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "RelatesToUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RelatesToUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatesToUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class RoleManagerRoleDtoQueryBuilder : GraphQlQueryBuilder<RoleManagerRoleDtoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isSynced" },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataRecordQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "permissions", IsComplex = true },
                new GraphQlFieldMetadata { Name = "roleType" },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "RoleManagerRoleDTO"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RoleManagerRoleDtoQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public RoleManagerRoleDtoQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public RoleManagerRoleDtoQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RoleManagerRoleDtoQueryBuilder WithIsSynced(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSynced", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptIsSynced()
        {
            return ExceptField("isSynced");
        }

        public RoleManagerRoleDtoQueryBuilder WithMetadata(MetadataRecordQueryBuilder metadataRecordQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataRecordQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public RoleManagerRoleDtoQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RoleManagerRoleDtoQueryBuilder WithPermissions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("permissions", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public RoleManagerRoleDtoQueryBuilder WithRoleType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleType", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptRoleType()
        {
            return ExceptField("roleType");
        }

        public RoleManagerRoleDtoQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public RoleManagerRoleDtoQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleManagerRoleDtoQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class ServesEdgeQueryBuilder : GraphQlQueryBuilder<ServesEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GraphNodeQueryBuilder) }
            };

        protected override string TypeName { get { return "ServesEdge"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ServesEdgeQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ServesEdgeQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public ServesEdgeQueryBuilder WithNode(GraphNodeQueryBuilder graphNodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, graphNodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ServesUnionQueryBuilder : GraphQlQueryBuilder<ServesUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public ServesUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "ServesUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ServesUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithOrganizationFragment(OrganizationQueryBuilder organizationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(organizationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServesUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SignatureMatchQueryBuilder : GraphQlQueryBuilder<SignatureMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "asymmetricKey", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "symmetricKey" },
                new GraphQlFieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "SignatureMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SignatureMatchQueryBuilder WithAsymmetricKey(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("asymmetricKey", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptAsymmetricKey()
        {
            return ExceptField("asymmetricKey");
        }

        public SignatureMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public SignatureMatchQueryBuilder WithSymmetricKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("symmetricKey", alias, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptSymmetricKey()
        {
            return ExceptField("symmetricKey");
        }

        public SignatureMatchQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SiteQueryBuilder : GraphQlQueryBuilder<SiteQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(SiteIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Site"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteQueryBuilder WithBuildings(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("buildings", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public SiteQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public SiteQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public SiteQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public SiteQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public SiteQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public SiteQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public SiteQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SiteQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SiteQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public SiteQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public SiteQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public SiteQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public SiteQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SiteQueryBuilder WithIdentities(SiteIdentityUnionQueryBuilder siteIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, siteIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public SiteQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public SiteQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public SiteQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public SiteQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public SiteQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public SiteQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public SiteQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public SiteQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public SiteQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public SiteQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public SiteQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public SiteQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SiteQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public SiteQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public SiteQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public SiteQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SiteCreateResponseQueryBuilder : GraphQlQueryBuilder<SiteCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "site", IsComplex = true, QueryBuilderType = typeof(SiteMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteCreateResponseQueryBuilder WithSite(SiteMutationQueryBuilder siteMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("site", alias, siteMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteCreateResponseQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class SiteDeleteResponseQueryBuilder : GraphQlQueryBuilder<SiteDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "SiteDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class SiteIdentityUnionQueryBuilder : GraphQlQueryBuilder<SiteIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public SiteIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "SiteIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SiteMutationQueryBuilder : GraphQlQueryBuilder<SiteMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "SiteMutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SiteMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class SiteUpdateResponseQueryBuilder : GraphQlQueryBuilder<SiteUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "site", IsComplex = true, QueryBuilderType = typeof(SiteMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteUpdateResponseQueryBuilder WithSite(SiteMutationQueryBuilder siteMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("site", alias, siteMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteUpdateResponseQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class SpaceQueryBuilder : GraphQlQueryBuilder<SpaceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(SpaceIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "maxOccupancy" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "parentSpaceId" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Space"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public SpaceQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public SpaceQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public SpaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public SpaceQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public SpaceQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public SpaceQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SpaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SpaceQueryBuilder WithFloor(FloorQueryBuilder floorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("floor", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }

        public SpaceQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SpaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public SpaceQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public SpaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public SpaceQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public SpaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceQueryBuilder WithIdentities(SpaceIdentityUnionQueryBuilder spaceIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, spaceIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public SpaceQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public SpaceQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public SpaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public SpaceQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public SpaceQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public SpaceQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public SpaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public SpaceQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public SpaceQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public SpaceQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public SpaceQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public SpaceQueryBuilder WithMaxOccupancy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxOccupancy", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptMaxOccupancy()
        {
            return ExceptField("maxOccupancy");
        }

        public SpaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SpaceQueryBuilder WithParentSpaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentSpaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptParentSpaceId()
        {
            return ExceptField("parentSpaceId");
        }

        public SpaceQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public SpaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public SpaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SpaceCodeQueryBuilder : GraphQlQueryBuilder<SpaceCodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "SpaceCode"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceCodeQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public SpaceCodeQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public SpaceCodeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceCodeQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public SpaceCodeQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public SpaceCodeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class SpaceCodeModelQueryBuilder : GraphQlQueryBuilder<SpaceCodeModelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "scope" },
                new GraphQlFieldMetadata { Name = "scopeId" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public SpaceCodeModelQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "SpaceCodeModel"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceCodeModelQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public SpaceCodeModelQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public SpaceCodeModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceCodeModelQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public SpaceCodeModelQueryBuilder WithScopeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scopeId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptScopeId()
        {
            return ExceptField("scopeId");
        }

        public SpaceCodeModelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceCodeModelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public SpaceCodeModelQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SpaceCreateResponseQueryBuilder : GraphQlQueryBuilder<SpaceCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "space", IsComplex = true, QueryBuilderType = typeof(SpaceMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceCreateResponseQueryBuilder WithSpace(SpaceMutationQueryBuilder spaceMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("space", alias, spaceMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceCreateResponseQueryBuilder ExceptSpace()
        {
            return ExceptField("space");
        }
    }

    public class SpaceDeleteResponseQueryBuilder : GraphQlQueryBuilder<SpaceDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "SpaceDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class SpaceIdentityUnionQueryBuilder : GraphQlQueryBuilder<SpaceIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public SpaceIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "SpaceIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SpaceMappingEquivalentSpaceSuggestionQueryBuilder : GraphQlQueryBuilder<SpaceMappingEquivalentSpaceSuggestionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "confidence" },
                new GraphQlFieldMetadata { Name = "space", IsComplex = true, QueryBuilderType = typeof(SpaceMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceMappingEquivalentSpaceSuggestion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMappingEquivalentSpaceSuggestionQueryBuilder WithConfidence(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("confidence", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingEquivalentSpaceSuggestionQueryBuilder ExceptConfidence()
        {
            return ExceptField("confidence");
        }

        public SpaceMappingEquivalentSpaceSuggestionQueryBuilder WithSpace(SpaceMutationQueryBuilder spaceMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("space", alias, spaceMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingEquivalentSpaceSuggestionQueryBuilder ExceptSpace()
        {
            return ExceptField("space");
        }
    }

    public class SpaceMappingFloorLevelSuggestionQueryBuilder : GraphQlQueryBuilder<SpaceMappingFloorLevelSuggestionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "confidence" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "SpaceMappingFloorLevelSuggestion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMappingFloorLevelSuggestionQueryBuilder WithConfidence(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("confidence", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingFloorLevelSuggestionQueryBuilder ExceptConfidence()
        {
            return ExceptField("confidence");
        }

        public SpaceMappingFloorLevelSuggestionQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingFloorLevelSuggestionQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public class SpaceMappingSpaceCodeSuggestionQueryBuilder : GraphQlQueryBuilder<SpaceMappingSpaceCodeSuggestionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "confidence" },
                new GraphQlFieldMetadata { Name = "spaceCode" }
            };

        protected override string TypeName { get { return "SpaceMappingSpaceCodeSuggestion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMappingSpaceCodeSuggestionQueryBuilder WithConfidence(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("confidence", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingSpaceCodeSuggestionQueryBuilder ExceptConfidence()
        {
            return ExceptField("confidence");
        }

        public SpaceMappingSpaceCodeSuggestionQueryBuilder WithSpaceCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("spaceCode", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingSpaceCodeSuggestionQueryBuilder ExceptSpaceCode()
        {
            return ExceptField("spaceCode");
        }
    }

    public class SpaceMappingSuggestedEquivalentSpacesQueryBuilder : GraphQlQueryBuilder<SpaceMappingSuggestedEquivalentSpacesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceMappingEquivalentSpaceSuggestionQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceMappingSuggestedEquivalentSpaces"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMappingSuggestedEquivalentSpacesQueryBuilder WithSpaces(SpaceMappingEquivalentSpaceSuggestionQueryBuilder spaceMappingEquivalentSpaceSuggestionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("spaces", alias, spaceMappingEquivalentSpaceSuggestionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceMappingSuggestedEquivalentSpacesQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }
    }

    public class SpaceMutationQueryBuilder : GraphQlQueryBuilder<SpaceMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "exactType", IsComplex = true },
                new GraphQlFieldMetadata { Name = "floorId" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "parentSpaceId" }
            };

        protected override string TypeName { get { return "SpaceMutation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMutationQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SpaceMutationQueryBuilder WithFloorId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("floorId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptFloorId()
        {
            return ExceptField("floorId");
        }

        public SpaceMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SpaceMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SpaceMutationQueryBuilder WithParentSpaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentSpaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptParentSpaceId()
        {
            return ExceptField("parentSpaceId");
        }
    }

    public class SpaceUpdateResponseQueryBuilder : GraphQlQueryBuilder<SpaceUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "space", IsComplex = true, QueryBuilderType = typeof(SpaceMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceUpdateResponseQueryBuilder WithSpace(SpaceMutationQueryBuilder spaceMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("space", alias, spaceMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceUpdateResponseQueryBuilder ExceptSpace()
        {
            return ExceptField("space");
        }
    }

    public class SubBuildingQueryBuilder : GraphQlQueryBuilder<SubBuildingQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(SubBuildingIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "SubBuilding"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SubBuildingQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public SubBuildingQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public SubBuildingQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public SubBuildingQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public SubBuildingQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public SubBuildingQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public SubBuildingQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SubBuildingQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SubBuildingQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public SubBuildingQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public SubBuildingQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public SubBuildingQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public SubBuildingQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SubBuildingQueryBuilder WithIdentities(SubBuildingIdentityUnionQueryBuilder subBuildingIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, subBuildingIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public SubBuildingQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public SubBuildingQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public SubBuildingQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public SubBuildingQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public SubBuildingQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public SubBuildingQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public SubBuildingQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public SubBuildingQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public SubBuildingQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public SubBuildingQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public SubBuildingQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public SubBuildingQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SubBuildingQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public SubBuildingQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SubBuildingQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public SubBuildingQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SubBuildingIdentityUnionQueryBuilder : GraphQlQueryBuilder<SubBuildingIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public SubBuildingIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "SubBuildingIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SubBuildingIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubBuildingIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ThingQueryBuilder : GraphQlQueryBuilder<ThingQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "assetTrackingID" },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateInstalled", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "feeds", IsComplex = true, QueryBuilderType = typeof(FeedsUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feedsEdges", IsComplex = true, QueryBuilderType = typeof(FeedsEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "firmwareVersion" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasDeviceModel", IsComplex = true, QueryBuilderType = typeof(DeviceModelQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasDeviceModelEdges", IsComplex = true, QueryBuilderType = typeof(HasDeviceModelEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasLocation", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasLocationEdges", IsComplex = true, QueryBuilderType = typeof(HasLocationEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(ThingIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(IsFedByUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isResponsibilityOf", IsComplex = true, QueryBuilderType = typeof(PeopleGroupQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isResponsibilityOfEdges", IsComplex = true, QueryBuilderType = typeof(IsResponsibilityOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isVirtual" },
                new GraphQlFieldMetadata { Name = "manufacturedBy", IsComplex = true, QueryBuilderType = typeof(AgentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manufacturedByEdges", IsComplex = true, QueryBuilderType = typeof(ManufacturedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "places", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seeAlso" },
                new GraphQlFieldMetadata { Name = "serialNumber" },
                new GraphQlFieldMetadata { Name = "serves", IsComplex = true, QueryBuilderType = typeof(ServesUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "servesEdges", IsComplex = true, QueryBuilderType = typeof(ServesEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Thing"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingQueryBuilder WithAssetTrackingId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assetTrackingID", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptAssetTrackingId()
        {
            return ExceptField("assetTrackingID");
        }

        public ThingQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public ThingQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public ThingQueryBuilder WithDateInstalled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateInstalled", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptDateInstalled()
        {
            return ExceptField("dateInstalled");
        }

        public ThingQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public ThingQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ThingQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public ThingQueryBuilder WithFeeds(FeedsUnionQueryBuilder feedsUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("feeds", alias, feedsUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptFeeds()
        {
            return ExceptField("feeds");
        }

        public ThingQueryBuilder WithFeedsEdges(FeedsEdgeQueryBuilder feedsEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feedsEdges", alias, feedsEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptFeedsEdges()
        {
            return ExceptField("feedsEdges");
        }

        public ThingQueryBuilder WithFirmwareVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firmwareVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptFirmwareVersion()
        {
            return ExceptField("firmwareVersion");
        }

        public ThingQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public ThingQueryBuilder WithHasDeviceModel(DeviceModelQueryBuilder deviceModelQueryBuilder, QueryBuilderParameter<DeviceModelFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasDeviceModel", alias, deviceModelQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptHasDeviceModel()
        {
            return ExceptField("hasDeviceModel");
        }

        public ThingQueryBuilder WithHasDeviceModelEdges(HasDeviceModelEdgeQueryBuilder hasDeviceModelEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasDeviceModelEdges", alias, hasDeviceModelEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasDeviceModelEdges()
        {
            return ExceptField("hasDeviceModelEdges");
        }

        public ThingQueryBuilder WithHasLocation(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasLocation", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptHasLocation()
        {
            return ExceptField("hasLocation");
        }

        public ThingQueryBuilder WithHasLocationEdges(HasLocationEdgeQueryBuilder hasLocationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasLocationEdges", alias, hasLocationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasLocationEdges()
        {
            return ExceptField("hasLocationEdges");
        }

        public ThingQueryBuilder WithHasPart(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public ThingQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public ThingQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public ThingQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public ThingQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThingQueryBuilder WithIdentities(ThingIdentityUnionQueryBuilder thingIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, thingIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public ThingQueryBuilder WithIsFedBy(IsFedByUnionQueryBuilder isFedByUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, isFedByUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public ThingQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public ThingQueryBuilder WithIsPartOf(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public ThingQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public ThingQueryBuilder WithIsResponsibilityOf(PeopleGroupQueryBuilder peopleGroupQueryBuilder, QueryBuilderParameter<PeopleGroupFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isResponsibilityOf", alias, peopleGroupQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptIsResponsibilityOf()
        {
            return ExceptField("isResponsibilityOf");
        }

        public ThingQueryBuilder WithIsResponsibilityOfEdges(IsResponsibilityOfEdgeQueryBuilder isResponsibilityOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isResponsibilityOfEdges", alias, isResponsibilityOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsResponsibilityOfEdges()
        {
            return ExceptField("isResponsibilityOfEdges");
        }

        public ThingQueryBuilder WithIsVirtual(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVirtual", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsVirtual()
        {
            return ExceptField("isVirtual");
        }

        public ThingQueryBuilder WithManufacturedBy(AgentQueryBuilder agentQueryBuilder, QueryBuilderParameter<AgentFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("manufacturedBy", alias, agentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptManufacturedBy()
        {
            return ExceptField("manufacturedBy");
        }

        public ThingQueryBuilder WithManufacturedByEdges(ManufacturedByEdgeQueryBuilder manufacturedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manufacturedByEdges", alias, manufacturedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptManufacturedByEdges()
        {
            return ExceptField("manufacturedByEdges");
        }

        public ThingQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public ThingQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ThingQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public ThingQueryBuilder WithPlaces(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("places", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptPlaces()
        {
            return ExceptField("places");
        }

        public ThingQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public ThingQueryBuilder WithSeeAlso(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seeAlso", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptSeeAlso()
        {
            return ExceptField("seeAlso");
        }

        public ThingQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }

        public ThingQueryBuilder WithServes(ServesUnionQueryBuilder servesUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("serves", alias, servesUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptServes()
        {
            return ExceptField("serves");
        }

        public ThingQueryBuilder WithServesEdges(ServesEdgeQueryBuilder servesEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("servesEdges", alias, servesEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptServesEdges()
        {
            return ExceptField("servesEdges");
        }

        public ThingQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class ThingContainerQueryBuilder : GraphQlQueryBuilder<ThingContainerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) }
            };

        public ThingContainerQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "ThingContainer"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingContainerQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingContainerQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ThingContainerQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithSubBuildingFragment(SubBuildingQueryBuilder subBuildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(subBuildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ThingIdentityUnionQueryBuilder : GraphQlQueryBuilder<ThingIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public ThingIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "ThingIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class TierQueryBuilder : GraphQlQueryBuilder<TierQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "flatAmount", IsComplex = true },
                new GraphQlFieldMetadata { Name = "flatAmountDecimal" },
                new GraphQlFieldMetadata { Name = "unitAmount", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unitAmountDecimal" },
                new GraphQlFieldMetadata { Name = "upTo", IsComplex = true }
            };

        protected override string TypeName { get { return "Tier"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TierQueryBuilder WithFlatAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flatAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptFlatAmount()
        {
            return ExceptField("flatAmount");
        }

        public TierQueryBuilder WithFlatAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flatAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptFlatAmountDecimal()
        {
            return ExceptField("flatAmountDecimal");
        }

        public TierQueryBuilder WithUnitAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUnitAmount()
        {
            return ExceptField("unitAmount");
        }

        public TierQueryBuilder WithUnitAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUnitAmountDecimal()
        {
            return ExceptField("unitAmountDecimal");
        }

        public TierQueryBuilder WithUpTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("upTo", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUpTo()
        {
            return ExceptField("upTo");
        }
    }

    public class TimeseriesAggregateRowQueryBuilder : GraphQlQueryBuilder<TimeseriesAggregateRowQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "avg" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "max" },
                new GraphQlFieldMetadata { Name = "min" },
                new GraphQlFieldMetadata { Name = "sum" },
                new GraphQlFieldMetadata { Name = "timestamp" }
            };

        protected override string TypeName { get { return "TimeseriesAggregateRow"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesAggregateRowQueryBuilder WithAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avg", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptAvg()
        {
            return ExceptField("avg");
        }

        public TimeseriesAggregateRowQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public TimeseriesAggregateRowQueryBuilder WithMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("max", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptMax()
        {
            return ExceptField("max");
        }

        public TimeseriesAggregateRowQueryBuilder WithMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("min", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptMin()
        {
            return ExceptField("min");
        }

        public TimeseriesAggregateRowQueryBuilder WithSum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sum", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptSum()
        {
            return ExceptField("sum");
        }

        public TimeseriesAggregateRowQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }
    }

    public class TimeseriesRowQueryBuilder : GraphQlQueryBuilder<TimeseriesRowQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "ingestionTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "timestamp" },
                new GraphQlFieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(TimeseriesRowValueQueryBuilder) }
            };

        protected override string TypeName { get { return "TimeseriesRow"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesRowQueryBuilder WithIngestionTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ingestionTime", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowQueryBuilder ExceptIngestionTime()
        {
            return ExceptField("ingestionTime");
        }

        public TimeseriesRowQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }

        public TimeseriesRowQueryBuilder WithValue(TimeseriesRowValueQueryBuilder timeseriesRowValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, timeseriesRowValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class TimeseriesRowValueQueryBuilder : GraphQlQueryBuilder<TimeseriesRowValueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "boolValue" },
                new GraphQlFieldMetadata { Name = "byteArrayValue" },
                new GraphQlFieldMetadata { Name = "float32Value" },
                new GraphQlFieldMetadata { Name = "float64Value" },
                new GraphQlFieldMetadata { Name = "geopointValue", IsComplex = true, QueryBuilderType = typeof(GeoPointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "int32Value" },
                new GraphQlFieldMetadata { Name = "int64Value", IsComplex = true },
                new GraphQlFieldMetadata { Name = "json", IsComplex = true },
                new GraphQlFieldMetadata { Name = "numericalException" },
                new GraphQlFieldMetadata { Name = "stringValue" },
                new GraphQlFieldMetadata { Name = "uint32Value" },
                new GraphQlFieldMetadata { Name = "uint64Value", IsComplex = true }
            };

        protected override string TypeName { get { return "TimeseriesRowValue"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesRowValueQueryBuilder WithBoolValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("boolValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptBoolValue()
        {
            return ExceptField("boolValue");
        }

        public TimeseriesRowValueQueryBuilder WithByteArrayValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byteArrayValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptByteArrayValue()
        {
            return ExceptField("byteArrayValue");
        }

        public TimeseriesRowValueQueryBuilder WithFloat32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("float32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptFloat32Value()
        {
            return ExceptField("float32Value");
        }

        public TimeseriesRowValueQueryBuilder WithFloat64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("float64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptFloat64Value()
        {
            return ExceptField("float64Value");
        }

        public TimeseriesRowValueQueryBuilder WithGeopointValue(GeoPointQueryBuilder geoPointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("geopointValue", alias, geoPointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptGeopointValue()
        {
            return ExceptField("geopointValue");
        }

        public TimeseriesRowValueQueryBuilder WithInt32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("int32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptInt32Value()
        {
            return ExceptField("int32Value");
        }

        public TimeseriesRowValueQueryBuilder WithInt64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("int64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptInt64Value()
        {
            return ExceptField("int64Value");
        }

        public TimeseriesRowValueQueryBuilder WithJson(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("json", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptJson()
        {
            return ExceptField("json");
        }

        public TimeseriesRowValueQueryBuilder WithNumericalException(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numericalException", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptNumericalException()
        {
            return ExceptField("numericalException");
        }

        public TimeseriesRowValueQueryBuilder WithStringValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stringValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptStringValue()
        {
            return ExceptField("stringValue");
        }

        public TimeseriesRowValueQueryBuilder WithUint32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uint32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptUint32Value()
        {
            return ExceptField("uint32Value");
        }

        public TimeseriesRowValueQueryBuilder WithUint64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uint64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptUint64Value()
        {
            return ExceptField("uint64Value");
        }
    }

    public class UnitQueryBuilder : GraphQlQueryBuilder<UnitQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Unit"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UnitQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public UnitQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UnitQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class UserQueryBuilder : GraphQlQueryBuilder<UserQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "emailVerified" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastLogin", IsComplex = true },
                new GraphQlFieldMetadata { Name = "loginsCount", IsComplex = true },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "orgRoles", IsComplex = true },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true },
                new GraphQlFieldMetadata { Name = "tokens", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true }
            };

        protected override string TypeName { get { return "User"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public UserQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public UserQueryBuilder WithEmailVerified(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailVerified", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptEmailVerified()
        {
            return ExceptField("emailVerified");
        }

        public UserQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UserQueryBuilder WithLastLogin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastLogin", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptLastLogin()
        {
            return ExceptField("lastLogin");
        }

        public UserQueryBuilder WithLoginsCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("loginsCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptLoginsCount()
        {
            return ExceptField("loginsCount");
        }

        public UserQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UserQueryBuilder WithOrgRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orgRoles", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptOrgRoles()
        {
            return ExceptField("orgRoles");
        }

        public UserQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public UserQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public UserQueryBuilder WithTokens(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, QueryBuilderParameter<PersonalAccessTokenFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("tokens", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryBuilder ExceptTokens()
        {
            return ExceptField("tokens");
        }

        public UserQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }
    }

    public class UserAssignRoleResponseQueryBuilder : GraphQlQueryBuilder<UserAssignRoleResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserAssignRoleResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserAssignRoleResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserAssignRoleResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserCreateResponseQueryBuilder : GraphQlQueryBuilder<UserCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserCreateResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserCreateResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserOrgDetailQueryBuilder : GraphQlQueryBuilder<UserOrgDetailQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "orgId" },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true }
            };

        protected override string TypeName { get { return "UserOrgDetail"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserOrgDetailQueryBuilder WithOrgId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orgId", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOrgDetailQueryBuilder ExceptOrgId()
        {
            return ExceptField("orgId");
        }

        public UserOrgDetailQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOrgDetailQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }
    }

    public class UserRemoveOrgMembershipResponseQueryBuilder : GraphQlQueryBuilder<UserRemoveOrgMembershipResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "UserRemoveOrgMembershipResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserRemoveOrgMembershipResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public UserRemoveOrgMembershipResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class UserRemoveRoleResponseQueryBuilder : GraphQlQueryBuilder<UserRemoveRoleResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserRemoveRoleResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserRemoveRoleResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserRemoveRoleResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserUpdateResponseQueryBuilder : GraphQlQueryBuilder<UserUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserUpdateResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserUpdateResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ValueLocationQueryBuilder : GraphQlQueryBuilder<ValueLocationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "encoding" },
                new GraphQlFieldMetadata { Name = "form", IsComplex = true, QueryBuilderType = typeof(BodyValueLocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "header" },
                new GraphQlFieldMetadata { Name = "json", IsComplex = true, QueryBuilderType = typeof(BodyValueLocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappedDefault" },
                new GraphQlFieldMetadata { Name = "queryParameter" }
            };

        protected override string TypeName { get { return "ValueLocation"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ValueLocationQueryBuilder WithEncoding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("encoding", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptEncoding()
        {
            return ExceptField("encoding");
        }

        public ValueLocationQueryBuilder WithForm(BodyValueLocationQueryBuilder bodyValueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("form", alias, bodyValueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptForm()
        {
            return ExceptField("form");
        }

        public ValueLocationQueryBuilder WithHeader(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("header", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptHeader()
        {
            return ExceptField("header");
        }

        public ValueLocationQueryBuilder WithJson(BodyValueLocationQueryBuilder bodyValueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("json", alias, bodyValueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptJson()
        {
            return ExceptField("json");
        }

        public ValueLocationQueryBuilder WithMappedDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedDefault", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptMappedDefault()
        {
            return ExceptField("mappedDefault");
        }

        public ValueLocationQueryBuilder WithQueryParameter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queryParameter", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptQueryParameter()
        {
            return ExceptField("queryParameter");
        }
    }

    public class ValueMatchQueryBuilder : GraphQlQueryBuilder<ValueMatchQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "ValueMatch"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ValueMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public ValueMatchQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueMatchQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class WebhookReceiverQueryBuilder : GraphQlQueryBuilder<WebhookReceiverQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "auth", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "baseUri" },
                new GraphQlFieldMetadata { Name = "corsOptions", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverCorsOptionsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "created", IsComplex = true },
                new GraphQlFieldMetadata { Name = "destination", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverDestinationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "incomingPayloadContentType" },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataRecordQueryBuilder) },
                new GraphQlFieldMetadata { Name = "methods", IsComplex = true },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "ownerId" },
                new GraphQlFieldMetadata { Name = "responseHeaders", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverResponseHeadersEntryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "responseMessage" },
                new GraphQlFieldMetadata { Name = "responseReflectedQueryParameter" },
                new GraphQlFieldMetadata { Name = "runId" },
                new GraphQlFieldMetadata { Name = "signalName" },
                new GraphQlFieldMetadata { Name = "sourceId" },
                new GraphQlFieldMetadata { Name = "successHttpResponseCode" },
                new GraphQlFieldMetadata { Name = "updated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "workflowId" }
            };

        protected override string TypeName { get { return "WebhookReceiver"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverQueryBuilder WithAuth(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("auth", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptAuth()
        {
            return ExceptField("auth");
        }

        public WebhookReceiverQueryBuilder WithBaseUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptBaseUri()
        {
            return ExceptField("baseUri");
        }

        public WebhookReceiverQueryBuilder WithCorsOptions(WebhookReceiverCorsOptionsQueryBuilder webhookReceiverCorsOptionsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("corsOptions", alias, webhookReceiverCorsOptionsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptCorsOptions()
        {
            return ExceptField("corsOptions");
        }

        public WebhookReceiverQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public WebhookReceiverQueryBuilder WithDestination(WebhookReceiverDestinationQueryBuilder webhookReceiverDestinationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("destination", alias, webhookReceiverDestinationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptDestination()
        {
            return ExceptField("destination");
        }

        public WebhookReceiverQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public WebhookReceiverQueryBuilder WithIncomingPayloadContentType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("incomingPayloadContentType", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptIncomingPayloadContentType()
        {
            return ExceptField("incomingPayloadContentType");
        }

        public WebhookReceiverQueryBuilder WithMetadata(MetadataRecordQueryBuilder metadataRecordQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataRecordQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public WebhookReceiverQueryBuilder WithMethods(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("methods", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptMethods()
        {
            return ExceptField("methods");
        }

        public WebhookReceiverQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WebhookReceiverQueryBuilder WithOwnerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ownerId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptOwnerId()
        {
            return ExceptField("ownerId");
        }

        public WebhookReceiverQueryBuilder WithResponseHeaders(WebhookReceiverResponseHeadersEntryQueryBuilder webhookReceiverResponseHeadersEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("responseHeaders", alias, webhookReceiverResponseHeadersEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptResponseHeaders()
        {
            return ExceptField("responseHeaders");
        }

        public WebhookReceiverQueryBuilder WithResponseMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("responseMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptResponseMessage()
        {
            return ExceptField("responseMessage");
        }

        public WebhookReceiverQueryBuilder WithResponseReflectedQueryParameter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("responseReflectedQueryParameter", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptResponseReflectedQueryParameter()
        {
            return ExceptField("responseReflectedQueryParameter");
        }

        public WebhookReceiverQueryBuilder WithRunId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptRunId()
        {
            return ExceptField("runId");
        }

        public WebhookReceiverQueryBuilder WithSignalName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signalName", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptSignalName()
        {
            return ExceptField("signalName");
        }

        public WebhookReceiverQueryBuilder WithSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptSourceId()
        {
            return ExceptField("sourceId");
        }

        public WebhookReceiverQueryBuilder WithSuccessHttpResponseCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("successHttpResponseCode", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptSuccessHttpResponseCode()
        {
            return ExceptField("successHttpResponseCode");
        }

        public WebhookReceiverQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public WebhookReceiverQueryBuilder WithWorkflowId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workflowId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverQueryBuilder ExceptWorkflowId()
        {
            return ExceptField("workflowId");
        }
    }

    public class WebhookReceiverCorsOptionsQueryBuilder : GraphQlQueryBuilder<WebhookReceiverCorsOptionsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "allowCredentials" },
                new GraphQlFieldMetadata { Name = "allowedHeaders", IsComplex = true },
                new GraphQlFieldMetadata { Name = "allowedMethods", IsComplex = true },
                new GraphQlFieldMetadata { Name = "allowedOrigins", IsComplex = true },
                new GraphQlFieldMetadata { Name = "exposedHeaders", IsComplex = true },
                new GraphQlFieldMetadata { Name = "maxAge" }
            };

        protected override string TypeName { get { return "WebhookReceiverCORSOptions"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverCorsOptionsQueryBuilder WithAllowCredentials(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowCredentials", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptAllowCredentials()
        {
            return ExceptField("allowCredentials");
        }

        public WebhookReceiverCorsOptionsQueryBuilder WithAllowedHeaders(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowedHeaders", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptAllowedHeaders()
        {
            return ExceptField("allowedHeaders");
        }

        public WebhookReceiverCorsOptionsQueryBuilder WithAllowedMethods(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowedMethods", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptAllowedMethods()
        {
            return ExceptField("allowedMethods");
        }

        public WebhookReceiverCorsOptionsQueryBuilder WithAllowedOrigins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowedOrigins", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptAllowedOrigins()
        {
            return ExceptField("allowedOrigins");
        }

        public WebhookReceiverCorsOptionsQueryBuilder WithExposedHeaders(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exposedHeaders", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptExposedHeaders()
        {
            return ExceptField("exposedHeaders");
        }

        public WebhookReceiverCorsOptionsQueryBuilder WithMaxAge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxAge", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCorsOptionsQueryBuilder ExceptMaxAge()
        {
            return ExceptField("maxAge");
        }
    }

    public class WebhookReceiverCentrifugoDestinationQueryBuilder : GraphQlQueryBuilder<WebhookReceiverCentrifugoDestinationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "channel" }
            };

        protected override string TypeName { get { return "WebhookReceiverCentrifugoDestination"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverCentrifugoDestinationQueryBuilder WithChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channel", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverCentrifugoDestinationQueryBuilder ExceptChannel()
        {
            return ExceptField("channel");
        }
    }

    public class WebhookReceiverDeleteResponseQueryBuilder : GraphQlQueryBuilder<WebhookReceiverDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "WebhookReceiverDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class WebhookReceiverDestinationQueryBuilder : GraphQlQueryBuilder<WebhookReceiverDestinationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "centrifugoDestination", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverCentrifugoDestinationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "executeWorkflowDestination", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "kafkaDestination", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverKafkaDestinationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "signalWorkflowDestination", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookReceiverDestination"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverDestinationQueryBuilder WithCentrifugoDestination(WebhookReceiverCentrifugoDestinationQueryBuilder webhookReceiverCentrifugoDestinationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("centrifugoDestination", alias, webhookReceiverCentrifugoDestinationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverDestinationQueryBuilder ExceptCentrifugoDestination()
        {
            return ExceptField("centrifugoDestination");
        }

        public WebhookReceiverDestinationQueryBuilder WithExecuteWorkflowDestination(WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder webhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("executeWorkflowDestination", alias, webhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverDestinationQueryBuilder ExceptExecuteWorkflowDestination()
        {
            return ExceptField("executeWorkflowDestination");
        }

        public WebhookReceiverDestinationQueryBuilder WithKafkaDestination(WebhookReceiverKafkaDestinationQueryBuilder webhookReceiverKafkaDestinationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("kafkaDestination", alias, webhookReceiverKafkaDestinationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverDestinationQueryBuilder ExceptKafkaDestination()
        {
            return ExceptField("kafkaDestination");
        }

        public WebhookReceiverDestinationQueryBuilder WithSignalWorkflowDestination(WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder webhookReceiverTemporalSignalWorkfowDestinationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signalWorkflowDestination", alias, webhookReceiverTemporalSignalWorkfowDestinationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverDestinationQueryBuilder ExceptSignalWorkflowDestination()
        {
            return ExceptField("signalWorkflowDestination");
        }
    }

    public class WebhookReceiverKafkaDestinationQueryBuilder : GraphQlQueryBuilder<WebhookReceiverKafkaDestinationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "topic" }
            };

        protected override string TypeName { get { return "WebhookReceiverKafkaDestination"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverKafkaDestinationQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverKafkaDestinationQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public WebhookReceiverKafkaDestinationQueryBuilder WithTopic(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topic", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverKafkaDestinationQueryBuilder ExceptTopic()
        {
            return ExceptField("topic");
        }
    }

    public class WebhookReceiverResponseHeadersEntryQueryBuilder : GraphQlQueryBuilder<WebhookReceiverResponseHeadersEntryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "WebhookReceiverResponseHeadersEntry"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverResponseHeadersEntryQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverResponseHeadersEntryQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public WebhookReceiverResponseHeadersEntryQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverResponseHeadersEntryQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder : GraphQlQueryBuilder<WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "taskQueue" },
                new GraphQlFieldMetadata { Name = "workflowId" }
            };

        protected override string TypeName { get { return "WebhookReceiverTemporalExecuteWorkflowDestination"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder WithTaskQueue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taskQueue", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder ExceptTaskQueue()
        {
            return ExceptField("taskQueue");
        }

        public WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder WithWorkflowId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workflowId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverTemporalExecuteWorkflowDestinationQueryBuilder ExceptWorkflowId()
        {
            return ExceptField("workflowId");
        }
    }

    public class WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder : GraphQlQueryBuilder<WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "runId" },
                new GraphQlFieldMetadata { Name = "signalName" },
                new GraphQlFieldMetadata { Name = "workflowId" }
            };

        protected override string TypeName { get { return "WebhookReceiverTemporalSignalWorkfowDestination"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder WithRunId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder ExceptRunId()
        {
            return ExceptField("runId");
        }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder WithSignalName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signalName", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder ExceptSignalName()
        {
            return ExceptField("signalName");
        }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder WithWorkflowId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workflowId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverTemporalSignalWorkfowDestinationQueryBuilder ExceptWorkflowId()
        {
            return ExceptField("workflowId");
        }
    }

    public class WebhookReceiverUpsertResponseQueryBuilder : GraphQlQueryBuilder<WebhookReceiverUpsertResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "receiver", IsComplex = true, QueryBuilderType = typeof(WebhookReceiverQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookReceiverUpsertResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookReceiverUpsertResponseQueryBuilder WithReceiver(WebhookReceiverQueryBuilder webhookReceiverQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("receiver", alias, webhookReceiverQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookReceiverUpsertResponseQueryBuilder ExceptReceiver()
        {
            return ExceptField("receiver");
        }
    }

    public class WebhookTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "batchedContentModeConfig", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contentMode" },
                new GraphQlFieldMetadata { Name = "enabled" },
                new GraphQlFieldMetadata { Name = "eventExtensions", IsComplex = true },
                new GraphQlFieldMetadata { Name = "eventFilters", IsComplex = true, QueryBuilderType = typeof(WebhookTargetEventFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "httpTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetHttpTargetQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "maxRetry", IsComplex = true },
                new GraphQlFieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(WebhookTargetMetadataEntryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTarget"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetQueryBuilder WithBatchedContentModeConfig(WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder webhookTargetCloudEventBatchedContentModeConfigQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("batchedContentModeConfig", alias, webhookTargetCloudEventBatchedContentModeConfigQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptBatchedContentModeConfig()
        {
            return ExceptField("batchedContentModeConfig");
        }

        public WebhookTargetQueryBuilder WithContentMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contentMode", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptContentMode()
        {
            return ExceptField("contentMode");
        }

        public WebhookTargetQueryBuilder WithEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("enabled", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptEnabled()
        {
            return ExceptField("enabled");
        }

        public WebhookTargetQueryBuilder WithEventExtensions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eventExtensions", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptEventExtensions()
        {
            return ExceptField("eventExtensions");
        }

        public WebhookTargetQueryBuilder WithEventFilters(WebhookTargetEventFilterQueryBuilder webhookTargetEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("eventFilters", alias, webhookTargetEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptEventFilters()
        {
            return ExceptField("eventFilters");
        }

        public WebhookTargetQueryBuilder WithHttpTarget(WebhookTargetHttpTargetQueryBuilder webhookTargetHttpTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("httpTarget", alias, webhookTargetHttpTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptHttpTarget()
        {
            return ExceptField("httpTarget");
        }

        public WebhookTargetQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public WebhookTargetQueryBuilder WithMaxRetry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxRetry", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptMaxRetry()
        {
            return ExceptField("maxRetry");
        }

        public WebhookTargetQueryBuilder WithMetadata(WebhookTargetMetadataEntryQueryBuilder webhookTargetMetadataEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, webhookTargetMetadataEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public WebhookTargetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WebhookTargetQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public WebhookTargetQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class WebhookTargetAuthQueryBuilder : GraphQlQueryBuilder<WebhookTargetAuthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "apiKey", IsComplex = true, QueryBuilderType = typeof(ApiKeyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "basicAuth", IsComplex = true, QueryBuilderType = typeof(BasicAuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "noAuth" },
                new GraphQlFieldMetadata { Name = "oauth2ClientCredentialsFlow", IsComplex = true, QueryBuilderType = typeof(OAuth2ClientCredentialsFlowQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetAuth"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetAuthQueryBuilder WithApiKey(ApiKeyQueryBuilder apiKeyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("apiKey", alias, apiKeyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetAuthQueryBuilder ExceptApiKey()
        {
            return ExceptField("apiKey");
        }

        public WebhookTargetAuthQueryBuilder WithBasicAuth(BasicAuthQueryBuilder basicAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("basicAuth", alias, basicAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetAuthQueryBuilder ExceptBasicAuth()
        {
            return ExceptField("basicAuth");
        }

        public WebhookTargetAuthQueryBuilder WithNoAuth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("noAuth", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetAuthQueryBuilder ExceptNoAuth()
        {
            return ExceptField("noAuth");
        }

        public WebhookTargetAuthQueryBuilder WithOauth2ClientCredentialsFlow(OAuth2ClientCredentialsFlowQueryBuilder oAuth2ClientCredentialsFlowQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("oauth2ClientCredentialsFlow", alias, oAuth2ClientCredentialsFlowQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetAuthQueryBuilder ExceptOauth2ClientCredentialsFlow()
        {
            return ExceptField("oauth2ClientCredentialsFlow");
        }
    }

    public class WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder : GraphQlQueryBuilder<WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "gracePeriod", IsComplex = true, QueryBuilderType = typeof(DurationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "maxDelay", IsComplex = true, QueryBuilderType = typeof(DurationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "maxSize", IsComplex = true }
            };

        protected override string TypeName { get { return "WebhookTargetCloudEventBatchedContentModeConfig"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder WithGracePeriod(DurationQueryBuilder durationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gracePeriod", alias, durationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder ExceptGracePeriod()
        {
            return ExceptField("gracePeriod");
        }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder WithMaxDelay(DurationQueryBuilder durationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("maxDelay", alias, durationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder ExceptMaxDelay()
        {
            return ExceptField("maxDelay");
        }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder WithMaxSize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxSize", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventBatchedContentModeConfigQueryBuilder ExceptMaxSize()
        {
            return ExceptField("maxSize");
        }
    }

    public class WebhookTargetCloudEventFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetCloudEventFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sources", IsComplex = true },
                new GraphQlFieldMetadata { Name = "types", IsComplex = true }
            };

        protected override string TypeName { get { return "WebhookTargetCloudEventFilter"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetCloudEventFilterQueryBuilder WithAnd(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithNot(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithOr(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithSources(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sources", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptSources()
        {
            return ExceptField("sources");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("types", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptTypes()
        {
            return ExceptField("types");
        }
    }

    public class WebhookTargetCreateResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetCreateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "target", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetCreateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetCreateResponseQueryBuilder WithTarget(WebhookTargetQueryBuilder webhookTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("target", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCreateResponseQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class WebhookTargetDeleteResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetDeleteResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "WebhookTargetDeleteResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class WebhookTargetEnableResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetEnableResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "currentEnabled" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "previousEnabled" }
            };

        protected override string TypeName { get { return "WebhookTargetEnableResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetEnableResponseQueryBuilder WithCurrentEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEnableResponseQueryBuilder ExceptCurrentEnabled()
        {
            return ExceptField("currentEnabled");
        }

        public WebhookTargetEnableResponseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEnableResponseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public WebhookTargetEnableResponseQueryBuilder WithPreviousEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("previousEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEnableResponseQueryBuilder ExceptPreviousEnabled()
        {
            return ExceptField("previousEnabled");
        }
    }

    public class WebhookTargetEventFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetEventFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "cloudEventFilter", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "jsonExpressionFilter", IsComplex = true, QueryBuilderType = typeof(WebhookTargetJsonExpressionFilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "timeseriesFilter", IsComplex = true, QueryBuilderType = typeof(WebhookTargetTimeseriesFilterQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetEventFilter"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetEventFilterQueryBuilder WithCloudEventFilter(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("cloudEventFilter", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEventFilterQueryBuilder ExceptCloudEventFilter()
        {
            return ExceptField("cloudEventFilter");
        }

        public WebhookTargetEventFilterQueryBuilder WithJsonExpressionFilter(WebhookTargetJsonExpressionFilterQueryBuilder webhookTargetJsonExpressionFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("jsonExpressionFilter", alias, webhookTargetJsonExpressionFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEventFilterQueryBuilder ExceptJsonExpressionFilter()
        {
            return ExceptField("jsonExpressionFilter");
        }

        public WebhookTargetEventFilterQueryBuilder WithTimeseriesFilter(WebhookTargetTimeseriesFilterQueryBuilder webhookTargetTimeseriesFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("timeseriesFilter", alias, webhookTargetTimeseriesFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetEventFilterQueryBuilder ExceptTimeseriesFilter()
        {
            return ExceptField("timeseriesFilter");
        }
    }

    public class WebhookTargetHttpTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetHttpTargetQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "auth", IsComplex = true, QueryBuilderType = typeof(WebhookTargetAuthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hmac256", IsComplex = true, QueryBuilderType = typeof(Hmac256QueryBuilder) },
                new GraphQlFieldMetadata { Name = "method" },
                new GraphQlFieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetHTTPTarget"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetHttpTargetQueryBuilder WithAuth(WebhookTargetAuthQueryBuilder webhookTargetAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("auth", alias, webhookTargetAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptAuth()
        {
            return ExceptField("auth");
        }

        public WebhookTargetHttpTargetQueryBuilder WithHmac256(Hmac256QueryBuilder hmac256QueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hmac256", alias, hmac256QueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptHmac256()
        {
            return ExceptField("hmac256");
        }

        public WebhookTargetHttpTargetQueryBuilder WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("method", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptMethod()
        {
            return ExceptField("method");
        }

        public WebhookTargetHttpTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class WebhookTargetJsonExpressionFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetJsonExpressionFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "jsonPathExpression" }
            };

        protected override string TypeName { get { return "WebhookTargetJsonExpressionFilter"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetJsonExpressionFilterQueryBuilder WithJsonPathExpression(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jsonPathExpression", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetJsonExpressionFilterQueryBuilder ExceptJsonPathExpression()
        {
            return ExceptField("jsonPathExpression");
        }
    }

    public class WebhookTargetMetadataEntryQueryBuilder : GraphQlQueryBuilder<WebhookTargetMetadataEntryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "WebhookTargetMetadataEntry"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetMetadataEntryQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetMetadataEntryQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public WebhookTargetMetadataEntryQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetMetadataEntryQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class WebhookTargetTimeseriesFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetTimeseriesFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "points", IsComplex = true }
            };

        protected override string TypeName { get { return "WebhookTargetTimeseriesFilter"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetTimeseriesFilterQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetTimeseriesFilterQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }
    }

    public class WebhookTargetUpdateResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetUpdateResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "target", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetUpdateResponse"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetUpdateResponseQueryBuilder WithTarget(WebhookTargetQueryBuilder webhookTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("target", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetUpdateResponseQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class WorkOrderQueryBuilder : GraphQlQueryBuilder<WorkOrderQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "dateClosed", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateCompleted", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "dueDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "externalDateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "externalDateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasAssignedGroup", IsComplex = true, QueryBuilderType = typeof(PeopleGroupQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasAssignedGroupEdges", IsComplex = true, QueryBuilderType = typeof(HasAssignedGroupEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasAssignee", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasAssigneeEdges", IsComplex = true, QueryBuilderType = typeof(HasAssigneeEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(WorkOrderIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isClosedBy", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isClosedByEdges", IsComplex = true, QueryBuilderType = typeof(IsClosedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isCreatedBy", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isCreatedByEdges", IsComplex = true, QueryBuilderType = typeof(IsCreatedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isReportedBy", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isReportedByEdges", IsComplex = true, QueryBuilderType = typeof(IsReportedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "jobPriority" },
                new GraphQlFieldMetadata { Name = "jobStatus" },
                new GraphQlFieldMetadata { Name = "jobSubStatus" },
                new GraphQlFieldMetadata { Name = "jobType" },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "problemDescription" },
                new GraphQlFieldMetadata { Name = "referenceUrl" },
                new GraphQlFieldMetadata { Name = "relatesTo", IsComplex = true, QueryBuilderType = typeof(RelatesToUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "relatesToEdges", IsComplex = true, QueryBuilderType = typeof(RelatesToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resolutionDescription" },
                new GraphQlFieldMetadata { Name = "sector" },
                new GraphQlFieldMetadata { Name = "subject" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "WorkOrder"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WorkOrderQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public WorkOrderQueryBuilder WithDateClosed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateClosed", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDateClosed()
        {
            return ExceptField("dateClosed");
        }

        public WorkOrderQueryBuilder WithDateCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDateCompleted()
        {
            return ExceptField("dateCompleted");
        }

        public WorkOrderQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public WorkOrderQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public WorkOrderQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public WorkOrderQueryBuilder WithDueDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dueDate", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptDueDate()
        {
            return ExceptField("dueDate");
        }

        public WorkOrderQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public WorkOrderQueryBuilder WithExternalDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("externalDateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptExternalDateCreated()
        {
            return ExceptField("externalDateCreated");
        }

        public WorkOrderQueryBuilder WithExternalDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("externalDateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptExternalDateUpdated()
        {
            return ExceptField("externalDateUpdated");
        }

        public WorkOrderQueryBuilder WithHasAssignedGroup(PeopleGroupQueryBuilder peopleGroupQueryBuilder, QueryBuilderParameter<PeopleGroupFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasAssignedGroup", alias, peopleGroupQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptHasAssignedGroup()
        {
            return ExceptField("hasAssignedGroup");
        }

        public WorkOrderQueryBuilder WithHasAssignedGroupEdges(HasAssignedGroupEdgeQueryBuilder hasAssignedGroupEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAssignedGroupEdges", alias, hasAssignedGroupEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptHasAssignedGroupEdges()
        {
            return ExceptField("hasAssignedGroupEdges");
        }

        public WorkOrderQueryBuilder WithHasAssignee(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasAssignee", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptHasAssignee()
        {
            return ExceptField("hasAssignee");
        }

        public WorkOrderQueryBuilder WithHasAssigneeEdges(HasAssigneeEdgeQueryBuilder hasAssigneeEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAssigneeEdges", alias, hasAssigneeEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptHasAssigneeEdges()
        {
            return ExceptField("hasAssigneeEdges");
        }

        public WorkOrderQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public WorkOrderQueryBuilder WithIdentities(WorkOrderIdentityUnionQueryBuilder workOrderIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, workOrderIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public WorkOrderQueryBuilder WithIsClosedBy(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isClosedBy", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptIsClosedBy()
        {
            return ExceptField("isClosedBy");
        }

        public WorkOrderQueryBuilder WithIsClosedByEdges(IsClosedByEdgeQueryBuilder isClosedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isClosedByEdges", alias, isClosedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptIsClosedByEdges()
        {
            return ExceptField("isClosedByEdges");
        }

        public WorkOrderQueryBuilder WithIsCreatedBy(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isCreatedBy", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptIsCreatedBy()
        {
            return ExceptField("isCreatedBy");
        }

        public WorkOrderQueryBuilder WithIsCreatedByEdges(IsCreatedByEdgeQueryBuilder isCreatedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isCreatedByEdges", alias, isCreatedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptIsCreatedByEdges()
        {
            return ExceptField("isCreatedByEdges");
        }

        public WorkOrderQueryBuilder WithIsReportedBy(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isReportedBy", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptIsReportedBy()
        {
            return ExceptField("isReportedBy");
        }

        public WorkOrderQueryBuilder WithIsReportedByEdges(IsReportedByEdgeQueryBuilder isReportedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isReportedByEdges", alias, isReportedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptIsReportedByEdges()
        {
            return ExceptField("isReportedByEdges");
        }

        public WorkOrderQueryBuilder WithJobPriority(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jobPriority", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptJobPriority()
        {
            return ExceptField("jobPriority");
        }

        public WorkOrderQueryBuilder WithJobStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jobStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptJobStatus()
        {
            return ExceptField("jobStatus");
        }

        public WorkOrderQueryBuilder WithJobSubStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jobSubStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptJobSubStatus()
        {
            return ExceptField("jobSubStatus");
        }

        public WorkOrderQueryBuilder WithJobType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jobType", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptJobType()
        {
            return ExceptField("jobType");
        }

        public WorkOrderQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public WorkOrderQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WorkOrderQueryBuilder WithProblemDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("problemDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptProblemDescription()
        {
            return ExceptField("problemDescription");
        }

        public WorkOrderQueryBuilder WithReferenceUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("referenceUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptReferenceUrl()
        {
            return ExceptField("referenceUrl");
        }

        public WorkOrderQueryBuilder WithRelatesTo(RelatesToUnionQueryBuilder relatesToUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("relatesTo", alias, relatesToUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public WorkOrderQueryBuilder ExceptRelatesTo()
        {
            return ExceptField("relatesTo");
        }

        public WorkOrderQueryBuilder WithRelatesToEdges(RelatesToEdgeQueryBuilder relatesToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("relatesToEdges", alias, relatesToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptRelatesToEdges()
        {
            return ExceptField("relatesToEdges");
        }

        public WorkOrderQueryBuilder WithResolutionDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("resolutionDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptResolutionDescription()
        {
            return ExceptField("resolutionDescription");
        }

        public WorkOrderQueryBuilder WithSector(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sector", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptSector()
        {
            return ExceptField("sector");
        }

        public WorkOrderQueryBuilder WithSubject(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subject", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptSubject()
        {
            return ExceptField("subject");
        }

        public WorkOrderQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public WorkOrderQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class WorkOrderIdentityUnionQueryBuilder : GraphQlQueryBuilder<WorkOrderIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public WorkOrderIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "WorkOrderIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WorkOrderIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WorkOrderIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ZoneQueryBuilder : GraphQlQueryBuilder<ZoneQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new[]
            {
                new GraphQlFieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new GraphQlFieldMetadata { Name = "collections", IsComplex = true, QueryBuilderType = typeof(CollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "connectedDataSourceId" },
                new GraphQlFieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dateCreated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dateUpdated", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "exactType" },
                new GraphQlFieldMetadata { Name = "geoshape", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPartEdges", IsComplex = true, QueryBuilderType = typeof(HasPartEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasPointEdges", IsComplex = true, QueryBuilderType = typeof(HasPointEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "identities", IsComplex = true, QueryBuilderType = typeof(ZoneIdentityUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentTo", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isAdjacentToEdges", IsComplex = true, QueryBuilderType = typeof(IsAdjacentToEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFedByEdges", IsComplex = true, QueryBuilderType = typeof(IsFedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(IsLocationOfUnionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isLocationOfEdges", IsComplex = true, QueryBuilderType = typeof(IsLocationOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isPartOfEdges", IsComplex = true, QueryBuilderType = typeof(IsPartOfEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isServedByEdges", IsComplex = true, QueryBuilderType = typeof(IsServedByEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mappingKey" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Zone"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ZoneQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public ZoneQueryBuilder WithCollections(CollectionQueryBuilder collectionQueryBuilder, QueryBuilderParameter<CollectionFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("collections", alias, collectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptCollections()
        {
            return ExceptField("collections");
        }

        public ZoneQueryBuilder WithConnectedDataSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectedDataSourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptConnectedDataSourceId()
        {
            return ExceptField("connectedDataSourceId");
        }

        public ZoneQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public ZoneQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public ZoneQueryBuilder WithDateUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptDateUpdated()
        {
            return ExceptField("dateUpdated");
        }

        public ZoneQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ZoneQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public ZoneQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public ZoneQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public ZoneQueryBuilder WithHasPartEdges(HasPartEdgeQueryBuilder hasPartEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPartEdges", alias, hasPartEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptHasPartEdges()
        {
            return ExceptField("hasPartEdges");
        }

        public ZoneQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public ZoneQueryBuilder WithHasPointEdges(HasPointEdgeQueryBuilder hasPointEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPointEdges", alias, hasPointEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptHasPointEdges()
        {
            return ExceptField("hasPointEdges");
        }

        public ZoneQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ZoneQueryBuilder WithIdentities(ZoneIdentityUnionQueryBuilder zoneIdentityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identities", alias, zoneIdentityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIdentities()
        {
            return ExceptField("identities");
        }

        public ZoneQueryBuilder WithIsAdjacentTo(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isAdjacentTo", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptIsAdjacentTo()
        {
            return ExceptField("isAdjacentTo");
        }

        public ZoneQueryBuilder WithIsAdjacentToEdges(IsAdjacentToEdgeQueryBuilder isAdjacentToEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isAdjacentToEdges", alias, isAdjacentToEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsAdjacentToEdges()
        {
            return ExceptField("isAdjacentToEdges");
        }

        public ZoneQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public ZoneQueryBuilder WithIsFedByEdges(IsFedByEdgeQueryBuilder isFedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedByEdges", alias, isFedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsFedByEdges()
        {
            return ExceptField("isFedByEdges");
        }

        public ZoneQueryBuilder WithIsLocationOf(IsLocationOfUnionQueryBuilder isLocationOfUnionQueryBuilder, QueryBuilderParameter<EntityFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isLocationOf", alias, isLocationOfUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public ZoneQueryBuilder WithIsLocationOfEdges(IsLocationOfEdgeQueryBuilder isLocationOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOfEdges", alias, isLocationOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsLocationOfEdges()
        {
            return ExceptField("isLocationOfEdges");
        }

        public ZoneQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, QueryBuilderParameter<PlaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public ZoneQueryBuilder WithIsPartOfEdges(IsPartOfEdgeQueryBuilder isPartOfEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOfEdges", alias, isPartOfEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsPartOfEdges()
        {
            return ExceptField("isPartOfEdges");
        }

        public ZoneQueryBuilder WithIsServedBy(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("isServedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptIsServedBy()
        {
            return ExceptField("isServedBy");
        }

        public ZoneQueryBuilder WithIsServedByEdges(IsServedByEdgeQueryBuilder isServedByEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isServedByEdges", alias, isServedByEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsServedByEdges()
        {
            return ExceptField("isServedByEdges");
        }

        public ZoneQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public ZoneQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ZoneQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public ZoneQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ZoneQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class ZoneIdentityUnionQueryBuilder : GraphQlQueryBuilder<ZoneIdentityUnionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public ZoneIdentityUnionQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "ZoneIdentityUnion"; } }

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ZoneIdentityUnionQueryBuilder WithAccessCredentialIdentityFragment(AccessCredentialIdentityQueryBuilder accessCredentialIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accessCredentialIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithBaCnetObjectIdFragment(BaCnetObjectIdQueryBuilder baCnetObjectIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetObjectIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithBaCnetVendorIdFragment(BaCnetVendorIdQueryBuilder baCnetVendorIdQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(baCnetVendorIdQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithEmailAddressIdentityFragment(EmailAddressIdentityQueryBuilder emailAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithEmailIdentityFragment(EmailIdentityQueryBuilder emailIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(emailIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithExternalIdentityFragment(ExternalIdentityQueryBuilder externalIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(externalIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithFloorLevelIdentityFragment(FloorLevelIdentityQueryBuilder floorLevelIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorLevelIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithGenericIdentityFragment(GenericIdentityQueryBuilder genericIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithNameIdentityFragment(NameIdentityQueryBuilder nameIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nameIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithPostalAddressIdentityFragment(PostalAddressIdentityQueryBuilder postalAddressIdentityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(postalAddressIdentityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneIdentityUnionQueryBuilder WithSpaceCodeFragment(SpaceCodeQueryBuilder spaceCodeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceCodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }
    #endregion

    #region input classes
    public class ApiKeyInput : IGraphQlInputObject
    {
        private InputPropertyInfo _apiKey;
        private InputPropertyInfo _keyName;
        private InputPropertyInfo _passedAs;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ApiKey
        {
            get { return (QueryBuilderParameter<string>)_apiKey.Value; }
            set { _apiKey = new InputPropertyInfo { Name = "apiKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> KeyName
        {
            get { return (QueryBuilderParameter<string>)_keyName.Value; }
            set { _keyName = new InputPropertyInfo { Name = "keyName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PassedAs
        {
            get { return (QueryBuilderParameter<string>)_passedAs.Value; }
            set { _passedAs = new InputPropertyInfo { Name = "passedAs", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_apiKey.Name != null) yield return _apiKey;
            if (_keyName.Name != null) yield return _keyName;
            if (_passedAs.Name != null) yield return _passedAs;
        }
    }

    public class AccessCredentialFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AccessCredentialFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AccessCredentialFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<AccessCredentialFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AccessCredentialFilter>))]
#endif
        public QueryBuilderParameter<AccessCredentialFilter> Not
        {
            get { return (QueryBuilderParameter<AccessCredentialFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AccessCredentialFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AccessCredentialFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AccessCredentialFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class AccountFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AccountFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AccountFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<AccountFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AccountFilter>))]
#endif
        public QueryBuilderParameter<AccountFilter> Not
        {
            get { return (QueryBuilderParameter<AccountFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AccountFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AccountFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AccountFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class AddressMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _countryName;
        private InputPropertyInfo _id;
        private InputPropertyInfo _locality;
        private InputPropertyInfo _postalCode;
        private InputPropertyInfo _region;
        private InputPropertyInfo _streetAddress;
        private InputPropertyInfo _type;
        private InputPropertyInfo _validate;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> CountryName
        {
            get { return (QueryBuilderParameter<string>)_countryName.Value; }
            set { _countryName = new InputPropertyInfo { Name = "countryName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Locality
        {
            get { return (QueryBuilderParameter<string>)_locality.Value; }
            set { _locality = new InputPropertyInfo { Name = "locality", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PostalCode
        {
            get { return (QueryBuilderParameter<string>)_postalCode.Value; }
            set { _postalCode = new InputPropertyInfo { Name = "postalCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Region
        {
            get { return (QueryBuilderParameter<string>)_region.Value; }
            set { _region = new InputPropertyInfo { Name = "region", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StreetAddress
        {
            get { return (QueryBuilderParameter<string>)_streetAddress.Value; }
            set { _streetAddress = new InputPropertyInfo { Name = "streetAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Type
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Validate
        {
            get { return (QueryBuilderParameter<bool?>)_validate.Value; }
            set { _validate = new InputPropertyInfo { Name = "validate", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_countryName.Name != null) yield return _countryName;
            if (_id.Name != null) yield return _id;
            if (_locality.Name != null) yield return _locality;
            if (_postalCode.Name != null) yield return _postalCode;
            if (_region.Name != null) yield return _region;
            if (_streetAddress.Name != null) yield return _streetAddress;
            if (_type.Name != null) yield return _type;
            if (_validate.Name != null) yield return _validate;
        }
    }

    public class AgentFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AgentFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AgentFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<AgentFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AgentFilter>))]
#endif
        public QueryBuilderParameter<AgentFilter> Not
        {
            get { return (QueryBuilderParameter<AgentFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AgentFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AgentFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AgentFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class AuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _matches;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MatchInput>> Matches
        {
            get { return (QueryBuilderParameter<ICollection<MatchInput>>)_matches.Value; }
            set { _matches = new InputPropertyInfo { Name = "matches", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_matches.Name != null) yield return _matches;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class BasicAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _password;
        private InputPropertyInfo _username;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_password.Name != null) yield return _password;
            if (_username.Name != null) yield return _username;
        }
    }

    public class BodyValueLocationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _bodySource;
        private InputPropertyInfo _field;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BodySource
        {
            get { return (QueryBuilderParameter<string>)_bodySource.Value; }
            set { _bodySource = new InputPropertyInfo { Name = "bodySource", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Field
        {
            get { return (QueryBuilderParameter<string>)_field.Value; }
            set { _field = new InputPropertyInfo { Name = "field", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_bodySource.Name != null) yield return _bodySource;
            if (_field.Name != null) yield return _field;
        }
    }

    public class BoolFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _isDefined;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Eq
        {
            get { return (QueryBuilderParameter<bool?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> IsDefined
        {
            get { return (QueryBuilderParameter<bool?>)_isDefined.Value; }
            set { _isDefined = new InputPropertyInfo { Name = "isDefined", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_isDefined.Name != null) yield return _isDefined;
        }
    }

    public class BuildingCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _building;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingMutationInput>))]
#endif
        public QueryBuilderParameter<BuildingMutationInput> Building
        {
            get { return (QueryBuilderParameter<BuildingMutationInput>)_building.Value; }
            set { _building = new InputPropertyInfo { Name = "building", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_building.Name != null) yield return _building;
        }
    }

    public class BuildingDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class BuildingFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuildingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<BuildingFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<BuildingFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingFilter>))]
#endif
        public QueryBuilderParameter<BuildingFilter> Not
        {
            get { return (QueryBuilderParameter<BuildingFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuildingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<BuildingFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<BuildingFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class BuildingMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _address;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _siteId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AddressMutationInput>))]
#endif
        public QueryBuilderParameter<AddressMutationInput> Address
        {
            get { return (QueryBuilderParameter<AddressMutationInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "address", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SiteId
        {
            get { return (QueryBuilderParameter<string>)_siteId.Value; }
            set { _siteId = new InputPropertyInfo { Name = "siteId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_address.Name != null) yield return _address;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_siteId.Name != null) yield return _siteId;
        }
    }

    public class BuildingUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _building;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingMutationInput>))]
#endif
        public QueryBuilderParameter<BuildingMutationInput> Building
        {
            get { return (QueryBuilderParameter<BuildingMutationInput>)_building.Value; }
            set { _building = new InputPropertyInfo { Name = "building", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_building.Name != null) yield return _building;
        }
    }

    public class CalendarEventFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _hasInviteeEmail;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _startTime;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarEventFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarEventFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<CalendarEventFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> EndTime
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_endTime.Value; }
            set { _endTime = new InputPropertyInfo { Name = "endTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> HasInviteeEmail
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_hasInviteeEmail.Value; }
            set { _hasInviteeEmail = new InputPropertyInfo { Name = "hasInviteeEmail", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarEventFilter>))]
#endif
        public QueryBuilderParameter<CalendarEventFilter> Not
        {
            get { return (QueryBuilderParameter<CalendarEventFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarEventFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarEventFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CalendarEventFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> StartTime
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_endTime.Name != null) yield return _endTime;
            if (_exactType.Name != null) yield return _exactType;
            if (_hasInviteeEmail.Name != null) yield return _hasInviteeEmail;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_startTime.Name != null) yield return _startTime;
            if (_type.Name != null) yield return _type;
        }
    }

    public class CalendarInvitationFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _response;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<DateTimeFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<DateTimeFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<DateTimeFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<DateTimeFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationFilter>))]
#endif
        public QueryBuilderParameter<CalendarInvitationFilter> Not
        {
            get { return (QueryBuilderParameter<CalendarInvitationFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationResponseFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<CalendarInvitationResponseFilterExpressionInput> Response
        {
            get { return (QueryBuilderParameter<CalendarInvitationResponseFilterExpressionInput>)_response.Value; }
            set { _response = new InputPropertyInfo { Name = "response", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_response.Name != null) yield return _response;
            if (_type.Name != null) yield return _type;
        }
    }

    public class CalendarInvitationResponseFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationResponse?>))]
#endif
        public QueryBuilderParameter<CalendarInvitationResponse?> Eq
        {
            get { return (QueryBuilderParameter<CalendarInvitationResponse?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationResponse>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationResponse>> In
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationResponse>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class CertMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _caCerts;
        private InputPropertyInfo _dnsName;
        private InputPropertyInfo _serialNumber;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateAuthorityBundleInput>))]
#endif
        public QueryBuilderParameter<CertificateAuthorityBundleInput> CaCerts
        {
            get { return (QueryBuilderParameter<CertificateAuthorityBundleInput>)_caCerts.Value; }
            set { _caCerts = new InputPropertyInfo { Name = "caCerts", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> DnsName
        {
            get { return (QueryBuilderParameter<string>)_dnsName.Value; }
            set { _dnsName = new InputPropertyInfo { Name = "dnsName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SerialNumber
        {
            get { return (QueryBuilderParameter<string>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_caCerts.Name != null) yield return _caCerts;
            if (_dnsName.Name != null) yield return _dnsName;
            if (_serialNumber.Name != null) yield return _serialNumber;
        }
    }

    public class CertificateAuthorityBundleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _caCertificates;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CertificateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<CertificateInput>> CaCertificates
        {
            get { return (QueryBuilderParameter<ICollection<CertificateInput>>)_caCertificates.Value; }
            set { _caCertificates = new InputPropertyInfo { Name = "caCertificates", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_caCertificates.Name != null) yield return _caCertificates;
        }
    }

    public class CertificateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _certificate;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Certificate
        {
            get { return (QueryBuilderParameter<string>)_certificate.Value; }
            set { _certificate = new InputPropertyInfo { Name = "certificate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateTypeInput?>))]
#endif
        public QueryBuilderParameter<CertificateTypeInput?> Type
        {
            get { return (QueryBuilderParameter<CertificateTypeInput?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_certificate.Name != null) yield return _certificate;
            if (_type.Name != null) yield return _type;
        }
    }

    public class CollectionFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CollectionFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CollectionFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<CollectionFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CollectionFilter>))]
#endif
        public QueryBuilderParameter<CollectionFilter> Not
        {
            get { return (QueryBuilderParameter<CollectionFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CollectionFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CollectionFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CollectionFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class ConnectorAuthAccessRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorAuthCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _secret;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthRequestSecretInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthRequestSecretInput> Secret
        {
            get { return (QueryBuilderParameter<ConnectorAuthRequestSecretInput>)_secret.Value; }
            set { _secret = new InputPropertyInfo { Name = "secret", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_secret.Name != null) yield return _secret;
        }
    }

    public class ConnectorAuthDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastAccessed;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastAccessed
        {
            get { return (QueryBuilderParameter<object>)_lastAccessed.Value; }
            set { _lastAccessed = new InputPropertyInfo { Name = "lastAccessed", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_lastAccessed.Name != null) yield return _lastAccessed;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class ConnectorAuthRequestSecretInput : IGraphQlInputObject
    {
        private InputPropertyInfo _staticToken;
        private InputPropertyInfo _usernamePassword;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthStaticTokenInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthStaticTokenInput> StaticToken
        {
            get { return (QueryBuilderParameter<ConnectorAuthStaticTokenInput>)_staticToken.Value; }
            set { _staticToken = new InputPropertyInfo { Name = "staticToken", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthUsernamePasswordInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthUsernamePasswordInput> UsernamePassword
        {
            get { return (QueryBuilderParameter<ConnectorAuthUsernamePasswordInput>)_usernamePassword.Value; }
            set { _usernamePassword = new InputPropertyInfo { Name = "usernamePassword", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_staticToken.Name != null) yield return _staticToken;
            if (_usernamePassword.Name != null) yield return _usernamePassword;
        }
    }

    public class ConnectorAuthStaticTokenInput : IGraphQlInputObject
    {
        private InputPropertyInfo _token;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Token
        {
            get { return (QueryBuilderParameter<string>)_token.Value; }
            set { _token = new InputPropertyInfo { Name = "token", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_token.Name != null) yield return _token;
        }
    }

    public class ConnectorAuthUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorAuth;
        private InputPropertyInfo _secret;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthInput> ConnectorAuth
        {
            get { return (QueryBuilderParameter<ConnectorAuthInput>)_connectorAuth.Value; }
            set { _connectorAuth = new InputPropertyInfo { Name = "connectorAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthRequestSecretInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthRequestSecretInput> Secret
        {
            get { return (QueryBuilderParameter<ConnectorAuthRequestSecretInput>)_secret.Value; }
            set { _secret = new InputPropertyInfo { Name = "secret", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorAuth.Name != null) yield return _connectorAuth;
            if (_secret.Name != null) yield return _secret;
        }
    }

    public class ConnectorAuthUsernamePasswordInput : IGraphQlInputObject
    {
        private InputPropertyInfo _password;
        private InputPropertyInfo _username;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_password.Name != null) yield return _password;
            if (_username.Name != null) yield return _username;
        }
    }

    public class ConnectorCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connector;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorInput>))]
#endif
        public QueryBuilderParameter<ConnectorInput> Connector
        {
            get { return (QueryBuilderParameter<ConnectorInput>)_connector.Value; }
            set { _connector = new InputPropertyInfo { Name = "connector", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connector.Name != null) yield return _connector;
        }
    }

    public class ConnectorDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _direction;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ConnectorFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ConnectorFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ConnectorFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeConnectorDirectionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<ConnectorTypeConnectorDirectionFilterExpressionInput> Direction
        {
            get { return (QueryBuilderParameter<ConnectorTypeConnectorDirectionFilterExpressionInput>)_direction.Value; }
            set { _direction = new InputPropertyInfo { Name = "direction", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ConnectorFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ConnectorFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<ConnectorFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ConnectorFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ConnectorFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ConnectorFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_direction.Name != null) yield return _direction;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class ConnectorInput : IGraphQlInputObject
    {
        private InputPropertyInfo _baseUrl;
        private InputPropertyInfo _config;
        private InputPropertyInfo _configHash;
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _created;
        private InputPropertyInfo _direction;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastSeen;
        private InputPropertyInfo _lastUpdatedBy;
        private InputPropertyInfo _name;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stateDetails;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _userId;
        private InputPropertyInfo _workflowId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BaseUrl
        {
            get { return (QueryBuilderParameter<string>)_baseUrl.Value; }
            set { _baseUrl = new InputPropertyInfo { Name = "baseUrl", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Config
        {
            get { return (QueryBuilderParameter<object>)_config.Value; }
            set { _config = new InputPropertyInfo { Name = "config", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConfigHash
        {
            get { return (QueryBuilderParameter<string>)_configHash.Value; }
            set { _configHash = new InputPropertyInfo { Name = "configHash", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<string>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeConnectorDirectionInput?>))]
#endif
        public QueryBuilderParameter<ConnectorTypeConnectorDirectionInput?> Direction
        {
            get { return (QueryBuilderParameter<ConnectorTypeConnectorDirectionInput?>)_direction.Value; }
            set { _direction = new InputPropertyInfo { Name = "direction", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastSeen
        {
            get { return (QueryBuilderParameter<object>)_lastSeen.Value; }
            set { _lastSeen = new InputPropertyInfo { Name = "lastSeen", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LastUpdatedBy
        {
            get { return (QueryBuilderParameter<string>)_lastUpdatedBy.Value; }
            set { _lastUpdatedBy = new InputPropertyInfo { Name = "lastUpdatedBy", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorStateInput?>))]
#endif
        public QueryBuilderParameter<ConnectorStateInput?> State
        {
            get { return (QueryBuilderParameter<ConnectorStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StateDetails
        {
            get { return (QueryBuilderParameter<string>)_stateDetails.Value; }
            set { _stateDetails = new InputPropertyInfo { Name = "stateDetails", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> WorkflowId
        {
            get { return (QueryBuilderParameter<string>)_workflowId.Value; }
            set { _workflowId = new InputPropertyInfo { Name = "workflowId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_baseUrl.Name != null) yield return _baseUrl;
            if (_config.Name != null) yield return _config;
            if (_configHash.Name != null) yield return _configHash;
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_created.Name != null) yield return _created;
            if (_direction.Name != null) yield return _direction;
            if (_id.Name != null) yield return _id;
            if (_lastSeen.Name != null) yield return _lastSeen;
            if (_lastUpdatedBy.Name != null) yield return _lastUpdatedBy;
            if (_name.Name != null) yield return _name;
            if (_state.Name != null) yield return _state;
            if (_stateDetails.Name != null) yield return _stateDetails;
            if (_updated.Name != null) yield return _updated;
            if (_userId.Name != null) yield return _userId;
            if (_workflowId.Name != null) yield return _workflowId;
        }
    }

    public class ConnectorRequestCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<string>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
        }
    }

    public class ConnectorRestartRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorStartRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorStopRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorTypeConnectorDirectionFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeConnectorDirectionInput?>))]
#endif
        public QueryBuilderParameter<ConnectorTypeConnectorDirectionInput?> Eq
        {
            get { return (QueryBuilderParameter<ConnectorTypeConnectorDirectionInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ConnectorTypeConnectorDirectionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ConnectorTypeConnectorDirectionInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<ConnectorTypeConnectorDirectionInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class ConnectorTypeFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _description;
        private InputPropertyInfo _direction;
        private InputPropertyInfo _metadataKey;
        private InputPropertyInfo _metadataValue;
        private InputPropertyInfo _name;
        private InputPropertyInfo _runtimeVersion;
        private InputPropertyInfo _version;
        private InputPropertyInfo _webhookReceiveStorage;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Description
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeConnectorDirectionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<ConnectorTypeConnectorDirectionFilterExpressionInput> Direction
        {
            get { return (QueryBuilderParameter<ConnectorTypeConnectorDirectionFilterExpressionInput>)_direction.Value; }
            set { _direction = new InputPropertyInfo { Name = "direction", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MetadataKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_metadataKey.Value; }
            set { _metadataKey = new InputPropertyInfo { Name = "metadataKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MetadataValue
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_metadataValue.Value; }
            set { _metadataValue = new InputPropertyInfo { Name = "metadataValue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeRuntimeVersionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<ConnectorTypeRuntimeVersionFilterExpressionInput> RuntimeVersion
        {
            get { return (QueryBuilderParameter<ConnectorTypeRuntimeVersionFilterExpressionInput>)_runtimeVersion.Value; }
            set { _runtimeVersion = new InputPropertyInfo { Name = "runtimeVersion", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Version
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_version.Value; }
            set { _version = new InputPropertyInfo { Name = "version", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeWebhookReceiveStorageInput?>))]
#endif
        public QueryBuilderParameter<ConnectorTypeWebhookReceiveStorageInput?> WebhookReceiveStorage
        {
            get { return (QueryBuilderParameter<ConnectorTypeWebhookReceiveStorageInput?>)_webhookReceiveStorage.Value; }
            set { _webhookReceiveStorage = new InputPropertyInfo { Name = "webhookReceiveStorage", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_description.Name != null) yield return _description;
            if (_direction.Name != null) yield return _direction;
            if (_metadataKey.Name != null) yield return _metadataKey;
            if (_metadataValue.Name != null) yield return _metadataValue;
            if (_name.Name != null) yield return _name;
            if (_runtimeVersion.Name != null) yield return _runtimeVersion;
            if (_version.Name != null) yield return _version;
            if (_webhookReceiveStorage.Name != null) yield return _webhookReceiveStorage;
        }
    }

    public class ConnectorTypeRuntimeVersionFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorTypeRuntimeVersionInput?>))]
#endif
        public QueryBuilderParameter<ConnectorTypeRuntimeVersionInput?> Eq
        {
            get { return (QueryBuilderParameter<ConnectorTypeRuntimeVersionInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ConnectorTypeRuntimeVersionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ConnectorTypeRuntimeVersionInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<ConnectorTypeRuntimeVersionInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class ConnectorUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connector;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorInput>))]
#endif
        public QueryBuilderParameter<ConnectorInput> Connector
        {
            get { return (QueryBuilderParameter<ConnectorInput>)_connector.Value; }
            set { _connector = new InputPropertyInfo { Name = "connector", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connector.Name != null) yield return _connector;
        }
    }

    public class ConnectorUpsertConfigRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _config;
        private InputPropertyInfo _configHash;
        private InputPropertyInfo _id;
        private InputPropertyInfo _restart;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Config
        {
            get { return (QueryBuilderParameter<object>)_config.Value; }
            set { _config = new InputPropertyInfo { Name = "config", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConfigHash
        {
            get { return (QueryBuilderParameter<string>)_configHash.Value; }
            set { _configHash = new InputPropertyInfo { Name = "configHash", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorUpsertConfigRestartOptionsInput?>))]
#endif
        public QueryBuilderParameter<ConnectorUpsertConfigRestartOptionsInput?> Restart
        {
            get { return (QueryBuilderParameter<ConnectorUpsertConfigRestartOptionsInput?>)_restart.Value; }
            set { _restart = new InputPropertyInfo { Name = "restart", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_config.Name != null) yield return _config;
            if (_configHash.Name != null) yield return _configHash;
            if (_id.Name != null) yield return _id;
            if (_restart.Name != null) yield return _restart;
        }
    }

    public class ContributionRequestCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contributionRequest;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContributionRequestInput>))]
#endif
        public QueryBuilderParameter<ContributionRequestInput> ContributionRequest
        {
            get { return (QueryBuilderParameter<ContributionRequestInput>)_contributionRequest.Value; }
            set { _contributionRequest = new InputPropertyInfo { Name = "contributionRequest", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contributionRequest.Name != null) yield return _contributionRequest;
        }
    }

    public class ContributionRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _properties;
        private InputPropertyInfo _target;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContributionRequestPropertyValuesInput>))]
#endif
        public QueryBuilderParameter<ContributionRequestPropertyValuesInput> Properties
        {
            get { return (QueryBuilderParameter<ContributionRequestPropertyValuesInput>)_properties.Value; }
            set { _properties = new InputPropertyInfo { Name = "properties", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContributionRequestTargetEntityInput>))]
#endif
        public QueryBuilderParameter<ContributionRequestTargetEntityInput> Target
        {
            get { return (QueryBuilderParameter<ContributionRequestTargetEntityInput>)_target.Value; }
            set { _target = new InputPropertyInfo { Name = "target", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_properties.Name != null) yield return _properties;
            if (_target.Name != null) yield return _target;
        }
    }

    public class ContributionRequestPropertyValuesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _additionalName;
        private InputPropertyInfo _address;
        private InputPropertyInfo _attachment;
        private InputPropertyInfo _callInfo;
        private InputPropertyInfo _countryName;
        private InputPropertyInfo _description;
        private InputPropertyInfo _deviceModelId;
        private InputPropertyInfo _elevation;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _familyName;
        private InputPropertyInfo _firmwareVersion;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _givenName;
        private InputPropertyInfo _hostname;
        private InputPropertyInfo _iCalUid;
        private InputPropertyInfo _image;
        private InputPropertyInfo _ipv4Address;
        private InputPropertyInfo _ipv6Address;
        private InputPropertyInfo _level;
        private InputPropertyInfo _locality;
        private InputPropertyInfo _macAddress;
        private InputPropertyInfo _maxLimit;
        private InputPropertyInfo _maxOccupancy;
        private InputPropertyInfo _minLimit;
        private InputPropertyInfo _name;
        private InputPropertyInfo _postalCode;
        private InputPropertyInfo _region;
        private InputPropertyInfo _response;
        private InputPropertyInfo _seeAlso;
        private InputPropertyInfo _serialNumber;
        private InputPropertyInfo _stateTexts;
        private InputPropertyInfo _streetAddress;
        private InputPropertyInfo _systemType;
        private InputPropertyInfo _type;
        private InputPropertyInfo _unit;
        private InputPropertyInfo _valueType;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> AdditionalName
        {
            get { return (QueryBuilderParameter<string>)_additionalName.Value; }
            set { _additionalName = new InputPropertyInfo { Name = "additionalName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "address", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Attachment
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_attachment.Value; }
            set { _attachment = new InputPropertyInfo { Name = "attachment", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> CallInfo
        {
            get { return (QueryBuilderParameter<string>)_callInfo.Value; }
            set { _callInfo = new InputPropertyInfo { Name = "callInfo", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> CountryName
        {
            get { return (QueryBuilderParameter<string>)_countryName.Value; }
            set { _countryName = new InputPropertyInfo { Name = "countryName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> DeviceModelId
        {
            get { return (QueryBuilderParameter<string>)_deviceModelId.Value; }
            set { _deviceModelId = new InputPropertyInfo { Name = "deviceModelId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Elevation
        {
            get { return (QueryBuilderParameter<decimal?>)_elevation.Value; }
            set { _elevation = new InputPropertyInfo { Name = "elevation", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> EndTime
        {
            get { return (QueryBuilderParameter<object>)_endTime.Value; }
            set { _endTime = new InputPropertyInfo { Name = "endTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ExactType
        {
            get { return (QueryBuilderParameter<string>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> FamilyName
        {
            get { return (QueryBuilderParameter<string>)_familyName.Value; }
            set { _familyName = new InputPropertyInfo { Name = "familyName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> FirmwareVersion
        {
            get { return (QueryBuilderParameter<string>)_firmwareVersion.Value; }
            set { _firmwareVersion = new InputPropertyInfo { Name = "firmwareVersion", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GivenName
        {
            get { return (QueryBuilderParameter<string>)_givenName.Value; }
            set { _givenName = new InputPropertyInfo { Name = "givenName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Hostname
        {
            get { return (QueryBuilderParameter<string>)_hostname.Value; }
            set { _hostname = new InputPropertyInfo { Name = "hostname", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ICalUid
        {
            get { return (QueryBuilderParameter<string>)_iCalUid.Value; }
            set { _iCalUid = new InputPropertyInfo { Name = "iCalUid", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Image
        {
            get { return (QueryBuilderParameter<string>)_image.Value; }
            set { _image = new InputPropertyInfo { Name = "image", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Ipv4Address
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_ipv4Address.Value; }
            set { _ipv4Address = new InputPropertyInfo { Name = "ipv4Address", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Ipv6Address
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_ipv6Address.Value; }
            set { _ipv6Address = new InputPropertyInfo { Name = "ipv6Address", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Level
        {
            get { return (QueryBuilderParameter<int?>)_level.Value; }
            set { _level = new InputPropertyInfo { Name = "level", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Locality
        {
            get { return (QueryBuilderParameter<string>)_locality.Value; }
            set { _locality = new InputPropertyInfo { Name = "locality", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> MacAddress
        {
            get { return (QueryBuilderParameter<string>)_macAddress.Value; }
            set { _macAddress = new InputPropertyInfo { Name = "macAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> MaxLimit
        {
            get { return (QueryBuilderParameter<decimal?>)_maxLimit.Value; }
            set { _maxLimit = new InputPropertyInfo { Name = "maxLimit", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> MaxOccupancy
        {
            get { return (QueryBuilderParameter<int?>)_maxOccupancy.Value; }
            set { _maxOccupancy = new InputPropertyInfo { Name = "maxOccupancy", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> MinLimit
        {
            get { return (QueryBuilderParameter<decimal?>)_minLimit.Value; }
            set { _minLimit = new InputPropertyInfo { Name = "minLimit", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PostalCode
        {
            get { return (QueryBuilderParameter<string>)_postalCode.Value; }
            set { _postalCode = new InputPropertyInfo { Name = "postalCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Region
        {
            get { return (QueryBuilderParameter<string>)_region.Value; }
            set { _region = new InputPropertyInfo { Name = "region", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Response
        {
            get { return (QueryBuilderParameter<string>)_response.Value; }
            set { _response = new InputPropertyInfo { Name = "response", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SeeAlso
        {
            get { return (QueryBuilderParameter<string>)_seeAlso.Value; }
            set { _seeAlso = new InputPropertyInfo { Name = "seeAlso", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SerialNumber
        {
            get { return (QueryBuilderParameter<string>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> StateTexts
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_stateTexts.Value; }
            set { _stateTexts = new InputPropertyInfo { Name = "stateTexts", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StreetAddress
        {
            get { return (QueryBuilderParameter<string>)_streetAddress.Value; }
            set { _streetAddress = new InputPropertyInfo { Name = "streetAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> SystemType
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_systemType.Value; }
            set { _systemType = new InputPropertyInfo { Name = "systemType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Type
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Unit
        {
            get { return (QueryBuilderParameter<string>)_unit.Value; }
            set { _unit = new InputPropertyInfo { Name = "unit", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ValueType
        {
            get { return (QueryBuilderParameter<string>)_valueType.Value; }
            set { _valueType = new InputPropertyInfo { Name = "valueType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_additionalName.Name != null) yield return _additionalName;
            if (_address.Name != null) yield return _address;
            if (_attachment.Name != null) yield return _attachment;
            if (_callInfo.Name != null) yield return _callInfo;
            if (_countryName.Name != null) yield return _countryName;
            if (_description.Name != null) yield return _description;
            if (_deviceModelId.Name != null) yield return _deviceModelId;
            if (_elevation.Name != null) yield return _elevation;
            if (_endTime.Name != null) yield return _endTime;
            if (_exactType.Name != null) yield return _exactType;
            if (_familyName.Name != null) yield return _familyName;
            if (_firmwareVersion.Name != null) yield return _firmwareVersion;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_givenName.Name != null) yield return _givenName;
            if (_hostname.Name != null) yield return _hostname;
            if (_iCalUid.Name != null) yield return _iCalUid;
            if (_image.Name != null) yield return _image;
            if (_ipv4Address.Name != null) yield return _ipv4Address;
            if (_ipv6Address.Name != null) yield return _ipv6Address;
            if (_level.Name != null) yield return _level;
            if (_locality.Name != null) yield return _locality;
            if (_macAddress.Name != null) yield return _macAddress;
            if (_maxLimit.Name != null) yield return _maxLimit;
            if (_maxOccupancy.Name != null) yield return _maxOccupancy;
            if (_minLimit.Name != null) yield return _minLimit;
            if (_name.Name != null) yield return _name;
            if (_postalCode.Name != null) yield return _postalCode;
            if (_region.Name != null) yield return _region;
            if (_response.Name != null) yield return _response;
            if (_seeAlso.Name != null) yield return _seeAlso;
            if (_serialNumber.Name != null) yield return _serialNumber;
            if (_stateTexts.Name != null) yield return _stateTexts;
            if (_streetAddress.Name != null) yield return _streetAddress;
            if (_systemType.Name != null) yield return _systemType;
            if (_type.Name != null) yield return _type;
            if (_unit.Name != null) yield return _unit;
            if (_valueType.Name != null) yield return _valueType;
        }
    }

    public class ContributionRequestTargetEntityInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class DateTimeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _in;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Eq
        {
            get { return (QueryBuilderParameter<object>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gt
        {
            get { return (QueryBuilderParameter<object>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gte
        {
            get { return (QueryBuilderParameter<object>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
#endif
        public QueryBuilderParameter<ICollection<object>> In
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lt
        {
            get { return (QueryBuilderParameter<object>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lte
        {
            get { return (QueryBuilderParameter<object>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_in.Name != null) yield return _in;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
        }
    }

    public class DeviceModelFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DeviceModelFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<DeviceModelFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<DeviceModelFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DeviceModelFilter>))]
#endif
        public QueryBuilderParameter<DeviceModelFilter> Not
        {
            get { return (QueryBuilderParameter<DeviceModelFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DeviceModelFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<DeviceModelFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<DeviceModelFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class DurationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _nanos;
        private InputPropertyInfo _seconds;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Nanos
        {
            get { return (QueryBuilderParameter<int?>)_nanos.Value; }
            set { _nanos = new InputPropertyInfo { Name = "nanos", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Seconds
        {
            get { return (QueryBuilderParameter<object>)_seconds.Value; }
            set { _seconds = new InputPropertyInfo { Name = "seconds", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_nanos.Name != null) yield return _nanos;
            if (_seconds.Name != null) yield return _seconds;
        }
    }

    public class EdgeDirectionFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EdgeDirection?>))]
#endif
        public QueryBuilderParameter<EdgeDirection?> Eq
        {
            get { return (QueryBuilderParameter<EdgeDirection?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
        }
    }

    public class EdgeFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _direction;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EdgeDirectionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<EdgeDirectionFilterExpressionInput> Direction
        {
            get { return (QueryBuilderParameter<EdgeDirectionFilterExpressionInput>)_direction.Value; }
            set { _direction = new InputPropertyInfo { Name = "direction", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_direction.Name != null) yield return _direction;
        }
    }

    public class EmailFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EmailFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<EmailFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<EmailFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EmailFilter>))]
#endif
        public QueryBuilderParameter<EmailFilter> Not
        {
            get { return (QueryBuilderParameter<EmailFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EmailFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<EmailFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<EmailFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class EntityFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EntityFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<EntityFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<EntityFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EntityFilter>))]
#endif
        public QueryBuilderParameter<EntityFilter> Not
        {
            get { return (QueryBuilderParameter<EntityFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EntityFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<EntityFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<EntityFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class FloorCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _floor;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorMutationInput>))]
#endif
        public QueryBuilderParameter<FloorMutationInput> Floor
        {
            get { return (QueryBuilderParameter<FloorMutationInput>)_floor.Value; }
            set { _floor = new InputPropertyInfo { Name = "floor", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_floor.Name != null) yield return _floor;
        }
    }

    public class FloorDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class FloorFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _level;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<FloorFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<FloorFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<FloorFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IntFilterExpressionInput> Level
        {
            get { return (QueryBuilderParameter<IntFilterExpressionInput>)_level.Value; }
            set { _level = new InputPropertyInfo { Name = "level", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorFilter>))]
#endif
        public QueryBuilderParameter<FloorFilter> Not
        {
            get { return (QueryBuilderParameter<FloorFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<FloorFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<FloorFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<FloorFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_level.Name != null) yield return _level;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class FloorMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _buildingId;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _level;
        private InputPropertyInfo _name;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BuildingId
        {
            get { return (QueryBuilderParameter<string>)_buildingId.Value; }
            set { _buildingId = new InputPropertyInfo { Name = "buildingId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Level
        {
            get { return (QueryBuilderParameter<int?>)_level.Value; }
            set { _level = new InputPropertyInfo { Name = "level", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Type
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_buildingId.Name != null) yield return _buildingId;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_level.Name != null) yield return _level;
            if (_name.Name != null) yield return _name;
            if (_type.Name != null) yield return _type;
        }
    }

    public class FloorUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _floor;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorMutationInput>))]
#endif
        public QueryBuilderParameter<FloorMutationInput> Floor
        {
            get { return (QueryBuilderParameter<FloorMutationInput>)_floor.Value; }
            set { _floor = new InputPropertyInfo { Name = "floor", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_floor.Name != null) yield return _floor;
        }
    }

    public class GrpcRequestOptions : IGraphQlInputObject
    {
        private InputPropertyInfo _requestTimeout;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> RequestTimeout
        {
            get { return (QueryBuilderParameter<int?>)_requestTimeout.Value; }
            set { _requestTimeout = new InputPropertyInfo { Name = "requestTimeout", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestTimeout.Name != null) yield return _requestTimeout;
        }
    }

    public class GatewayAssignRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _assignment;
        private InputPropertyInfo _gatewayId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayAssignmentDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayAssignmentDetailsInput> Assignment
        {
            get { return (QueryBuilderParameter<GatewayAssignmentDetailsInput>)_assignment.Value; }
            set { _assignment = new InputPropertyInfo { Name = "assignment", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GatewayId
        {
            get { return (QueryBuilderParameter<string>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_assignment.Name != null) yield return _assignment;
            if (_gatewayId.Name != null) yield return _gatewayId;
        }
    }

    public class GatewayAssignmentDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _assignmentTime;
        private InputPropertyInfo _physicalPlaceId;
        private InputPropertyInfo _preciseGeoLocation;
        private InputPropertyInfo _servesPlaceIds;
        private InputPropertyInfo _servesSystemTypes;
        private InputPropertyInfo _supportAccessAllowed;
        private InputPropertyInfo _supportAccessExpiration;
        private InputPropertyInfo _uniqueName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> AssignmentTime
        {
            get { return (QueryBuilderParameter<object>)_assignmentTime.Value; }
            set { _assignmentTime = new InputPropertyInfo { Name = "assignmentTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PhysicalPlaceId
        {
            get { return (QueryBuilderParameter<string>)_physicalPlaceId.Value; }
            set { _physicalPlaceId = new InputPropertyInfo { Name = "physicalPlaceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> PreciseGeoLocation
        {
            get { return (QueryBuilderParameter<object>)_preciseGeoLocation.Value; }
            set { _preciseGeoLocation = new InputPropertyInfo { Name = "preciseGeoLocation", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> ServesPlaceIds
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_servesPlaceIds.Value; }
            set { _servesPlaceIds = new InputPropertyInfo { Name = "servesPlaceIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> ServesSystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_servesSystemTypes.Value; }
            set { _servesSystemTypes = new InputPropertyInfo { Name = "servesSystemTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> SupportAccessAllowed
        {
            get { return (QueryBuilderParameter<bool?>)_supportAccessAllowed.Value; }
            set { _supportAccessAllowed = new InputPropertyInfo { Name = "supportAccessAllowed", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> SupportAccessExpiration
        {
            get { return (QueryBuilderParameter<object>)_supportAccessExpiration.Value; }
            set { _supportAccessExpiration = new InputPropertyInfo { Name = "supportAccessExpiration", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UniqueName
        {
            get { return (QueryBuilderParameter<string>)_uniqueName.Value; }
            set { _uniqueName = new InputPropertyInfo { Name = "uniqueName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_assignmentTime.Name != null) yield return _assignmentTime;
            if (_physicalPlaceId.Name != null) yield return _physicalPlaceId;
            if (_preciseGeoLocation.Name != null) yield return _preciseGeoLocation;
            if (_servesPlaceIds.Name != null) yield return _servesPlaceIds;
            if (_servesSystemTypes.Name != null) yield return _servesSystemTypes;
            if (_supportAccessAllowed.Name != null) yield return _supportAccessAllowed;
            if (_supportAccessExpiration.Name != null) yield return _supportAccessExpiration;
            if (_uniqueName.Name != null) yield return _uniqueName;
        }
    }

    public class GatewayFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _deviceId;
        private InputPropertyInfo _gatewayId;
        private InputPropertyInfo _iccid;
        private InputPropertyInfo _imei;
        private InputPropertyInfo _lanMac;
        private InputPropertyInfo _mappedModel;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _physicalPlaceId;
        private InputPropertyInfo _serialNumber;
        private InputPropertyInfo _servesPlaceIds;
        private InputPropertyInfo _servesSystemTypes;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stateTime;
        private InputPropertyInfo _uniqueName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> DeviceId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_deviceId.Value; }
            set { _deviceId = new InputPropertyInfo { Name = "deviceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GatewayId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Iccid
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_iccid.Value; }
            set { _iccid = new InputPropertyInfo { Name = "iccid", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Imei
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_imei.Value; }
            set { _imei = new InputPropertyInfo { Name = "imei", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> LanMac
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_lanMac.Value; }
            set { _lanMac = new InputPropertyInfo { Name = "lanMac", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayModelFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewayModelFilterExpressionInput> MappedModel
        {
            get { return (QueryBuilderParameter<GatewayModelFilterExpressionInput>)_mappedModel.Value; }
            set { _mappedModel = new InputPropertyInfo { Name = "mappedModel", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> PhysicalPlaceId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_physicalPlaceId.Value; }
            set { _physicalPlaceId = new InputPropertyInfo { Name = "physicalPlaceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> SerialNumber
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> ServesPlaceIds
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_servesPlaceIds.Value; }
            set { _servesPlaceIds = new InputPropertyInfo { Name = "servesPlaceIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySystemTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewaySystemTypeFilterExpressionInput> ServesSystemTypes
        {
            get { return (QueryBuilderParameter<GatewaySystemTypeFilterExpressionInput>)_servesSystemTypes.Value; }
            set { _servesSystemTypes = new InputPropertyInfo { Name = "servesSystemTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayLifecycleStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewayLifecycleStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<GatewayLifecycleStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> StateTime
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_stateTime.Value; }
            set { _stateTime = new InputPropertyInfo { Name = "stateTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> UniqueName
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_uniqueName.Value; }
            set { _uniqueName = new InputPropertyInfo { Name = "uniqueName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_deviceId.Name != null) yield return _deviceId;
            if (_gatewayId.Name != null) yield return _gatewayId;
            if (_iccid.Name != null) yield return _iccid;
            if (_imei.Name != null) yield return _imei;
            if (_lanMac.Name != null) yield return _lanMac;
            if (_mappedModel.Name != null) yield return _mappedModel;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_physicalPlaceId.Name != null) yield return _physicalPlaceId;
            if (_serialNumber.Name != null) yield return _serialNumber;
            if (_servesPlaceIds.Name != null) yield return _servesPlaceIds;
            if (_servesSystemTypes.Name != null) yield return _servesSystemTypes;
            if (_state.Name != null) yield return _state;
            if (_stateTime.Name != null) yield return _stateTime;
            if (_uniqueName.Name != null) yield return _uniqueName;
        }
    }

    public class GatewayGenerateContainerSiDsRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo __;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> _
        {
            get { return (QueryBuilderParameter<string>)__.Value; }
            set { __ = new InputPropertyInfo { Name = "_", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (__.Name != null) yield return __;
        }
    }

    public class GatewayLifecycleStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayLifecycleStateInput?>))]
#endif
        public QueryBuilderParameter<GatewayLifecycleStateInput?> Eq
        {
            get { return (QueryBuilderParameter<GatewayLifecycleStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayLifecycleStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayLifecycleStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GatewayLifecycleStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GatewayModelFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayModelInput?>))]
#endif
        public QueryBuilderParameter<GatewayModelInput?> Eq
        {
            get { return (QueryBuilderParameter<GatewayModelInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayModelInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayModelInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GatewayModelInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GatewayNoteInput : IGraphQlInputObject
    {
        private InputPropertyInfo _note;
        private InputPropertyInfo _time;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Time
        {
            get { return (QueryBuilderParameter<object>)_time.Value; }
            set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_note.Name != null) yield return _note;
            if (_time.Name != null) yield return _time;
        }
    }

    public class GatewayRegisterContainerRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _availableCertificatePem;
        private InputPropertyInfo _signingCertificatePem;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> AvailableCertificatePem
        {
            get { return (QueryBuilderParameter<string>)_availableCertificatePem.Value; }
            set { _availableCertificatePem = new InputPropertyInfo { Name = "availableCertificatePem", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SigningCertificatePem
        {
            get { return (QueryBuilderParameter<string>)_signingCertificatePem.Value; }
            set { _signingCertificatePem = new InputPropertyInfo { Name = "signingCertificatePem", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_availableCertificatePem.Name != null) yield return _availableCertificatePem;
            if (_signingCertificatePem.Name != null) yield return _signingCertificatePem;
        }
    }

    public class GatewaySuspendRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _details;
        private InputPropertyInfo _gatewayId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySuspensionDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewaySuspensionDetailsInput> Details
        {
            get { return (QueryBuilderParameter<GatewaySuspensionDetailsInput>)_details.Value; }
            set { _details = new InputPropertyInfo { Name = "details", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GatewayId
        {
            get { return (QueryBuilderParameter<string>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_details.Name != null) yield return _details;
            if (_gatewayId.Name != null) yield return _gatewayId;
        }
    }

    public class GatewaySuspensionDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _notesCustomer;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _suspensionTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayNoteInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayNoteInput>> NotesCustomer
        {
            get { return (QueryBuilderParameter<ICollection<GatewayNoteInput>>)_notesCustomer.Value; }
            set { _notesCustomer = new InputPropertyInfo { Name = "notesCustomer", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySuspensionReasonInput?>))]
#endif
        public QueryBuilderParameter<GatewaySuspensionReasonInput?> Reason
        {
            get { return (QueryBuilderParameter<GatewaySuspensionReasonInput?>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "reason", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> SuspensionTime
        {
            get { return (QueryBuilderParameter<object>)_suspensionTime.Value; }
            set { _suspensionTime = new InputPropertyInfo { Name = "suspensionTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_notesCustomer.Name != null) yield return _notesCustomer;
            if (_reason.Name != null) yield return _reason;
            if (_suspensionTime.Name != null) yield return _suspensionTime;
        }
    }

    public class GatewaySystemTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeKeyInput?>))]
#endif
        public QueryBuilderParameter<SystemTypeKeyInput?> Eq
        {
            get { return (QueryBuilderParameter<SystemTypeKeyInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GrantCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _requestedAddress;
        private InputPropertyInfo _requests;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PostalAddressInput>))]
#endif
        public QueryBuilderParameter<PostalAddressInput> RequestedAddress
        {
            get { return (QueryBuilderParameter<PostalAddressInput>)_requestedAddress.Value; }
            set { _requestedAddress = new InputPropertyInfo { Name = "requestedAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantRequestInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantRequestInput>> Requests
        {
            get { return (QueryBuilderParameter<ICollection<GrantRequestInput>>)_requests.Value; }
            set { _requests = new InputPropertyInfo { Name = "requests", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestedAddress.Name != null) yield return _requestedAddress;
            if (_requests.Name != null) yield return _requests;
        }
    }

    public class GrantDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantorNote;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _maintainChain;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GrantorNote
        {
            get { return (QueryBuilderParameter<string>)_grantorNote.Value; }
            set { _grantorNote = new InputPropertyInfo { Name = "grantorNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MaintainChain
        {
            get { return (QueryBuilderParameter<bool?>)_maintainChain.Value; }
            set { _maintainChain = new InputPropertyInfo { Name = "maintainChain", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantorNote.Name != null) yield return _grantorNote;
            if (_ids.Name != null) yield return _ids;
            if (_maintainChain.Name != null) yield return _maintainChain;
        }
    }

    public class GrantFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _grantedIds;
        private InputPropertyInfo _grantedTypes;
        private InputPropertyInfo _granteeUserId;
        private InputPropertyInfo _grantorUserId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GrantedIds
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_grantedIds.Value; }
            set { _grantedIds = new InputPropertyInfo { Name = "grantedIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<SystemTypeFilterExpressionInput> GrantedTypes
        {
            get { return (QueryBuilderParameter<SystemTypeFilterExpressionInput>)_grantedTypes.Value; }
            set { _grantedTypes = new InputPropertyInfo { Name = "grantedTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GranteeUserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_granteeUserId.Value; }
            set { _granteeUserId = new InputPropertyInfo { Name = "granteeUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GrantorUserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_grantorUserId.Value; }
            set { _grantorUserId = new InputPropertyInfo { Name = "grantorUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GrantStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<GrantStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_grantedIds.Name != null) yield return _grantedIds;
            if (_grantedTypes.Name != null) yield return _grantedTypes;
            if (_granteeUserId.Name != null) yield return _granteeUserId;
            if (_grantorUserId.Name != null) yield return _grantorUserId;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_state.Name != null) yield return _state;
        }
    }

    public class GrantPlacesAndTypesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantedIds;
        private InputPropertyInfo _grantedSystemTypes;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> GrantedIds
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_grantedIds.Value; }
            set { _grantedIds = new InputPropertyInfo { Name = "grantedIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> GrantedSystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_grantedSystemTypes.Value; }
            set { _grantedSystemTypes = new InputPropertyInfo { Name = "grantedSystemTypes", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantedIds.Name != null) yield return _grantedIds;
            if (_grantedSystemTypes.Name != null) yield return _grantedSystemTypes;
        }
    }

    public class GrantRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _requestNote;
        private InputPropertyInfo _requestType;
        private InputPropertyInfo _systemTypes;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RequestNote
        {
            get { return (QueryBuilderParameter<string>)_requestNote.Value; }
            set { _requestNote = new InputPropertyInfo { Name = "requestNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantRequestTypeInput?>))]
#endif
        public QueryBuilderParameter<GrantRequestTypeInput?> RequestType
        {
            get { return (QueryBuilderParameter<GrantRequestTypeInput?>)_requestType.Value; }
            set { _requestType = new InputPropertyInfo { Name = "requestType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> SystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_systemTypes.Value; }
            set { _systemTypes = new InputPropertyInfo { Name = "systemTypes", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestNote.Name != null) yield return _requestNote;
            if (_requestType.Name != null) yield return _requestType;
            if (_systemTypes.Name != null) yield return _systemTypes;
        }
    }

    public class GrantStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantStateInput?>))]
#endif
        public QueryBuilderParameter<GrantStateInput?> Eq
        {
            get { return (QueryBuilderParameter<GrantStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GrantStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GrantUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantedPlacesAndTypes;
        private InputPropertyInfo _grantorNote;
        private InputPropertyInfo _id;
        private InputPropertyInfo _requests;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantPlacesAndTypesInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>> GrantedPlacesAndTypes
        {
            get { return (QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>>)_grantedPlacesAndTypes.Value; }
            set { _grantedPlacesAndTypes = new InputPropertyInfo { Name = "grantedPlacesAndTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GrantorNote
        {
            get { return (QueryBuilderParameter<string>)_grantorNote.Value; }
            set { _grantorNote = new InputPropertyInfo { Name = "grantorNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantRequestInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantRequestInput>> Requests
        {
            get { return (QueryBuilderParameter<ICollection<GrantRequestInput>>)_requests.Value; }
            set { _requests = new InputPropertyInfo { Name = "requests", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantStateInput?>))]
#endif
        public QueryBuilderParameter<GrantStateInput?> State
        {
            get { return (QueryBuilderParameter<GrantStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantedPlacesAndTypes.Name != null) yield return _grantedPlacesAndTypes;
            if (_grantorNote.Name != null) yield return _grantorNote;
            if (_id.Name != null) yield return _id;
            if (_requests.Name != null) yield return _requests;
            if (_state.Name != null) yield return _state;
        }
    }

    public class GranularInput : IGraphQlInputObject
    {
        private InputPropertyInfo _add;
        private InputPropertyInfo _remove;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Add
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_add.Value; }
            set { _add = new InputPropertyInfo { Name = "add", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Remove
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_remove.Value; }
            set { _remove = new InputPropertyInfo { Name = "remove", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_add.Name != null) yield return _add;
            if (_remove.Name != null) yield return _remove;
        }
    }

    public class Hmac256Input : IGraphQlInputObject
    {
        private InputPropertyInfo _signingKeys;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> SigningKeys
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_signingKeys.Value; }
            set { _signingKeys = new InputPropertyInfo { Name = "signingKeys", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_signingKeys.Name != null) yield return _signingKeys;
        }
    }

    public class HttpMethodWrapperInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<HttpMethodInput?>))]
#endif
        public QueryBuilderParameter<HttpMethodInput?> Value
        {
            get { return (QueryBuilderParameter<HttpMethodInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class HeartbeatFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;
        private InputPropertyInfo _unused;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<HeartbeatFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<HeartbeatFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<HeartbeatFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<HeartbeatFilter>))]
#endif
        public QueryBuilderParameter<HeartbeatFilter> Not
        {
            get { return (QueryBuilderParameter<HeartbeatFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<HeartbeatFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<HeartbeatFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<HeartbeatFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SimpleBoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<SimpleBoolFilterExpressionInput> Unused
        {
            get { return (QueryBuilderParameter<SimpleBoolFilterExpressionInput>)_unused.Value; }
            set { _unused = new InputPropertyInfo { Name = "unused", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
            if (_unused.Name != null) yield return _unused;
        }
    }

    public class IdFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class IpAllowlistMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _allowedIps;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AllowedIps
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_allowedIps.Value; }
            set { _allowedIps = new InputPropertyInfo { Name = "allowedIps", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_allowedIps.Name != null) yield return _allowedIps;
        }
    }

    public class IntFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _in;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Eq
        {
            get { return (QueryBuilderParameter<int?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Gt
        {
            get { return (QueryBuilderParameter<int?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Gte
        {
            get { return (QueryBuilderParameter<int?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
#endif
        public QueryBuilderParameter<ICollection<int>> In
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Lt
        {
            get { return (QueryBuilderParameter<int?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Lte
        {
            get { return (QueryBuilderParameter<int?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_in.Name != null) yield return _in;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
        }
    }

    public class InviteCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _invite;
        private InputPropertyInfo _skipSendEmail;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInput>))]
#endif
        public QueryBuilderParameter<InviteInput> Invite
        {
            get { return (QueryBuilderParameter<InviteInput>)_invite.Value; }
            set { _invite = new InputPropertyInfo { Name = "invite", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> SkipSendEmail
        {
            get { return (QueryBuilderParameter<bool?>)_skipSendEmail.Value; }
            set { _skipSendEmail = new InputPropertyInfo { Name = "skipSendEmail", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_invite.Name != null) yield return _invite;
            if (_skipSendEmail.Name != null) yield return _skipSendEmail;
        }
    }

    public class InviteDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class InviteFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _email;
        private InputPropertyInfo _inviteId;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> InviteId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_inviteId.Value; }
            set { _inviteId = new InputPropertyInfo { Name = "inviteId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteStatusFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<InviteStatusFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<InviteStatusFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_email.Name != null) yield return _email;
            if (_inviteId.Name != null) yield return _inviteId;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_state.Name != null) yield return _state;
        }
    }

    public class InviteInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _email;
        private InputPropertyInfo _expiration;
        private InputPropertyInfo _id;
        private InputPropertyInfo _inviterUserId;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _status;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Expiration
        {
            get { return (QueryBuilderParameter<object>)_expiration.Value; }
            set { _expiration = new InputPropertyInfo { Name = "expiration", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> InviterUserId
        {
            get { return (QueryBuilderParameter<string>)_inviterUserId.Value; }
            set { _inviterUserId = new InputPropertyInfo { Name = "inviterUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleInput>> Roles
        {
            get { return (QueryBuilderParameter<ICollection<RoleInput>>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteStatusInput?>))]
#endif
        public QueryBuilderParameter<InviteStatusInput?> Status
        {
            get { return (QueryBuilderParameter<InviteStatusInput?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_email.Name != null) yield return _email;
            if (_expiration.Name != null) yield return _expiration;
            if (_id.Name != null) yield return _id;
            if (_inviterUserId.Name != null) yield return _inviterUserId;
            if (_roles.Name != null) yield return _roles;
            if (_status.Name != null) yield return _status;
        }
    }

    public class InviteStatusFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteStatusInput?>))]
#endif
        public QueryBuilderParameter<InviteStatusInput?> Eq
        {
            get { return (QueryBuilderParameter<InviteStatusInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteStatusInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteStatusInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<InviteStatusInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class InviteUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _invite;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInput>))]
#endif
        public QueryBuilderParameter<InviteInput> Invite
        {
            get { return (QueryBuilderParameter<InviteInput>)_invite.Value; }
            set { _invite = new InputPropertyInfo { Name = "invite", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_invite.Name != null) yield return _invite;
        }
    }

    public class LeaseFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeaseFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<LeaseFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<LeaseFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LeaseFilter>))]
#endif
        public QueryBuilderParameter<LeaseFilter> Not
        {
            get { return (QueryBuilderParameter<LeaseFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeaseFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<LeaseFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<LeaseFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class LiveQueryCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _liveQuery;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LiveQueryInput>))]
#endif
        public QueryBuilderParameter<LiveQueryInput> LiveQuery
        {
            get { return (QueryBuilderParameter<LiveQueryInput>)_liveQuery.Value; }
            set { _liveQuery = new InputPropertyInfo { Name = "liveQuery", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_liveQuery.Name != null) yield return _liveQuery;
        }
    }

    public class LiveQueryDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class LiveQueryFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _status;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LiveQueryFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<LiveQueryFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<LiveQueryFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LiveQueryFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<LiveQueryFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<LiveQueryFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LiveQueryFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<LiveQueryFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<LiveQueryFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LiveQueryStatusFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<LiveQueryStatusFilterExpressionInput> Status
        {
            get { return (QueryBuilderParameter<LiveQueryStatusFilterExpressionInput>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_status.Name != null) yield return _status;
        }
    }

    public class LiveQueryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastErrorDate;
        private InputPropertyInfo _lastResultDate;
        private InputPropertyInfo _name;
        private InputPropertyInfo _query;
        private InputPropertyInfo _status;
        private InputPropertyInfo _variables;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> DateCreated
        {
            get { return (QueryBuilderParameter<object>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> DateUpdated
        {
            get { return (QueryBuilderParameter<object>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastErrorDate
        {
            get { return (QueryBuilderParameter<object>)_lastErrorDate.Value; }
            set { _lastErrorDate = new InputPropertyInfo { Name = "lastErrorDate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastResultDate
        {
            get { return (QueryBuilderParameter<object>)_lastResultDate.Value; }
            set { _lastResultDate = new InputPropertyInfo { Name = "lastResultDate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Query
        {
            get { return (QueryBuilderParameter<string>)_query.Value; }
            set { _query = new InputPropertyInfo { Name = "query", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LiveQueryStatusInput?>))]
#endif
        public QueryBuilderParameter<LiveQueryStatusInput?> Status
        {
            get { return (QueryBuilderParameter<LiveQueryStatusInput?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Variables
        {
            get { return (QueryBuilderParameter<object>)_variables.Value; }
            set { _variables = new InputPropertyInfo { Name = "variables", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_id.Name != null) yield return _id;
            if (_lastErrorDate.Name != null) yield return _lastErrorDate;
            if (_lastResultDate.Name != null) yield return _lastResultDate;
            if (_name.Name != null) yield return _name;
            if (_query.Name != null) yield return _query;
            if (_status.Name != null) yield return _status;
            if (_variables.Name != null) yield return _variables;
        }
    }

    public class LiveQueryPauseRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class LiveQueryResumeRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class LiveQueryStatusFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LiveQueryStatusInput?>))]
#endif
        public QueryBuilderParameter<LiveQueryStatusInput?> Eq
        {
            get { return (QueryBuilderParameter<LiveQueryStatusInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LiveQueryStatusInput>>))]
#endif
        public QueryBuilderParameter<ICollection<LiveQueryStatusInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<LiveQueryStatusInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class LiveQueryUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
        }
    }

    public class LiveQueryUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _liveQuery;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LiveQueryUpdateInput>))]
#endif
        public QueryBuilderParameter<LiveQueryUpdateInput> LiveQuery
        {
            get { return (QueryBuilderParameter<LiveQueryUpdateInput>)_liveQuery.Value; }
            set { _liveQuery = new InputPropertyInfo { Name = "liveQuery", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_liveQuery.Name != null) yield return _liveQuery;
        }
    }

    public class MtlsMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientCert;
        private InputPropertyInfo _issuerCert;
        private InputPropertyInfo _mappedCert;
        private InputPropertyInfo _matchCert;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> ClientCert
        {
            get { return (QueryBuilderParameter<CertificateInput>)_clientCert.Value; }
            set { _clientCert = new InputPropertyInfo { Name = "clientCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> IssuerCert
        {
            get { return (QueryBuilderParameter<CertificateInput>)_issuerCert.Value; }
            set { _issuerCert = new InputPropertyInfo { Name = "issuerCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MappedCert
        {
            get { return (QueryBuilderParameter<bool?>)_mappedCert.Value; }
            set { _mappedCert = new InputPropertyInfo { Name = "mappedCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertMatchInput>))]
#endif
        public QueryBuilderParameter<CertMatchInput> MatchCert
        {
            get { return (QueryBuilderParameter<CertMatchInput>)_matchCert.Value; }
            set { _matchCert = new InputPropertyInfo { Name = "matchCert", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientCert.Name != null) yield return _clientCert;
            if (_issuerCert.Name != null) yield return _issuerCert;
            if (_mappedCert.Name != null) yield return _mappedCert;
            if (_matchCert.Name != null) yield return _matchCert;
        }
    }

    public class MatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _ipAllowlist;
        private InputPropertyInfo _mtls;
        private InputPropertyInfo _noAuth;
        private InputPropertyInfo _regex;
        private InputPropertyInfo _signature;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IpAllowlistMatchInput>))]
#endif
        public QueryBuilderParameter<IpAllowlistMatchInput> IpAllowlist
        {
            get { return (QueryBuilderParameter<IpAllowlistMatchInput>)_ipAllowlist.Value; }
            set { _ipAllowlist = new InputPropertyInfo { Name = "ipAllowlist", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MtlsMatchInput>))]
#endif
        public QueryBuilderParameter<MtlsMatchInput> Mtls
        {
            get { return (QueryBuilderParameter<MtlsMatchInput>)_mtls.Value; }
            set { _mtls = new InputPropertyInfo { Name = "mtls", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> NoAuth
        {
            get { return (QueryBuilderParameter<bool?>)_noAuth.Value; }
            set { _noAuth = new InputPropertyInfo { Name = "noAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RegexMatchInput>))]
#endif
        public QueryBuilderParameter<RegexMatchInput> Regex
        {
            get { return (QueryBuilderParameter<RegexMatchInput>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "regex", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SignatureMatchInput>))]
#endif
        public QueryBuilderParameter<SignatureMatchInput> Signature
        {
            get { return (QueryBuilderParameter<SignatureMatchInput>)_signature.Value; }
            set { _signature = new InputPropertyInfo { Name = "signature", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueMatchInput>))]
#endif
        public QueryBuilderParameter<ValueMatchInput> Value
        {
            get { return (QueryBuilderParameter<ValueMatchInput>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_ipAllowlist.Name != null) yield return _ipAllowlist;
            if (_mtls.Name != null) yield return _mtls;
            if (_noAuth.Name != null) yield return _noAuth;
            if (_regex.Name != null) yield return _regex;
            if (_signature.Name != null) yield return _signature;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MetadataRecordInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MetadataUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _granular;
        private InputPropertyInfo _replace;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GranularInput>))]
#endif
        public QueryBuilderParameter<GranularInput> Granular
        {
            get { return (QueryBuilderParameter<GranularInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetadataValueInput>))]
#endif
        public QueryBuilderParameter<MetadataValueInput> Replace
        {
            get { return (QueryBuilderParameter<MetadataValueInput>)_replace.Value; }
            set { _replace = new InputPropertyInfo { Name = "replace", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_granular.Name != null) yield return _granular;
            if (_replace.Name != null) yield return _replace;
        }
    }

    public class MetadataValueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _values;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetadataRecordInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MetadataRecordInput>> Values
        {
            get { return (QueryBuilderParameter<ICollection<MetadataRecordInput>>)_values.Value; }
            set { _values = new InputPropertyInfo { Name = "values", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_values.Name != null) yield return _values;
        }
    }

    public class NodesMapping : IGraphQlInputObject
    {
        private InputPropertyInfo _childField;
        private InputPropertyInfo _parentField;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ChildField
        {
            get { return (QueryBuilderParameter<string>)_childField.Value; }
            set { _childField = new InputPropertyInfo { Name = "childField", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ParentField
        {
            get { return (QueryBuilderParameter<string>)_parentField.Value; }
            set { _parentField = new InputPropertyInfo { Name = "parentField", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_childField.Name != null) yield return _childField;
            if (_parentField.Name != null) yield return _parentField;
        }
    }

    public class OAuth2ClientCredentialsFlowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientId;
        private InputPropertyInfo _clientSecret;
        private InputPropertyInfo _headerPrefix;
        private InputPropertyInfo _scope;
        private InputPropertyInfo _tokenEndpoint;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ClientId
        {
            get { return (QueryBuilderParameter<string>)_clientId.Value; }
            set { _clientId = new InputPropertyInfo { Name = "clientId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ClientSecret
        {
            get { return (QueryBuilderParameter<string>)_clientSecret.Value; }
            set { _clientSecret = new InputPropertyInfo { Name = "clientSecret", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> HeaderPrefix
        {
            get { return (QueryBuilderParameter<string>)_headerPrefix.Value; }
            set { _headerPrefix = new InputPropertyInfo { Name = "headerPrefix", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Scope
        {
            get { return (QueryBuilderParameter<string>)_scope.Value; }
            set { _scope = new InputPropertyInfo { Name = "scope", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TokenEndpoint
        {
            get { return (QueryBuilderParameter<string>)_tokenEndpoint.Value; }
            set { _tokenEndpoint = new InputPropertyInfo { Name = "tokenEndpoint", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientId.Name != null) yield return _clientId;
            if (_clientSecret.Name != null) yield return _clientSecret;
            if (_headerPrefix.Name != null) yield return _headerPrefix;
            if (_scope.Name != null) yield return _scope;
            if (_tokenEndpoint.Name != null) yield return _tokenEndpoint;
        }
    }

    public class OrgAuthenticationChallengeGranularInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connection;
        private InputPropertyInfo _enabled;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Connection
        {
            get { return (QueryBuilderParameter<string>)_connection.Value; }
            set { _connection = new InputPropertyInfo { Name = "connection", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Enabled
        {
            get { return (QueryBuilderParameter<bool?>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connection.Name != null) yield return _connection;
            if (_enabled.Name != null) yield return _enabled;
        }
    }

    public class OrgAuthenticationChallengeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connection;
        private InputPropertyInfo _enabled;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Connection
        {
            get { return (QueryBuilderParameter<string>)_connection.Value; }
            set { _connection = new InputPropertyInfo { Name = "connection", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Enabled
        {
            get { return (QueryBuilderParameter<bool?>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connection.Name != null) yield return _connection;
            if (_enabled.Name != null) yield return _enabled;
        }
    }

    public class OrgGranularInput : IGraphQlInputObject
    {
        private InputPropertyInfo _authenticationChallenge;
        private InputPropertyInfo _id;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _name;
        private InputPropertyInfo _provisioningState;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stripeCustomerId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgAuthenticationChallengeGranularInput>))]
#endif
        public QueryBuilderParameter<OrgAuthenticationChallengeGranularInput> AuthenticationChallenge
        {
            get { return (QueryBuilderParameter<OrgAuthenticationChallengeGranularInput>)_authenticationChallenge.Value; }
            set { _authenticationChallenge = new InputPropertyInfo { Name = "authenticationChallenge", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetadataUpdateInput>))]
#endif
        public QueryBuilderParameter<MetadataUpdateInput> Metadata
        {
            get { return (QueryBuilderParameter<MetadataUpdateInput>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgProvisioningStateWrapperInput>))]
#endif
        public QueryBuilderParameter<OrgProvisioningStateWrapperInput> ProvisioningState
        {
            get { return (QueryBuilderParameter<OrgProvisioningStateWrapperInput>)_provisioningState.Value; }
            set { _provisioningState = new InputPropertyInfo { Name = "provisioningState", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateWrapperInput>))]
#endif
        public QueryBuilderParameter<OrgStateWrapperInput> State
        {
            get { return (QueryBuilderParameter<OrgStateWrapperInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StripeCustomerId
        {
            get { return (QueryBuilderParameter<string>)_stripeCustomerId.Value; }
            set { _stripeCustomerId = new InputPropertyInfo { Name = "stripeCustomerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_authenticationChallenge.Name != null) yield return _authenticationChallenge;
            if (_id.Name != null) yield return _id;
            if (_metadata.Name != null) yield return _metadata;
            if (_name.Name != null) yield return _name;
            if (_provisioningState.Name != null) yield return _provisioningState;
            if (_state.Name != null) yield return _state;
            if (_stripeCustomerId.Name != null) yield return _stripeCustomerId;
        }
    }

    public class OrgInput : IGraphQlInputObject
    {
        private InputPropertyInfo _authenticationChallenge;
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _name;
        private InputPropertyInfo _provisioningState;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stripeCustomerId;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgAuthenticationChallengeInput>))]
#endif
        public QueryBuilderParameter<OrgAuthenticationChallengeInput> AuthenticationChallenge
        {
            get { return (QueryBuilderParameter<OrgAuthenticationChallengeInput>)_authenticationChallenge.Value; }
            set { _authenticationChallenge = new InputPropertyInfo { Name = "authenticationChallenge", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetadataRecordInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MetadataRecordInput>> Metadata
        {
            get { return (QueryBuilderParameter<ICollection<MetadataRecordInput>>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgProvisioningStateInput?>))]
#endif
        public QueryBuilderParameter<OrgProvisioningStateInput?> ProvisioningState
        {
            get { return (QueryBuilderParameter<OrgProvisioningStateInput?>)_provisioningState.Value; }
            set { _provisioningState = new InputPropertyInfo { Name = "provisioningState", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateInput?>))]
#endif
        public QueryBuilderParameter<OrgStateInput?> State
        {
            get { return (QueryBuilderParameter<OrgStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StripeCustomerId
        {
            get { return (QueryBuilderParameter<string>)_stripeCustomerId.Value; }
            set { _stripeCustomerId = new InputPropertyInfo { Name = "stripeCustomerId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_authenticationChallenge.Name != null) yield return _authenticationChallenge;
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_metadata.Name != null) yield return _metadata;
            if (_name.Name != null) yield return _name;
            if (_provisioningState.Name != null) yield return _provisioningState;
            if (_state.Name != null) yield return _state;
            if (_stripeCustomerId.Name != null) yield return _stripeCustomerId;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class OrgProvisioningStateWrapperInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgProvisioningStateInput?>))]
#endif
        public QueryBuilderParameter<OrgProvisioningStateInput?> Value
        {
            get { return (QueryBuilderParameter<OrgProvisioningStateInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class OrgRemoveOrgUserAsyncRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _orgUser;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgUserInput>))]
#endif
        public QueryBuilderParameter<OrgUserInput> OrgUser
        {
            get { return (QueryBuilderParameter<OrgUserInput>)_orgUser.Value; }
            set { _orgUser = new InputPropertyInfo { Name = "orgUser", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_orgUser.Name != null) yield return _orgUser;
        }
    }

    public class OrgRoleGroupCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _orgRoleGroup;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupInput>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupInput> OrgRoleGroup
        {
            get { return (QueryBuilderParameter<OrgRoleGroupInput>)_orgRoleGroup.Value; }
            set { _orgRoleGroup = new InputPropertyInfo { Name = "orgRoleGroup", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_orgRoleGroup.Name != null) yield return _orgRoleGroup;
        }
    }

    public class OrgRoleGroupDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class OrgRoleGroupFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _description;
        private InputPropertyInfo _isSynced;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgRoleGroupFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<BoolFilterExpressionInput> IsSynced
        {
            get { return (QueryBuilderParameter<BoolFilterExpressionInput>)_isSynced.Value; }
            set { _isSynced = new InputPropertyInfo { Name = "isSynced", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgRoleGroupFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgRoleGroupFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OrgRoleGroupFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Roles
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<OrgRoleGroupStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_description.Name != null) yield return _description;
            if (_isSynced.Name != null) yield return _isSynced;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_roles.Name != null) yield return _roles;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgRoleGroupInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _isSynced;
        private InputPropertyInfo _name;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> IsSynced
        {
            get { return (QueryBuilderParameter<bool?>)_isSynced.Value; }
            set { _isSynced = new InputPropertyInfo { Name = "isSynced", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Roles
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupStateInput?>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupStateInput?> State
        {
            get { return (QueryBuilderParameter<OrgRoleGroupStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_isSynced.Name != null) yield return _isSynced;
            if (_name.Name != null) yield return _name;
            if (_roles.Name != null) yield return _roles;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgRoleGroupStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupStateInput?>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupStateInput?> Eq
        {
            get { return (QueryBuilderParameter<OrgRoleGroupStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgRoleGroupStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgRoleGroupStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<OrgRoleGroupStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class OrgRoleGroupStateValueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupStateInput?>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupStateInput?> Value
        {
            get { return (QueryBuilderParameter<OrgRoleGroupStateInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class OrgRoleGroupUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayUpdateInput>))]
#endif
        public QueryBuilderParameter<StringArrayUpdateInput> Roles
        {
            get { return (QueryBuilderParameter<StringArrayUpdateInput>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupStateValueInput>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupStateValueInput> State
        {
            get { return (QueryBuilderParameter<OrgRoleGroupStateValueInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_roles.Name != null) yield return _roles;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgRoleGroupUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _granular;
        private InputPropertyInfo _replace;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupUpdateInput>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupUpdateInput> Granular
        {
            get { return (QueryBuilderParameter<OrgRoleGroupUpdateInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgRoleGroupInput>))]
#endif
        public QueryBuilderParameter<OrgRoleGroupInput> Replace
        {
            get { return (QueryBuilderParameter<OrgRoleGroupInput>)_replace.Value; }
            set { _replace = new InputPropertyInfo { Name = "replace", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_granular.Name != null) yield return _granular;
            if (_replace.Name != null) yield return _replace;
        }
    }

    public class OrgServiceAccountCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _orgServiceAccount;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountInput> OrgServiceAccount
        {
            get { return (QueryBuilderParameter<OrgServiceAccountInput>)_orgServiceAccount.Value; }
            set { _orgServiceAccount = new InputPropertyInfo { Name = "orgServiceAccount", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_orgServiceAccount.Name != null) yield return _orgServiceAccount;
        }
    }

    public class OrgServiceAccountCreateSecretRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _expirationUnix;
        private InputPropertyInfo _secretName;
        private InputPropertyInfo _serviceAccountName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> ExpirationUnix
        {
            get { return (QueryBuilderParameter<object>)_expirationUnix.Value; }
            set { _expirationUnix = new InputPropertyInfo { Name = "expirationUnix", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SecretName
        {
            get { return (QueryBuilderParameter<string>)_secretName.Value; }
            set { _secretName = new InputPropertyInfo { Name = "secretName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ServiceAccountName
        {
            get { return (QueryBuilderParameter<string>)_serviceAccountName.Value; }
            set { _serviceAccountName = new InputPropertyInfo { Name = "serviceAccountName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_expirationUnix.Name != null) yield return _expirationUnix;
            if (_secretName.Name != null) yield return _secretName;
            if (_serviceAccountName.Name != null) yield return _serviceAccountName;
        }
    }

    public class OrgServiceAccountCustomRoleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _permissions;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Permissions
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_permissions.Name != null) yield return _permissions;
        }
    }

    public class OrgServiceAccountCustomRoleUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _permissions;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayUpdateInput>))]
#endif
        public QueryBuilderParameter<StringArrayUpdateInput> Permissions
        {
            get { return (QueryBuilderParameter<StringArrayUpdateInput>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_permissions.Name != null) yield return _permissions;
        }
    }

    public class OrgServiceAccountDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class OrgServiceAccountDeleteSecretsRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _all;
        private InputPropertyInfo _granular;
        private InputPropertyInfo _serviceAccountName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountOneOfAllInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountOneOfAllInput> All
        {
            get { return (QueryBuilderParameter<OrgServiceAccountOneOfAllInput>)_all.Value; }
            set { _all = new InputPropertyInfo { Name = "all", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountOneOfSecretsGranularInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountOneOfSecretsGranularInput> Granular
        {
            get { return (QueryBuilderParameter<OrgServiceAccountOneOfSecretsGranularInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ServiceAccountName
        {
            get { return (QueryBuilderParameter<string>)_serviceAccountName.Value; }
            set { _serviceAccountName = new InputPropertyInfo { Name = "serviceAccountName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_all.Name != null) yield return _all;
            if (_granular.Name != null) yield return _granular;
            if (_serviceAccountName.Name != null) yield return _serviceAccountName;
        }
    }

    public class OrgServiceAccountFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _description;
        private InputPropertyInfo _isSynced;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _orgRoleGroups;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgServiceAccountFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<BoolFilterExpressionInput> IsSynced
        {
            get { return (QueryBuilderParameter<BoolFilterExpressionInput>)_isSynced.Value; }
            set { _isSynced = new InputPropertyInfo { Name = "isSynced", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgServiceAccountFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgServiceAccountFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OrgServiceAccountFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> OrgRoleGroups
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_orgRoleGroups.Value; }
            set { _orgRoleGroups = new InputPropertyInfo { Name = "orgRoleGroups", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<OrgServiceAccountStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_description.Name != null) yield return _description;
            if (_isSynced.Name != null) yield return _isSynced;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_orgRoleGroups.Name != null) yield return _orgRoleGroups;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgServiceAccountInput : IGraphQlInputObject
    {
        private InputPropertyInfo _customRole;
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _orgRoleGroups;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountCustomRoleInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountCustomRoleInput> CustomRole
        {
            get { return (QueryBuilderParameter<OrgServiceAccountCustomRoleInput>)_customRole.Value; }
            set { _customRole = new InputPropertyInfo { Name = "customRole", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> OrgRoleGroups
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_orgRoleGroups.Value; }
            set { _orgRoleGroups = new InputPropertyInfo { Name = "orgRoleGroups", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountStateInput?>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountStateInput?> State
        {
            get { return (QueryBuilderParameter<OrgServiceAccountStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_customRole.Name != null) yield return _customRole;
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_orgRoleGroups.Name != null) yield return _orgRoleGroups;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgServiceAccountOneOfAllInput : IGraphQlInputObject
    {
        private InputPropertyInfo __;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> _
        {
            get { return (QueryBuilderParameter<string>)__.Value; }
            set { __ = new InputPropertyInfo { Name = "_", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (__.Name != null) yield return __;
        }
    }

    public class OrgServiceAccountOneOfSecretsGranularInput : IGraphQlInputObject
    {
        private InputPropertyInfo _secretNames;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> SecretNames
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_secretNames.Value; }
            set { _secretNames = new InputPropertyInfo { Name = "secretNames", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_secretNames.Name != null) yield return _secretNames;
        }
    }

    public class OrgServiceAccountStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountStateInput?>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountStateInput?> Eq
        {
            get { return (QueryBuilderParameter<OrgServiceAccountStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgServiceAccountStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgServiceAccountStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<OrgServiceAccountStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class OrgServiceAccountStateValueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountStateInput?>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountStateInput?> Value
        {
            get { return (QueryBuilderParameter<OrgServiceAccountStateInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class OrgServiceAccountUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _customRole;
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _orgRoleGroups;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountCustomRoleUpdateInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountCustomRoleUpdateInput> CustomRole
        {
            get { return (QueryBuilderParameter<OrgServiceAccountCustomRoleUpdateInput>)_customRole.Value; }
            set { _customRole = new InputPropertyInfo { Name = "customRole", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayUpdateInput>))]
#endif
        public QueryBuilderParameter<StringArrayUpdateInput> OrgRoleGroups
        {
            get { return (QueryBuilderParameter<StringArrayUpdateInput>)_orgRoleGroups.Value; }
            set { _orgRoleGroups = new InputPropertyInfo { Name = "orgRoleGroups", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountStateValueInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountStateValueInput> State
        {
            get { return (QueryBuilderParameter<OrgServiceAccountStateValueInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_customRole.Name != null) yield return _customRole;
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_orgRoleGroups.Name != null) yield return _orgRoleGroups;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgServiceAccountUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _granular;
        private InputPropertyInfo _replace;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountUpdateInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountUpdateInput> Granular
        {
            get { return (QueryBuilderParameter<OrgServiceAccountUpdateInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgServiceAccountInput>))]
#endif
        public QueryBuilderParameter<OrgServiceAccountInput> Replace
        {
            get { return (QueryBuilderParameter<OrgServiceAccountInput>)_replace.Value; }
            set { _replace = new InputPropertyInfo { Name = "replace", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_granular.Name != null) yield return _granular;
            if (_replace.Name != null) yield return _replace;
        }
    }

    public class OrgStateWrapperInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateInput?>))]
#endif
        public QueryBuilderParameter<OrgStateInput?> Value
        {
            get { return (QueryBuilderParameter<OrgStateInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class OrgUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _org;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgInput>))]
#endif
        public QueryBuilderParameter<OrgInput> Org
        {
            get { return (QueryBuilderParameter<OrgInput>)_org.Value; }
            set { _org = new InputPropertyInfo { Name = "org", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_org.Name != null) yield return _org;
        }
    }

    public class OrgUpdateV2RequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _org;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgGranularInput>))]
#endif
        public QueryBuilderParameter<OrgGranularInput> Org
        {
            get { return (QueryBuilderParameter<OrgGranularInput>)_org.Value; }
            set { _org = new InputPropertyInfo { Name = "org", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_org.Name != null) yield return _org;
        }
    }

    public class OrgUserInput : IGraphQlInputObject
    {
        private InputPropertyInfo _orgId;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> OrgId
        {
            get { return (QueryBuilderParameter<string>)_orgId.Value; }
            set { _orgId = new InputPropertyInfo { Name = "orgId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_orgId.Name != null) yield return _orgId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class OrganizationFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrganizationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<OrganizationFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<OrganizationFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrganizationFilter>))]
#endif
        public QueryBuilderParameter<OrganizationFilter> Not
        {
            get { return (QueryBuilderParameter<OrganizationFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrganizationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<OrganizationFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OrganizationFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class PeopleGroupFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PeopleGroupFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PeopleGroupFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PeopleGroupFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PeopleGroupFilter>))]
#endif
        public QueryBuilderParameter<PeopleGroupFilter> Not
        {
            get { return (QueryBuilderParameter<PeopleGroupFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PeopleGroupFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PeopleGroupFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PeopleGroupFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class PermissionFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PermissionInput?>))]
#endif
        public QueryBuilderParameter<PermissionInput?> Eq
        {
            get { return (QueryBuilderParameter<PermissionInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PermissionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PermissionInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<PermissionInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class PersonFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _email;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PersonFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonFilter>))]
#endif
        public QueryBuilderParameter<PersonFilter> Not
        {
            get { return (QueryBuilderParameter<PersonFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PersonFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_email.Name != null) yield return _email;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class PersonalAccessTokenCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _pat;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonalAccessTokenInput>))]
#endif
        public QueryBuilderParameter<PersonalAccessTokenInput> Pat
        {
            get { return (QueryBuilderParameter<PersonalAccessTokenInput>)_pat.Value; }
            set { _pat = new InputPropertyInfo { Name = "pat", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_pat.Name != null) yield return _pat;
        }
    }

    public class PersonalAccessTokenDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class PersonalAccessTokenFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PermissionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<PermissionFilterExpressionInput> Permissions
        {
            get { return (QueryBuilderParameter<PermissionFilterExpressionInput>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_permissions.Name != null) yield return _permissions;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class PersonalAccessTokenGetAccessTokenFromPatRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _personalAccessToken;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PersonalAccessToken
        {
            get { return (QueryBuilderParameter<string>)_personalAccessToken.Value; }
            set { _personalAccessToken = new InputPropertyInfo { Name = "personalAccessToken", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_personalAccessToken.Name != null) yield return _personalAccessToken;
        }
    }

    public class PersonalAccessTokenInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _integrityId;
        private InputPropertyInfo _lastExchanged;
        private InputPropertyInfo _name;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> IntegrityId
        {
            get { return (QueryBuilderParameter<string>)_integrityId.Value; }
            set { _integrityId = new InputPropertyInfo { Name = "integrityId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastExchanged
        {
            get { return (QueryBuilderParameter<object>)_lastExchanged.Value; }
            set { _lastExchanged = new InputPropertyInfo { Name = "lastExchanged", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PermissionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PermissionInput>> Permissions
        {
            get { return (QueryBuilderParameter<ICollection<PermissionInput>>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_integrityId.Name != null) yield return _integrityId;
            if (_lastExchanged.Name != null) yield return _lastExchanged;
            if (_name.Name != null) yield return _name;
            if (_permissions.Name != null) yield return _permissions;
            if (_updated.Name != null) yield return _updated;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class PersonalAccessTokenUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _pat;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonalAccessTokenInput>))]
#endif
        public QueryBuilderParameter<PersonalAccessTokenInput> Pat
        {
            get { return (QueryBuilderParameter<PersonalAccessTokenInput>)_pat.Value; }
            set { _pat = new InputPropertyInfo { Name = "pat", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_pat.Name != null) yield return _pat;
        }
    }

    public class PlaceFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PlaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PlaceFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PlaceFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PlaceFilter>))]
#endif
        public QueryBuilderParameter<PlaceFilter> Not
        {
            get { return (QueryBuilderParameter<PlaceFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PlaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PlaceFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PlaceFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class PointFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;
        private InputPropertyInfo _unused;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PointFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PointFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PointFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PointFilter>))]
#endif
        public QueryBuilderParameter<PointFilter> Not
        {
            get { return (QueryBuilderParameter<PointFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PointFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PointFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PointFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SimpleBoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<SimpleBoolFilterExpressionInput> Unused
        {
            get { return (QueryBuilderParameter<SimpleBoolFilterExpressionInput>)_unused.Value; }
            set { _unused = new InputPropertyInfo { Name = "unused", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
            if (_unused.Name != null) yield return _unused;
        }
    }

    public class PostalAddressInput : IGraphQlInputObject
    {
        private InputPropertyInfo _addressLines;
        private InputPropertyInfo _administrativeArea;
        private InputPropertyInfo _languageCode;
        private InputPropertyInfo _locality;
        private InputPropertyInfo _organization;
        private InputPropertyInfo _postalCode;
        private InputPropertyInfo _recipients;
        private InputPropertyInfo _regionCode;
        private InputPropertyInfo _revision;
        private InputPropertyInfo _sortingCode;
        private InputPropertyInfo _sublocality;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AddressLines
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_addressLines.Value; }
            set { _addressLines = new InputPropertyInfo { Name = "addressLines", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> AdministrativeArea
        {
            get { return (QueryBuilderParameter<string>)_administrativeArea.Value; }
            set { _administrativeArea = new InputPropertyInfo { Name = "administrativeArea", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LanguageCode
        {
            get { return (QueryBuilderParameter<string>)_languageCode.Value; }
            set { _languageCode = new InputPropertyInfo { Name = "languageCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Locality
        {
            get { return (QueryBuilderParameter<string>)_locality.Value; }
            set { _locality = new InputPropertyInfo { Name = "locality", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Organization
        {
            get { return (QueryBuilderParameter<string>)_organization.Value; }
            set { _organization = new InputPropertyInfo { Name = "organization", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PostalCode
        {
            get { return (QueryBuilderParameter<string>)_postalCode.Value; }
            set { _postalCode = new InputPropertyInfo { Name = "postalCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Recipients
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_recipients.Value; }
            set { _recipients = new InputPropertyInfo { Name = "recipients", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RegionCode
        {
            get { return (QueryBuilderParameter<string>)_regionCode.Value; }
            set { _regionCode = new InputPropertyInfo { Name = "regionCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Revision
        {
            get { return (QueryBuilderParameter<int?>)_revision.Value; }
            set { _revision = new InputPropertyInfo { Name = "revision", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SortingCode
        {
            get { return (QueryBuilderParameter<string>)_sortingCode.Value; }
            set { _sortingCode = new InputPropertyInfo { Name = "sortingCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Sublocality
        {
            get { return (QueryBuilderParameter<string>)_sublocality.Value; }
            set { _sublocality = new InputPropertyInfo { Name = "sublocality", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_addressLines.Name != null) yield return _addressLines;
            if (_administrativeArea.Name != null) yield return _administrativeArea;
            if (_languageCode.Name != null) yield return _languageCode;
            if (_locality.Name != null) yield return _locality;
            if (_organization.Name != null) yield return _organization;
            if (_postalCode.Name != null) yield return _postalCode;
            if (_recipients.Name != null) yield return _recipients;
            if (_regionCode.Name != null) yield return _regionCode;
            if (_revision.Name != null) yield return _revision;
            if (_sortingCode.Name != null) yield return _sortingCode;
            if (_sublocality.Name != null) yield return _sublocality;
        }
    }

    public class RegexMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _location;
        private InputPropertyInfo _regex;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Regex
        {
            get { return (QueryBuilderParameter<string>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "regex", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_location.Name != null) yield return _location;
            if (_regex.Name != null) yield return _regex;
        }
    }

    public class RoleManagerFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _description;
        private InputPropertyInfo _isSynced;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _roleType;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleManagerFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleManagerFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<RoleManagerFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<BoolFilterExpressionInput> IsSynced
        {
            get { return (QueryBuilderParameter<BoolFilterExpressionInput>)_isSynced.Value; }
            set { _isSynced = new InputPropertyInfo { Name = "isSynced", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleManagerFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleManagerFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<RoleManagerFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleManagerFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleManagerFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<RoleManagerFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Permissions
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleManagerRoleTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<RoleManagerRoleTypeFilterExpressionInput> RoleType
        {
            get { return (QueryBuilderParameter<RoleManagerRoleTypeFilterExpressionInput>)_roleType.Value; }
            set { _roleType = new InputPropertyInfo { Name = "roleType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleManagerRoleStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<RoleManagerRoleStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<RoleManagerRoleStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_description.Name != null) yield return _description;
            if (_isSynced.Name != null) yield return _isSynced;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_permissions.Name != null) yield return _permissions;
            if (_roleType.Name != null) yield return _roleType;
            if (_state.Name != null) yield return _state;
        }
    }

    public class RoleManagerRoleStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleManagerRoleStateInput?>))]
#endif
        public QueryBuilderParameter<RoleManagerRoleStateInput?> Eq
        {
            get { return (QueryBuilderParameter<RoleManagerRoleStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleManagerRoleStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleManagerRoleStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<RoleManagerRoleStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class RoleManagerRoleTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleManagerRoleTypeInput?>))]
#endif
        public QueryBuilderParameter<RoleManagerRoleTypeInput?> Eq
        {
            get { return (QueryBuilderParameter<RoleManagerRoleTypeInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleManagerRoleTypeInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleManagerRoleTypeInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<RoleManagerRoleTypeInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class SignatureMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _asymmetricKey;
        private InputPropertyInfo _location;
        private InputPropertyInfo _symmetricKey;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> AsymmetricKey
        {
            get { return (QueryBuilderParameter<CertificateInput>)_asymmetricKey.Value; }
            set { _asymmetricKey = new InputPropertyInfo { Name = "asymmetricKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SymmetricKey
        {
            get { return (QueryBuilderParameter<string>)_symmetricKey.Value; }
            set { _symmetricKey = new InputPropertyInfo { Name = "symmetricKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SignatureTypeInput?>))]
#endif
        public QueryBuilderParameter<SignatureTypeInput?> Type
        {
            get { return (QueryBuilderParameter<SignatureTypeInput?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_asymmetricKey.Name != null) yield return _asymmetricKey;
            if (_location.Name != null) yield return _location;
            if (_symmetricKey.Name != null) yield return _symmetricKey;
            if (_type.Name != null) yield return _type;
        }
    }

    public class SimpleBoolFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _ne;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Eq
        {
            get { return (QueryBuilderParameter<bool?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Ne
        {
            get { return (QueryBuilderParameter<bool?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_ne.Name != null) yield return _ne;
        }
    }

    public class SiteCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _site;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteMutationInput>))]
#endif
        public QueryBuilderParameter<SiteMutationInput> Site
        {
            get { return (QueryBuilderParameter<SiteMutationInput>)_site.Value; }
            set { _site = new InputPropertyInfo { Name = "site", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_site.Name != null) yield return _site;
        }
    }

    public class SiteDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class SiteFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SiteFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SiteFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<SiteFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteFilter>))]
#endif
        public QueryBuilderParameter<SiteFilter> Not
        {
            get { return (QueryBuilderParameter<SiteFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SiteFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SiteFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SiteFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class SiteMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
        }
    }

    public class SiteUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _site;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteMutationInput>))]
#endif
        public QueryBuilderParameter<SiteMutationInput> Site
        {
            get { return (QueryBuilderParameter<SiteMutationInput>)_site.Value; }
            set { _site = new InputPropertyInfo { Name = "site", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_site.Name != null) yield return _site;
        }
    }

    public class SpaceCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _space;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceMutationInput>))]
#endif
        public QueryBuilderParameter<SpaceMutationInput> Space
        {
            get { return (QueryBuilderParameter<SpaceMutationInput>)_space.Value; }
            set { _space = new InputPropertyInfo { Name = "space", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_space.Name != null) yield return _space;
        }
    }

    public class SpaceDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class SpaceFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<SpaceFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceFilter>))]
#endif
        public QueryBuilderParameter<SpaceFilter> Not
        {
            get { return (QueryBuilderParameter<SpaceFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SpaceFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class SpaceMappingSuggestEquivalentSpacesRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _buildingId;
        private InputPropertyInfo _spaces;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BuildingId
        {
            get { return (QueryBuilderParameter<string>)_buildingId.Value; }
            set { _buildingId = new InputPropertyInfo { Name = "buildingId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceMutationInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceMutationInput>> Spaces
        {
            get { return (QueryBuilderParameter<ICollection<SpaceMutationInput>>)_spaces.Value; }
            set { _spaces = new InputPropertyInfo { Name = "spaces", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_buildingId.Name != null) yield return _buildingId;
            if (_spaces.Name != null) yield return _spaces;
        }
    }

    public class SpaceMappingSuggestFloorLevelsRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _buildingId;
        private InputPropertyInfo _groundFloorLevel;
        private InputPropertyInfo _spaces;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BuildingId
        {
            get { return (QueryBuilderParameter<string>)_buildingId.Value; }
            set { _buildingId = new InputPropertyInfo { Name = "buildingId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> GroundFloorLevel
        {
            get { return (QueryBuilderParameter<int?>)_groundFloorLevel.Value; }
            set { _groundFloorLevel = new InputPropertyInfo { Name = "groundFloorLevel", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceMutationInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceMutationInput>> Spaces
        {
            get { return (QueryBuilderParameter<ICollection<SpaceMutationInput>>)_spaces.Value; }
            set { _spaces = new InputPropertyInfo { Name = "spaces", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_buildingId.Name != null) yield return _buildingId;
            if (_groundFloorLevel.Name != null) yield return _groundFloorLevel;
            if (_spaces.Name != null) yield return _spaces;
        }
    }

    public class SpaceMappingSuggestSpaceCodesRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _buildingId;
        private InputPropertyInfo _spaces;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BuildingId
        {
            get { return (QueryBuilderParameter<string>)_buildingId.Value; }
            set { _buildingId = new InputPropertyInfo { Name = "buildingId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceMutationInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceMutationInput>> Spaces
        {
            get { return (QueryBuilderParameter<ICollection<SpaceMutationInput>>)_spaces.Value; }
            set { _spaces = new InputPropertyInfo { Name = "spaces", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_buildingId.Name != null) yield return _buildingId;
            if (_spaces.Name != null) yield return _spaces;
        }
    }

    public class SpaceMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _floorId;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _parentSpaceId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> ExactType
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> FloorId
        {
            get { return (QueryBuilderParameter<string>)_floorId.Value; }
            set { _floorId = new InputPropertyInfo { Name = "floorId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ParentSpaceId
        {
            get { return (QueryBuilderParameter<string>)_parentSpaceId.Value; }
            set { _parentSpaceId = new InputPropertyInfo { Name = "parentSpaceId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_exactType.Name != null) yield return _exactType;
            if (_floorId.Name != null) yield return _floorId;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_parentSpaceId.Name != null) yield return _parentSpaceId;
        }
    }

    public class SpaceUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _space;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceMutationInput>))]
#endif
        public QueryBuilderParameter<SpaceMutationInput> Space
        {
            get { return (QueryBuilderParameter<SpaceMutationInput>)_space.Value; }
            set { _space = new InputPropertyInfo { Name = "space", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_space.Name != null) yield return _space;
        }
    }

    public class StringArrayFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _ne;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Ne
        {
            get { return (QueryBuilderParameter<string>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
            if (_ne.Name != null) yield return _ne;
        }
    }

    public class StringArrayUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _granular;
        private InputPropertyInfo _replace;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GranularInput>))]
#endif
        public QueryBuilderParameter<GranularInput> Granular
        {
            get { return (QueryBuilderParameter<GranularInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayValueInput>))]
#endif
        public QueryBuilderParameter<StringArrayValueInput> Replace
        {
            get { return (QueryBuilderParameter<StringArrayValueInput>)_replace.Value; }
            set { _replace = new InputPropertyInfo { Name = "replace", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_granular.Name != null) yield return _granular;
            if (_replace.Name != null) yield return _replace;
        }
    }

    public class StringArrayValueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _values;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Values
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_values.Value; }
            set { _values = new InputPropertyInfo { Name = "values", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_values.Name != null) yield return _values;
        }
    }

    public class StringFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contains;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _ne;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Contains
        {
            get { return (QueryBuilderParameter<string>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Ne
        {
            get { return (QueryBuilderParameter<string>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contains.Name != null) yield return _contains;
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
            if (_ne.Name != null) yield return _ne;
        }
    }

    public class SystemTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeKeyInput?>))]
#endif
        public QueryBuilderParameter<SystemTypeKeyInput?> Eq
        {
            get { return (QueryBuilderParameter<SystemTypeKeyInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class ThingFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _isVirtual;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ThingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ThingFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<ThingFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SimpleBoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<SimpleBoolFilterExpressionInput> IsVirtual
        {
            get { return (QueryBuilderParameter<SimpleBoolFilterExpressionInput>)_isVirtual.Value; }
            set { _isVirtual = new InputPropertyInfo { Name = "isVirtual", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ThingFilter>))]
#endif
        public QueryBuilderParameter<ThingFilter> Not
        {
            get { return (QueryBuilderParameter<ThingFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ThingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ThingFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ThingFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_isVirtual.Name != null) yield return _isVirtual;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class TimestampFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Eq
        {
            get { return (QueryBuilderParameter<object>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gt
        {
            get { return (QueryBuilderParameter<object>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gte
        {
            get { return (QueryBuilderParameter<object>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lt
        {
            get { return (QueryBuilderParameter<object>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lte
        {
            get { return (QueryBuilderParameter<object>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
        }
    }

    public class UnitFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class UserAssignRoleRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _role;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleInput?>))]
#endif
        public QueryBuilderParameter<RoleInput?> Role
        {
            get { return (QueryBuilderParameter<RoleInput?>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_role.Name != null) yield return _role;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _skipInviteEmail;
        private InputPropertyInfo _temporaryPassword;
        private InputPropertyInfo _user;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> SkipInviteEmail
        {
            get { return (QueryBuilderParameter<bool?>)_skipInviteEmail.Value; }
            set { _skipInviteEmail = new InputPropertyInfo { Name = "skipInviteEmail", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TemporaryPassword
        {
            get { return (QueryBuilderParameter<string>)_temporaryPassword.Value; }
            set { _temporaryPassword = new InputPropertyInfo { Name = "temporaryPassword", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserInput>))]
#endif
        public QueryBuilderParameter<UserInput> User
        {
            get { return (QueryBuilderParameter<UserInput>)_user.Value; }
            set { _user = new InputPropertyInfo { Name = "user", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_skipInviteEmail.Name != null) yield return _skipInviteEmail;
            if (_temporaryPassword.Name != null) yield return _temporaryPassword;
            if (_user.Name != null) yield return _user;
        }
    }

    public class UserFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _name;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_name.Name != null) yield return _name;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _email;
        private InputPropertyInfo _emailVerified;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastLogin;
        private InputPropertyInfo _loginsCount;
        private InputPropertyInfo _name;
        private InputPropertyInfo _orgRoles;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> EmailVerified
        {
            get { return (QueryBuilderParameter<bool?>)_emailVerified.Value; }
            set { _emailVerified = new InputPropertyInfo { Name = "emailVerified", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastLogin
        {
            get { return (QueryBuilderParameter<object>)_lastLogin.Value; }
            set { _lastLogin = new InputPropertyInfo { Name = "lastLogin", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LoginsCount
        {
            get { return (QueryBuilderParameter<object>)_loginsCount.Value; }
            set { _loginsCount = new InputPropertyInfo { Name = "loginsCount", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> OrgRoles
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_orgRoles.Value; }
            set { _orgRoles = new InputPropertyInfo { Name = "orgRoles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleInput>> Roles
        {
            get { return (QueryBuilderParameter<ICollection<RoleInput>>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_email.Name != null) yield return _email;
            if (_emailVerified.Name != null) yield return _emailVerified;
            if (_id.Name != null) yield return _id;
            if (_lastLogin.Name != null) yield return _lastLogin;
            if (_loginsCount.Name != null) yield return _loginsCount;
            if (_name.Name != null) yield return _name;
            if (_orgRoles.Name != null) yield return _orgRoles;
            if (_roles.Name != null) yield return _roles;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class UserRemoveOrgMembershipRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _orgId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> OrgId
        {
            get { return (QueryBuilderParameter<string>)_orgId.Value; }
            set { _orgId = new InputPropertyInfo { Name = "orgId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_orgId.Name != null) yield return _orgId;
        }
    }

    public class UserRemoveRoleRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _role;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleInput?>))]
#endif
        public QueryBuilderParameter<RoleInput?> Role
        {
            get { return (QueryBuilderParameter<RoleInput?>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_role.Name != null) yield return _role;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _user;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserInput>))]
#endif
        public QueryBuilderParameter<UserInput> User
        {
            get { return (QueryBuilderParameter<UserInput>)_user.Value; }
            set { _user = new InputPropertyInfo { Name = "user", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_user.Name != null) yield return _user;
        }
    }

    public class ValueLocationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _encoding;
        private InputPropertyInfo _form;
        private InputPropertyInfo _header;
        private InputPropertyInfo _json;
        private InputPropertyInfo _mappedDefault;
        private InputPropertyInfo _queryParameter;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EncodingTypeInput?>))]
#endif
        public QueryBuilderParameter<EncodingTypeInput?> Encoding
        {
            get { return (QueryBuilderParameter<EncodingTypeInput?>)_encoding.Value; }
            set { _encoding = new InputPropertyInfo { Name = "encoding", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BodyValueLocationInput>))]
#endif
        public QueryBuilderParameter<BodyValueLocationInput> Form
        {
            get { return (QueryBuilderParameter<BodyValueLocationInput>)_form.Value; }
            set { _form = new InputPropertyInfo { Name = "form", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Header
        {
            get { return (QueryBuilderParameter<string>)_header.Value; }
            set { _header = new InputPropertyInfo { Name = "header", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BodyValueLocationInput>))]
#endif
        public QueryBuilderParameter<BodyValueLocationInput> Json
        {
            get { return (QueryBuilderParameter<BodyValueLocationInput>)_json.Value; }
            set { _json = new InputPropertyInfo { Name = "json", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MappedDefault
        {
            get { return (QueryBuilderParameter<bool?>)_mappedDefault.Value; }
            set { _mappedDefault = new InputPropertyInfo { Name = "mappedDefault", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> QueryParameter
        {
            get { return (QueryBuilderParameter<string>)_queryParameter.Value; }
            set { _queryParameter = new InputPropertyInfo { Name = "queryParameter", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_encoding.Name != null) yield return _encoding;
            if (_form.Name != null) yield return _form;
            if (_header.Name != null) yield return _header;
            if (_json.Name != null) yield return _json;
            if (_mappedDefault.Name != null) yield return _mappedDefault;
            if (_queryParameter.Name != null) yield return _queryParameter;
        }
    }

    public class ValueMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _location;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_location.Name != null) yield return _location;
            if (_value.Name != null) yield return _value;
        }
    }

    public class WebhookReceiverCorsOptionsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _allowCredentials;
        private InputPropertyInfo _allowedHeaders;
        private InputPropertyInfo _allowedMethods;
        private InputPropertyInfo _allowedOrigins;
        private InputPropertyInfo _exposedHeaders;
        private InputPropertyInfo _maxAge;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> AllowCredentials
        {
            get { return (QueryBuilderParameter<bool?>)_allowCredentials.Value; }
            set { _allowCredentials = new InputPropertyInfo { Name = "allowCredentials", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AllowedHeaders
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_allowedHeaders.Value; }
            set { _allowedHeaders = new InputPropertyInfo { Name = "allowedHeaders", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<HttpMethodInput>>))]
#endif
        public QueryBuilderParameter<ICollection<HttpMethodInput>> AllowedMethods
        {
            get { return (QueryBuilderParameter<ICollection<HttpMethodInput>>)_allowedMethods.Value; }
            set { _allowedMethods = new InputPropertyInfo { Name = "allowedMethods", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AllowedOrigins
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_allowedOrigins.Value; }
            set { _allowedOrigins = new InputPropertyInfo { Name = "allowedOrigins", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> ExposedHeaders
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_exposedHeaders.Value; }
            set { _exposedHeaders = new InputPropertyInfo { Name = "exposedHeaders", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> MaxAge
        {
            get { return (QueryBuilderParameter<int?>)_maxAge.Value; }
            set { _maxAge = new InputPropertyInfo { Name = "maxAge", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_allowCredentials.Name != null) yield return _allowCredentials;
            if (_allowedHeaders.Name != null) yield return _allowedHeaders;
            if (_allowedMethods.Name != null) yield return _allowedMethods;
            if (_allowedOrigins.Name != null) yield return _allowedOrigins;
            if (_exposedHeaders.Name != null) yield return _exposedHeaders;
            if (_maxAge.Name != null) yield return _maxAge;
        }
    }

    public class WebhookReceiverCentrifugoDestinationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _channel;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Channel
        {
            get { return (QueryBuilderParameter<string>)_channel.Value; }
            set { _channel = new InputPropertyInfo { Name = "channel", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_channel.Name != null) yield return _channel;
        }
    }

    public class WebhookReceiverDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _ownerId;
        private InputPropertyInfo _signalName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> OwnerId
        {
            get { return (QueryBuilderParameter<string>)_ownerId.Value; }
            set { _ownerId = new InputPropertyInfo { Name = "ownerId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SignalName
        {
            get { return (QueryBuilderParameter<string>)_signalName.Value; }
            set { _signalName = new InputPropertyInfo { Name = "signalName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_ownerId.Name != null) yield return _ownerId;
            if (_signalName.Name != null) yield return _signalName;
        }
    }

    public class WebhookReceiverDestinationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _centrifugoDestination;
        private InputPropertyInfo _executeWorkflowDestination;
        private InputPropertyInfo _kafkaDestination;
        private InputPropertyInfo _signalWorkflowDestination;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverCentrifugoDestinationInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverCentrifugoDestinationInput> CentrifugoDestination
        {
            get { return (QueryBuilderParameter<WebhookReceiverCentrifugoDestinationInput>)_centrifugoDestination.Value; }
            set { _centrifugoDestination = new InputPropertyInfo { Name = "centrifugoDestination", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverTemporalExecuteWorkflowDestinationInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverTemporalExecuteWorkflowDestinationInput> ExecuteWorkflowDestination
        {
            get { return (QueryBuilderParameter<WebhookReceiverTemporalExecuteWorkflowDestinationInput>)_executeWorkflowDestination.Value; }
            set { _executeWorkflowDestination = new InputPropertyInfo { Name = "executeWorkflowDestination", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverKafkaDestinationInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverKafkaDestinationInput> KafkaDestination
        {
            get { return (QueryBuilderParameter<WebhookReceiverKafkaDestinationInput>)_kafkaDestination.Value; }
            set { _kafkaDestination = new InputPropertyInfo { Name = "kafkaDestination", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverTemporalSignalWorkfowDestinationInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverTemporalSignalWorkfowDestinationInput> SignalWorkflowDestination
        {
            get { return (QueryBuilderParameter<WebhookReceiverTemporalSignalWorkfowDestinationInput>)_signalWorkflowDestination.Value; }
            set { _signalWorkflowDestination = new InputPropertyInfo { Name = "signalWorkflowDestination", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_centrifugoDestination.Name != null) yield return _centrifugoDestination;
            if (_executeWorkflowDestination.Name != null) yield return _executeWorkflowDestination;
            if (_kafkaDestination.Name != null) yield return _kafkaDestination;
            if (_signalWorkflowDestination.Name != null) yield return _signalWorkflowDestination;
        }
    }

    public class WebhookReceiverInput : IGraphQlInputObject
    {
        private InputPropertyInfo _auth;
        private InputPropertyInfo _baseUri;
        private InputPropertyInfo _corsOptions;
        private InputPropertyInfo _created;
        private InputPropertyInfo _destination;
        private InputPropertyInfo _id;
        private InputPropertyInfo _incomingPayloadContentType;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _methods;
        private InputPropertyInfo _name;
        private InputPropertyInfo _ownerId;
        private InputPropertyInfo _responseHeaders;
        private InputPropertyInfo _responseMessage;
        private InputPropertyInfo _responseReflectedQueryParameter;
        private InputPropertyInfo _runId;
        private InputPropertyInfo _signalName;
        private InputPropertyInfo _sourceId;
        private InputPropertyInfo _successHttpResponseCode;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _workflowId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthInput>))]
#endif
        public QueryBuilderParameter<AuthInput> Auth
        {
            get { return (QueryBuilderParameter<AuthInput>)_auth.Value; }
            set { _auth = new InputPropertyInfo { Name = "auth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BaseUri
        {
            get { return (QueryBuilderParameter<string>)_baseUri.Value; }
            set { _baseUri = new InputPropertyInfo { Name = "baseUri", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverCorsOptionsInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverCorsOptionsInput> CorsOptions
        {
            get { return (QueryBuilderParameter<WebhookReceiverCorsOptionsInput>)_corsOptions.Value; }
            set { _corsOptions = new InputPropertyInfo { Name = "corsOptions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverDestinationInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverDestinationInput> Destination
        {
            get { return (QueryBuilderParameter<WebhookReceiverDestinationInput>)_destination.Value; }
            set { _destination = new InputPropertyInfo { Name = "destination", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> IncomingPayloadContentType
        {
            get { return (QueryBuilderParameter<string>)_incomingPayloadContentType.Value; }
            set { _incomingPayloadContentType = new InputPropertyInfo { Name = "incomingPayloadContentType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetadataRecordInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MetadataRecordInput>> Metadata
        {
            get { return (QueryBuilderParameter<ICollection<MetadataRecordInput>>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<HttpMethodInput>>))]
#endif
        public QueryBuilderParameter<ICollection<HttpMethodInput>> Methods
        {
            get { return (QueryBuilderParameter<ICollection<HttpMethodInput>>)_methods.Value; }
            set { _methods = new InputPropertyInfo { Name = "methods", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> OwnerId
        {
            get { return (QueryBuilderParameter<string>)_ownerId.Value; }
            set { _ownerId = new InputPropertyInfo { Name = "ownerId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookReceiverResponseHeadersEntryInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookReceiverResponseHeadersEntryInput>> ResponseHeaders
        {
            get { return (QueryBuilderParameter<ICollection<WebhookReceiverResponseHeadersEntryInput>>)_responseHeaders.Value; }
            set { _responseHeaders = new InputPropertyInfo { Name = "responseHeaders", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ResponseMessage
        {
            get { return (QueryBuilderParameter<string>)_responseMessage.Value; }
            set { _responseMessage = new InputPropertyInfo { Name = "responseMessage", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ResponseReflectedQueryParameter
        {
            get { return (QueryBuilderParameter<string>)_responseReflectedQueryParameter.Value; }
            set { _responseReflectedQueryParameter = new InputPropertyInfo { Name = "responseReflectedQueryParameter", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RunId
        {
            get { return (QueryBuilderParameter<string>)_runId.Value; }
            set { _runId = new InputPropertyInfo { Name = "runId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SignalName
        {
            get { return (QueryBuilderParameter<string>)_signalName.Value; }
            set { _signalName = new InputPropertyInfo { Name = "signalName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SourceId
        {
            get { return (QueryBuilderParameter<string>)_sourceId.Value; }
            set { _sourceId = new InputPropertyInfo { Name = "sourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> SuccessHttpResponseCode
        {
            get { return (QueryBuilderParameter<int?>)_successHttpResponseCode.Value; }
            set { _successHttpResponseCode = new InputPropertyInfo { Name = "successHttpResponseCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> WorkflowId
        {
            get { return (QueryBuilderParameter<string>)_workflowId.Value; }
            set { _workflowId = new InputPropertyInfo { Name = "workflowId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_auth.Name != null) yield return _auth;
            if (_baseUri.Name != null) yield return _baseUri;
            if (_corsOptions.Name != null) yield return _corsOptions;
            if (_created.Name != null) yield return _created;
            if (_destination.Name != null) yield return _destination;
            if (_id.Name != null) yield return _id;
            if (_incomingPayloadContentType.Name != null) yield return _incomingPayloadContentType;
            if (_metadata.Name != null) yield return _metadata;
            if (_methods.Name != null) yield return _methods;
            if (_name.Name != null) yield return _name;
            if (_ownerId.Name != null) yield return _ownerId;
            if (_responseHeaders.Name != null) yield return _responseHeaders;
            if (_responseMessage.Name != null) yield return _responseMessage;
            if (_responseReflectedQueryParameter.Name != null) yield return _responseReflectedQueryParameter;
            if (_runId.Name != null) yield return _runId;
            if (_signalName.Name != null) yield return _signalName;
            if (_sourceId.Name != null) yield return _sourceId;
            if (_successHttpResponseCode.Name != null) yield return _successHttpResponseCode;
            if (_updated.Name != null) yield return _updated;
            if (_workflowId.Name != null) yield return _workflowId;
        }
    }

    public class WebhookReceiverKafkaDestinationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _topic;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Topic
        {
            get { return (QueryBuilderParameter<string>)_topic.Value; }
            set { _topic = new InputPropertyInfo { Name = "topic", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_topic.Name != null) yield return _topic;
        }
    }

    public class WebhookReceiverResponseHeadersEntryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class WebhookReceiverTemporalExecuteWorkflowDestinationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _taskQueue;
        private InputPropertyInfo _workflowId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TaskQueue
        {
            get { return (QueryBuilderParameter<string>)_taskQueue.Value; }
            set { _taskQueue = new InputPropertyInfo { Name = "taskQueue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> WorkflowId
        {
            get { return (QueryBuilderParameter<string>)_workflowId.Value; }
            set { _workflowId = new InputPropertyInfo { Name = "workflowId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_taskQueue.Name != null) yield return _taskQueue;
            if (_workflowId.Name != null) yield return _workflowId;
        }
    }

    public class WebhookReceiverTemporalSignalWorkfowDestinationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _runId;
        private InputPropertyInfo _signalName;
        private InputPropertyInfo _workflowId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RunId
        {
            get { return (QueryBuilderParameter<string>)_runId.Value; }
            set { _runId = new InputPropertyInfo { Name = "runId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SignalName
        {
            get { return (QueryBuilderParameter<string>)_signalName.Value; }
            set { _signalName = new InputPropertyInfo { Name = "signalName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> WorkflowId
        {
            get { return (QueryBuilderParameter<string>)_workflowId.Value; }
            set { _workflowId = new InputPropertyInfo { Name = "workflowId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_runId.Name != null) yield return _runId;
            if (_signalName.Name != null) yield return _signalName;
            if (_workflowId.Name != null) yield return _workflowId;
        }
    }

    public class WebhookReceiverUpsertRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _receiver;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookReceiverInput>))]
#endif
        public QueryBuilderParameter<WebhookReceiverInput> Receiver
        {
            get { return (QueryBuilderParameter<WebhookReceiverInput>)_receiver.Value; }
            set { _receiver = new InputPropertyInfo { Name = "receiver", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_receiver.Name != null) yield return _receiver;
        }
    }

    public class WebhookTargetAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _apiKey;
        private InputPropertyInfo _basicAuth;
        private InputPropertyInfo _noAuth;
        private InputPropertyInfo _oauth2ClientCredentialsFlow;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ApiKeyInput>))]
#endif
        public QueryBuilderParameter<ApiKeyInput> ApiKey
        {
            get { return (QueryBuilderParameter<ApiKeyInput>)_apiKey.Value; }
            set { _apiKey = new InputPropertyInfo { Name = "apiKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BasicAuthInput>))]
#endif
        public QueryBuilderParameter<BasicAuthInput> BasicAuth
        {
            get { return (QueryBuilderParameter<BasicAuthInput>)_basicAuth.Value; }
            set { _basicAuth = new InputPropertyInfo { Name = "basicAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> NoAuth
        {
            get { return (QueryBuilderParameter<bool?>)_noAuth.Value; }
            set { _noAuth = new InputPropertyInfo { Name = "noAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OAuth2ClientCredentialsFlowInput>))]
#endif
        public QueryBuilderParameter<OAuth2ClientCredentialsFlowInput> Oauth2ClientCredentialsFlow
        {
            get { return (QueryBuilderParameter<OAuth2ClientCredentialsFlowInput>)_oauth2ClientCredentialsFlow.Value; }
            set { _oauth2ClientCredentialsFlow = new InputPropertyInfo { Name = "oauth2ClientCredentialsFlow", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_apiKey.Name != null) yield return _apiKey;
            if (_basicAuth.Name != null) yield return _basicAuth;
            if (_noAuth.Name != null) yield return _noAuth;
            if (_oauth2ClientCredentialsFlow.Name != null) yield return _oauth2ClientCredentialsFlow;
        }
    }

    public class WebhookTargetCloudEventBatchedContentModeConfigInput : IGraphQlInputObject
    {
        private InputPropertyInfo _gracePeriod;
        private InputPropertyInfo _maxDelay;
        private InputPropertyInfo _maxSize;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DurationInput>))]
#endif
        public QueryBuilderParameter<DurationInput> GracePeriod
        {
            get { return (QueryBuilderParameter<DurationInput>)_gracePeriod.Value; }
            set { _gracePeriod = new InputPropertyInfo { Name = "gracePeriod", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DurationInput>))]
#endif
        public QueryBuilderParameter<DurationInput> MaxDelay
        {
            get { return (QueryBuilderParameter<DurationInput>)_maxDelay.Value; }
            set { _maxDelay = new InputPropertyInfo { Name = "maxDelay", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> MaxSize
        {
            get { return (QueryBuilderParameter<object>)_maxSize.Value; }
            set { _maxSize = new InputPropertyInfo { Name = "maxSize", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_gracePeriod.Name != null) yield return _gracePeriod;
            if (_maxDelay.Name != null) yield return _maxDelay;
            if (_maxSize.Name != null) yield return _maxSize;
        }
    }

    public class WebhookTargetCloudEventContentModeWrapperInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventContentModeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?> Value
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
        }
    }

    public class WebhookTargetCloudEventFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _sources;
        private InputPropertyInfo _types;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Sources
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_sources.Value; }
            set { _sources = new InputPropertyInfo { Name = "sources", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CloudEventSourceTypeInput>>))]
#endif
        public QueryBuilderParameter<ICollection<CloudEventSourceTypeInput>> Types
        {
            get { return (QueryBuilderParameter<ICollection<CloudEventSourceTypeInput>>)_types.Value; }
            set { _types = new InputPropertyInfo { Name = "types", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_sources.Name != null) yield return _sources;
            if (_types.Name != null) yield return _types;
        }
    }

    public class WebhookTargetCreateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _batchedContentModeConfig;
        private InputPropertyInfo _contentMode;
        private InputPropertyInfo _enabled;
        private InputPropertyInfo _eventExtensions;
        private InputPropertyInfo _eventFilters;
        private InputPropertyInfo _httpTarget;
        private InputPropertyInfo _maxRetry;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventBatchedContentModeConfigInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventBatchedContentModeConfigInput> BatchedContentModeConfig
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventBatchedContentModeConfigInput>)_batchedContentModeConfig.Value; }
            set { _batchedContentModeConfig = new InputPropertyInfo { Name = "batchedContentModeConfig", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventContentModeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?> ContentMode
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?>)_contentMode.Value; }
            set { _contentMode = new InputPropertyInfo { Name = "contentMode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Enabled
        {
            get { return (QueryBuilderParameter<bool?>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> EventExtensions
        {
            get { return (QueryBuilderParameter<object>)_eventExtensions.Value; }
            set { _eventExtensions = new InputPropertyInfo { Name = "eventExtensions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetEventFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetEventFilterInput> EventFilters
        {
            get { return (QueryBuilderParameter<WebhookTargetEventFilterInput>)_eventFilters.Value; }
            set { _eventFilters = new InputPropertyInfo { Name = "eventFilters", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetHttpTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetHttpTargetInput> HttpTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetHttpTargetInput>)_httpTarget.Value; }
            set { _httpTarget = new InputPropertyInfo { Name = "httpTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> MaxRetry
        {
            get { return (QueryBuilderParameter<object>)_maxRetry.Value; }
            set { _maxRetry = new InputPropertyInfo { Name = "maxRetry", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_batchedContentModeConfig.Name != null) yield return _batchedContentModeConfig;
            if (_contentMode.Name != null) yield return _contentMode;
            if (_enabled.Name != null) yield return _enabled;
            if (_eventExtensions.Name != null) yield return _eventExtensions;
            if (_eventFilters.Name != null) yield return _eventFilters;
            if (_httpTarget.Name != null) yield return _httpTarget;
            if (_maxRetry.Name != null) yield return _maxRetry;
            if (_name.Name != null) yield return _name;
        }
    }

    public class WebhookTargetCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _target;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCreateInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCreateInput> Target
        {
            get { return (QueryBuilderParameter<WebhookTargetCreateInput>)_target.Value; }
            set { _target = new InputPropertyInfo { Name = "target", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_target.Name != null) yield return _target;
        }
    }

    public class WebhookTargetDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class WebhookTargetEnableRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _enable;
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Enable
        {
            get { return (QueryBuilderParameter<bool?>)_enable.Value; }
            set { _enable = new InputPropertyInfo { Name = "enable", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_enable.Name != null) yield return _enable;
            if (_id.Name != null) yield return _id;
        }
    }

    public class WebhookTargetEventFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _cloudEventFilter;
        private InputPropertyInfo _jsonExpressionFilter;
        private InputPropertyInfo _timeseriesFilter;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventFilterInput> CloudEventFilter
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventFilterInput>)_cloudEventFilter.Value; }
            set { _cloudEventFilter = new InputPropertyInfo { Name = "cloudEventFilter", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetJsonExpressionFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetJsonExpressionFilterInput> JsonExpressionFilter
        {
            get { return (QueryBuilderParameter<WebhookTargetJsonExpressionFilterInput>)_jsonExpressionFilter.Value; }
            set { _jsonExpressionFilter = new InputPropertyInfo { Name = "jsonExpressionFilter", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetTimeseriesFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetTimeseriesFilterInput> TimeseriesFilter
        {
            get { return (QueryBuilderParameter<WebhookTargetTimeseriesFilterInput>)_timeseriesFilter.Value; }
            set { _timeseriesFilter = new InputPropertyInfo { Name = "timeseriesFilter", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_cloudEventFilter.Name != null) yield return _cloudEventFilter;
            if (_jsonExpressionFilter.Name != null) yield return _jsonExpressionFilter;
            if (_timeseriesFilter.Name != null) yield return _timeseriesFilter;
        }
    }

    public class WebhookTargetEventFilterTypeExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetEventFilterTypeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetEventFilterTypeInput?> Eq
        {
            get { return (QueryBuilderParameter<WebhookTargetEventFilterTypeInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetEventFilterTypeInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetEventFilterTypeInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetEventFilterTypeInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class WebhookTargetFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _contentMode;
        private InputPropertyInfo _enabled;
        private InputPropertyInfo _eventFilterType;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _targetId;
        private InputPropertyInfo _targetType;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventContentModeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?> ContentMode
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventContentModeInput?>)_contentMode.Value; }
            set { _contentMode = new InputPropertyInfo { Name = "contentMode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BoolFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<BoolFilterExpressionInput> Enabled
        {
            get { return (QueryBuilderParameter<BoolFilterExpressionInput>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetEventFilterTypeExpressionInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetEventFilterTypeExpressionInput> EventFilterType
        {
            get { return (QueryBuilderParameter<WebhookTargetEventFilterTypeExpressionInput>)_eventFilterType.Value; }
            set { _eventFilterType = new InputPropertyInfo { Name = "eventFilterType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> TargetId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_targetId.Value; }
            set { _targetId = new InputPropertyInfo { Name = "targetId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetTargetTypeExpressionInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetTargetTypeExpressionInput> TargetType
        {
            get { return (QueryBuilderParameter<WebhookTargetTargetTypeExpressionInput>)_targetType.Value; }
            set { _targetType = new InputPropertyInfo { Name = "targetType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_contentMode.Name != null) yield return _contentMode;
            if (_enabled.Name != null) yield return _enabled;
            if (_eventFilterType.Name != null) yield return _eventFilterType;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_targetId.Name != null) yield return _targetId;
            if (_targetType.Name != null) yield return _targetType;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class WebhookTargetHttpTargetGranularInput : IGraphQlInputObject
    {
        private InputPropertyInfo _auth;
        private InputPropertyInfo _hmac256;
        private InputPropertyInfo _method;
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetAuthInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetAuthInput> Auth
        {
            get { return (QueryBuilderParameter<WebhookTargetAuthInput>)_auth.Value; }
            set { _auth = new InputPropertyInfo { Name = "auth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayUpdateInput>))]
#endif
        public QueryBuilderParameter<StringArrayUpdateInput> Hmac256
        {
            get { return (QueryBuilderParameter<StringArrayUpdateInput>)_hmac256.Value; }
            set { _hmac256 = new InputPropertyInfo { Name = "hmac256", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<HttpMethodWrapperInput>))]
#endif
        public QueryBuilderParameter<HttpMethodWrapperInput> Method
        {
            get { return (QueryBuilderParameter<HttpMethodWrapperInput>)_method.Value; }
            set { _method = new InputPropertyInfo { Name = "method", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_auth.Name != null) yield return _auth;
            if (_hmac256.Name != null) yield return _hmac256;
            if (_method.Name != null) yield return _method;
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetHttpTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _auth;
        private InputPropertyInfo _hmac256;
        private InputPropertyInfo _method;
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetAuthInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetAuthInput> Auth
        {
            get { return (QueryBuilderParameter<WebhookTargetAuthInput>)_auth.Value; }
            set { _auth = new InputPropertyInfo { Name = "auth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Hmac256Input>))]
#endif
        public QueryBuilderParameter<Hmac256Input> Hmac256
        {
            get { return (QueryBuilderParameter<Hmac256Input>)_hmac256.Value; }
            set { _hmac256 = new InputPropertyInfo { Name = "hmac256", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<HttpMethodInput?>))]
#endif
        public QueryBuilderParameter<HttpMethodInput?> Method
        {
            get { return (QueryBuilderParameter<HttpMethodInput?>)_method.Value; }
            set { _method = new InputPropertyInfo { Name = "method", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_auth.Name != null) yield return _auth;
            if (_hmac256.Name != null) yield return _hmac256;
            if (_method.Name != null) yield return _method;
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetHttpTargetUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _granular;
        private InputPropertyInfo _replace;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetHttpTargetGranularInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetHttpTargetGranularInput> Granular
        {
            get { return (QueryBuilderParameter<WebhookTargetHttpTargetGranularInput>)_granular.Value; }
            set { _granular = new InputPropertyInfo { Name = "granular", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetHttpTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetHttpTargetInput> Replace
        {
            get { return (QueryBuilderParameter<WebhookTargetHttpTargetInput>)_replace.Value; }
            set { _replace = new InputPropertyInfo { Name = "replace", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_granular.Name != null) yield return _granular;
            if (_replace.Name != null) yield return _replace;
        }
    }

    public class WebhookTargetJsonExpressionFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _jsonPathExpression;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> JsonPathExpression
        {
            get { return (QueryBuilderParameter<string>)_jsonPathExpression.Value; }
            set { _jsonPathExpression = new InputPropertyInfo { Name = "jsonPathExpression", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_jsonPathExpression.Name != null) yield return _jsonPathExpression;
        }
    }

    public class WebhookTargetTargetTypeExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetTargetTypeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetTargetTypeInput?> Eq
        {
            get { return (QueryBuilderParameter<WebhookTargetTargetTypeInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetTargetTypeInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetTargetTypeInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetTargetTypeInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class WebhookTargetTimeseriesFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _points;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Points
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_points.Value; }
            set { _points = new InputPropertyInfo { Name = "points", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_points.Name != null) yield return _points;
        }
    }

    public class WebhookTargetUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _batchedContentModeConfig;
        private InputPropertyInfo _contentMode;
        private InputPropertyInfo _enabled;
        private InputPropertyInfo _eventExtensions;
        private InputPropertyInfo _eventFilters;
        private InputPropertyInfo _httpTarget;
        private InputPropertyInfo _id;
        private InputPropertyInfo _maxRetry;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventBatchedContentModeConfigInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventBatchedContentModeConfigInput> BatchedContentModeConfig
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventBatchedContentModeConfigInput>)_batchedContentModeConfig.Value; }
            set { _batchedContentModeConfig = new InputPropertyInfo { Name = "batchedContentModeConfig", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventContentModeWrapperInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventContentModeWrapperInput> ContentMode
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventContentModeWrapperInput>)_contentMode.Value; }
            set { _contentMode = new InputPropertyInfo { Name = "contentMode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Enabled
        {
            get { return (QueryBuilderParameter<bool?>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> EventExtensions
        {
            get { return (QueryBuilderParameter<object>)_eventExtensions.Value; }
            set { _eventExtensions = new InputPropertyInfo { Name = "eventExtensions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetEventFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetEventFilterInput> EventFilters
        {
            get { return (QueryBuilderParameter<WebhookTargetEventFilterInput>)_eventFilters.Value; }
            set { _eventFilters = new InputPropertyInfo { Name = "eventFilters", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetHttpTargetUpdateInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetHttpTargetUpdateInput> HttpTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetHttpTargetUpdateInput>)_httpTarget.Value; }
            set { _httpTarget = new InputPropertyInfo { Name = "httpTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> MaxRetry
        {
            get { return (QueryBuilderParameter<object>)_maxRetry.Value; }
            set { _maxRetry = new InputPropertyInfo { Name = "maxRetry", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetadataUpdateInput>))]
#endif
        public QueryBuilderParameter<MetadataUpdateInput> Metadata
        {
            get { return (QueryBuilderParameter<MetadataUpdateInput>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_batchedContentModeConfig.Name != null) yield return _batchedContentModeConfig;
            if (_contentMode.Name != null) yield return _contentMode;
            if (_enabled.Name != null) yield return _enabled;
            if (_eventExtensions.Name != null) yield return _eventExtensions;
            if (_eventFilters.Name != null) yield return _eventFilters;
            if (_httpTarget.Name != null) yield return _httpTarget;
            if (_id.Name != null) yield return _id;
            if (_maxRetry.Name != null) yield return _maxRetry;
            if (_metadata.Name != null) yield return _metadata;
            if (_name.Name != null) yield return _name;
        }
    }

    public class WebhookTargetUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _target;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetUpdateInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetUpdateInput> Target
        {
            get { return (QueryBuilderParameter<WebhookTargetUpdateInput>)_target.Value; }
            set { _target = new InputPropertyInfo { Name = "target", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_target.Name != null) yield return _target;
        }
    }

    public class WorkOrderFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WorkOrderFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<WorkOrderFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<WorkOrderFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WorkOrderFilter>))]
#endif
        public QueryBuilderParameter<WorkOrderFilter> Not
        {
            get { return (QueryBuilderParameter<WorkOrderFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WorkOrderFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<WorkOrderFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<WorkOrderFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class ZoneFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _connectedDataSourceId;
        private InputPropertyInfo _dateCreated;
        private InputPropertyInfo _dateUpdated;
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ZoneFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ZoneFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<ZoneFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ConnectedDataSourceId
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_connectedDataSourceId.Value; }
            set { _connectedDataSourceId = new InputPropertyInfo { Name = "connectedDataSourceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateCreated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateCreated.Value; }
            set { _dateCreated = new InputPropertyInfo { Name = "dateCreated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> DateUpdated
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_dateUpdated.Value; }
            set { _dateUpdated = new InputPropertyInfo { Name = "dateUpdated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> ExactType
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ZoneFilter>))]
#endif
        public QueryBuilderParameter<ZoneFilter> Not
        {
            get { return (QueryBuilderParameter<ZoneFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ZoneFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ZoneFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ZoneFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_connectedDataSourceId.Name != null) yield return _connectedDataSourceId;
            if (_dateCreated.Name != null) yield return _dateCreated;
            if (_dateUpdated.Name != null) yield return _dateUpdated;
            if (_exactType.Name != null) yield return _exactType;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }
    #endregion

    #region data classes
    public class ApiKeyData
    {
        public string ApiKey { get; set; }
        public string KeyName { get; set; }
        public string PassedAs { get; set; }
    }

    [GraphQlObjectType("AccessCredential")]
    public class AccessCredential : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<AccessCredentialIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    [GraphQlObjectType("AccessCredentialIdentity")]
    public class AccessCredentialIdentity : IAccessCredentialIdentityModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("AccessCredentialIdentityModel")]
    public interface IAccessCredentialIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class AccessCredentialIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("Account")]
    public class Account : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Point> HasBill { get; set; }
        public ICollection<HasBillEdge> HasBillEdges { get; set; }
        public ICollection<Organization> HasProvider { get; set; }
        public ICollection<HasProviderEdge> HasProviderEdges { get; set; }
        public string Id { get; set; }
        public ICollection<AccountIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class AccountIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class Address
    {
        public string CountryName { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public string Locality { get; set; }
        public string PostalCode { get; set; }
        public string Region { get; set; }
        public string StreetAddress { get; set; }
    }

    public class AddressMutation
    {
        public string CountryName { get; set; }
        public string Id { get; set; }
        public string Locality { get; set; }
        public string PostalCode { get; set; }
        public string Region { get; set; }
        public string StreetAddress { get; set; }
        public ICollection<string> Type { get; set; }
        public bool? Validate { get; set; }
    }

    [GraphQlObjectType("Agent")]
    public class Agent : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<AgentIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class AgentIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class Auth
    {
        public ICollection<Auth> And { get; set; }
        public ICollection<Match> Matches { get; set; }
        public ICollection<Auth> Not { get; set; }
        public ICollection<Auth> Or { get; set; }
    }

    [GraphQlObjectType("BACnetObjectId")]
    public class BaCnetObjectId : IBaCnetObjectIdModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("BACnetObjectIdModel")]
    public interface IBaCnetObjectIdModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    [GraphQlObjectType("BACnetVendorId")]
    public class BaCnetVendorId : IBaCnetVendorIdModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("BACnetVendorIdModel")]
    public interface IBaCnetVendorIdModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class BasicAuth
    {
        public string Password { get; set; }
        public string Username { get; set; }
    }

    public class BillingCalculatedProductBundleResponse
    {
        public BillingCalculationResponse Calculation { get; set; }
        public int? Code { get; set; }
        public ProductBundleResponse ProductBundle { get; set; }
        public string ProductSlug { get; set; }
        public string StatusMessage { get; set; }
    }

    public class BillingCalculationResponse
    {
        public object FixedPrice { get; set; }
        public string ItemSlug { get; set; }
        public object OveragePrice { get; set; }
        public ProductPriceItemResponse ProductPriceItem { get; set; }
        public object Quantity { get; set; }
        public object UnitPrice { get; set; }
    }

    public class BillingProductBundleSubscriptionResponse
    {
        public BillingCalculatedProductBundleResponse ProductBundle { get; set; }
        public string SubscriptionId { get; set; }
    }

    public class BodyValueLocation
    {
        public string BodySource { get; set; }
        public string Field { get; set; }
    }

    [GraphQlObjectType("Building")]
    public class Building : IGraphNode, IPlace, IThingContainer
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class BuildingCreateResponse
    {
        public BuildingMutation Building { get; set; }
    }

    public class BuildingDeleteResponse
    {
        public string _ { get; set; }
    }

    public class BuildingIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class BuildingMutation
    {
        public AddressMutation Address { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string SiteId { get; set; }
    }

    public class BuildingUpdateResponse
    {
        public BuildingMutation Building { get; set; }
    }

    [GraphQlObjectType("CalendarEvent")]
    public class CalendarEvent : IEvent, IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public object EndTime { get; set; }
        public string ExactType { get; set; }
        public ICollection<CalendarInvitation> HasInvitations { get; set; }
        public ICollection<CalendarInvitee> HasInvitees { get; set; }
        public string Id { get; set; }
        public ICollection<CalendarEventIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public object StartTime { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class CalendarEventIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("CalendarInvitation")]
    public class CalendarInvitation : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public EmailAddress Email { get; set; }
        public CalendarEvent Event { get; set; }
        public string ExactType { get; set; }
        public CalendarInvitee HasInvitee { get; set; }
        public string Id { get; set; }
        public ICollection<CalendarInvitationIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public CalendarInvitationResponse? Response { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class CalendarInvitationIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class CalendarInvitee
    {
        public string AdditionalName { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public ICollection<EmailAddress> Emails { get; set; }
        public string ExactType { get; set; }
        public string FamilyName { get; set; }
        public string GivenName { get; set; }
        public ICollection<AccessCredential> HasAccessCredential { get; set; }
        public ICollection<HasAccessCredentialEdge> HasAccessCredentialEdges { get; set; }
        public ICollection<CalendarEvent> HasCalendarEvents { get; set; }
        public ICollection<CalendarInvitation> HasCalendarInvitations { get; set; }
        public string Id { get; set; }
        public ICollection<PersonIdentityUnion> Identities { get; set; }
        public ICollection<Organization> IsMemberOf { get; set; }
        public ICollection<IsMemberOfEdge> IsMemberOfEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public Floor Floor { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Thing> Things { get; set; }
    }

    public class CertMatch
    {
        public CertificateAuthorityBundle CaCerts { get; set; }
        public string DnsName { get; set; }
        public string SerialNumber { get; set; }
    }

    public class CertificateData
    {
        public string Certificate { get; set; }
        public CertificateType? Type { get; set; }
    }

    public class CertificateAuthorityBundle
    {
        public ICollection<CertificateData> CaCertificates { get; set; }
    }

    [GraphQlObjectType("Collection")]
    public class Collection : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<HasPartUnion> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public string Id { get; set; }
        public ICollection<CollectionIdentityUnion> Identities { get; set; }
        public ICollection<IsFedByUnion> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class CollectionIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class Connector
    {
        public string BaseUrl { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public object Config { get; set; }
        public string ConfigHash { get; set; }
        public ConnectorType ConnectorType { get; set; }
        public string ConnectorTypeId { get; set; }
        public ICollection<ConnectorContribution> Contributions { get; set; }
        public object Created { get; set; }
        public ConnectorTypeConnectorDirection? Direction { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public string Id { get; set; }
        public object LastSeen { get; set; }
        public string LastUpdatedBy { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ConnectorState? State { get; set; }
        public string StateDetails { get; set; }
        public ICollection<Thing> Things { get; set; }
        public object Updated { get; set; }
        public string UserId { get; set; }
        public string WorkflowId { get; set; }
    }

    public class ConnectorAuth
    {
        public object Created { get; set; }
        public string Id { get; set; }
        public object LastAccessed { get; set; }
        public object Updated { get; set; }
    }

    public class ConnectorAuthCreateResponse
    {
        public ConnectorAuth ConnectorAuth { get; set; }
    }

    public class ConnectorAuthDeleteResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorAuthResponseSecret
    {
        public ConnectorAuthStaticToken StaticToken { get; set; }
        public ConnectorAuthUsernamePassword UsernamePassword { get; set; }
    }

    public class ConnectorAuthStaticToken
    {
        public string Token { get; set; }
    }

    public class ConnectorAuthUpdateResponse
    {
        public ConnectorAuth ConnectorAuth { get; set; }
    }

    public class ConnectorAuthUsernamePassword
    {
        public string Password { get; set; }
        public string Username { get; set; }
    }

    public class ConnectorContribution
    {
        public object Count { get; set; }
        public string SystemType { get; set; }
    }

    public class ConnectorCreateResponse
    {
        public Connector Connector { get; set; }
    }

    public class ConnectorDeleteResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorRequest
    {
        public string ConnectorTypeId { get; set; }
        public string Id { get; set; }
    }

    public class ConnectorRequestCreateResponse
    {
        public ConnectorRequest Request { get; set; }
    }

    public class ConnectorRestartResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorStartResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorStopResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorType
    {
        public object ConfigSchema { get; set; }
        public string Description { get; set; }
        public ConnectorTypeConnectorDirection? Direction { get; set; }
        public string Id { get; set; }
        public ICollection<MetadataRecord> Metadata { get; set; }
        public string Name { get; set; }
        public ConnectorTypeRuntimeVersion? RuntimeVersion { get; set; }
        public string TaskQueue { get; set; }
        public string Version { get; set; }
        public ConnectorTypeWebhookReceiveStorage? WebhookReceiveStorage { get; set; }
    }

    public class ConnectorTypeListAvailableResponse
    {
        public ICollection<ConnectorType> Available { get; set; }
        public ICollection<ConnectorType> Requested { get; set; }
        public ICollection<ConnectorType> UponRequest { get; set; }
    }

    public class ConnectorUpdateResponse
    {
        public Connector Connector { get; set; }
    }

    public class ConnectorUpsertConfigResponse
    {
        public object Config { get; set; }
        public string ConfigHash { get; set; }
        public bool? ConfigUnchanged { get; set; }
        public string Id { get; set; }
    }

    public class ContributionRequest
    {
        public string Id { get; set; }
        public ContributionRequestPropertyValues Properties { get; set; }
        public ContributionRequestTargetEntity Target { get; set; }
    }

    public class ContributionRequestCreateResponse
    {
        public ContributionRequest ContributionRequest { get; set; }
    }

    public class ContributionRequestPropertyValues
    {
        public string AdditionalName { get; set; }
        public string Address { get; set; }
        public ICollection<string> Attachment { get; set; }
        public string CallInfo { get; set; }
        public string CountryName { get; set; }
        public string Description { get; set; }
        public string DeviceModelId { get; set; }
        public decimal? Elevation { get; set; }
        public object EndTime { get; set; }
        public string ExactType { get; set; }
        public string FamilyName { get; set; }
        public string FirmwareVersion { get; set; }
        public object Geoshape { get; set; }
        public string GivenName { get; set; }
        public string Hostname { get; set; }
        public string ICalUid { get; set; }
        public string Image { get; set; }
        public ICollection<string> Ipv4Address { get; set; }
        public ICollection<string> Ipv6Address { get; set; }
        public int? Level { get; set; }
        public string Locality { get; set; }
        public string MacAddress { get; set; }
        public decimal? MaxLimit { get; set; }
        public int? MaxOccupancy { get; set; }
        public decimal? MinLimit { get; set; }
        public string Name { get; set; }
        public string PostalCode { get; set; }
        public string Region { get; set; }
        public string Response { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<string> StateTexts { get; set; }
        public string StreetAddress { get; set; }
        public ICollection<string> SystemType { get; set; }
        public ICollection<string> Type { get; set; }
        public string Unit { get; set; }
        public string ValueType { get; set; }
    }

    public class ContributionRequestTargetEntity
    {
        public string Id { get; set; }
    }

    public class DeviceLibraryModel
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string ImageUrl { get; set; }
        public DeviceManufacturer Manufacturer { get; set; }
        public string ManufacturerId { get; set; }
        public string Name { get; set; }
        public ICollection<string> SeeAlsoUrls { get; set; }
    }

    public class DeviceManufacturer
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string LogoUrl { get; set; }
        public string Name { get; set; }
    }

    [GraphQlObjectType("DeviceModel")]
    public class DeviceModel : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<DeviceModelIdentityUnion> Identities { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class DeviceModelIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class Duration
    {
        public int? Nanos { get; set; }
        public object Seconds { get; set; }
    }

    public interface IEdge
    {
        string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("EmailAddress")]
    public class EmailAddress : IGraphNode
    {
        public string Address { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<EmailAddressIdentityUnion> Identities { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    [GraphQlObjectType("EmailAddressIdentity")]
    public class EmailAddressIdentity : IEmailAddressIdentityModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("EmailAddressIdentityModel")]
    public interface IEmailAddressIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class EmailAddressIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("EmailIdentity")]
    public class EmailIdentity : IEmailIdentityModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("EmailIdentityModel")]
    public interface IEmailIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    [GraphQlObjectType("Event")]
    public interface IEvent
    {
        string ConnectedDataSourceId { get; set; }
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Description { get; set; }
        object EndTime { get; set; }
        string ExactType { get; set; }
        string Id { get; set; }
        string MappingKey { get; set; }
        string Name { get; set; }
        object StartTime { get; set; }
        ICollection<string> Type { get; set; }
    }

    [GraphQlObjectType("ExternalIdentity")]
    public class ExternalIdentity : IExternalIdentityModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("ExternalIdentityModel")]
    public interface IExternalIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    [GraphQlObjectType("FeedsEdge")]
    public class FeedsEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class FeedsUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public Building Building { get; set; }
        public object Geoshape { get; set; }
        public int? Level { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public string FirmwareVersion { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    [GraphQlObjectType("Floor")]
    public class Floor : IGraphNode, IPlace, IThingContainer
    {
        public Building Building { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<FloorIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public int? Level { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public ICollection<Zone> Zones { get; set; }
    }

    public class FloorCreateResponse
    {
        public FloorMutation Floor { get; set; }
    }

    public class FloorDeleteResponse
    {
        public string _ { get; set; }
    }

    public class FloorIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("FloorLevelIdentity")]
    public class FloorLevelIdentity : IFloorLevelIdentityModel, IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("FloorLevelIdentityModel")]
    public interface IFloorLevelIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class FloorMutation
    {
        public string BuildingId { get; set; }
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public int? Level { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class FloorUpdateResponse
    {
        public FloorMutation Floor { get; set; }
    }

    public class Gateway
    {
        public GatewayActiveDetails Active { get; set; }
        public GatewayAssignmentDetails Assignment { get; set; }
        public GatewayFirstBootDetails FirstBoot { get; set; }
        public string GatewayId { get; set; }
        public Org Organization { get; set; }
        public GatewayProvisioningDetails Provisioning { get; set; }
        public GatewayRegistrationDetails Registration { get; set; }
        public GatewayRmaDetails Rma { get; set; }
        public GatewayShippingDetails Shipping { get; set; }
        public GatewayLifecycleState? State { get; set; }
        public object StateTime { get; set; }
        public GatewaySuspensionDetails Suspension { get; set; }
        public GatewayTerminationDetails Termination { get; set; }
    }

    public class GatewayActiveDetails
    {
        public object LastSeenTime { get; set; }
        public string UgagentVersion { get; set; }
    }

    public class GatewayAssignResponse
    {
        public string _ { get; set; }
    }

    public class GatewayAssignmentDetails
    {
        public object AssignmentTime { get; set; }
        public string PhysicalPlaceId { get; set; }
        public object PreciseGeoLocation { get; set; }
        public ICollection<string> ServesPlaceIds { get; set; }
        public ICollection<SystemTypeKey> ServesSystemTypes { get; set; }
        public bool? SupportAccessAllowed { get; set; }
        public object SupportAccessExpiration { get; set; }
        public string UniqueName { get; set; }
    }

    public class GatewayFirstBootDetails
    {
        public object BootTime { get; set; }
    }

    public class GatewayGenerateContainerSiDsResponse
    {
        public string AvailableCertificateCn { get; set; }
        public string SigningCertificateCn { get; set; }
    }

    public class GatewayNote
    {
        public string Note { get; set; }
        public object Time { get; set; }
    }

    public class GatewayProvisioningDetails
    {
        public object ProvisionTime { get; set; }
    }

    public class GatewayRmaDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewayRmaReason? Reason { get; set; }
        public object RmaTime { get; set; }
    }

    public class GatewayRegisterContainerResponse
    {
        public string DeviceId { get; set; }
        public string GatewayId { get; set; }
    }

    public class GatewayRegistrationDetails
    {
        public string Imei { get; set; }
        public string LanMac { get; set; }
        public GatewayModel? MappedModel { get; set; }
        public string SerialNumber { get; set; }
        public GatewaySimInfo Sim { get; set; }
    }

    public class GatewaySimCertificate
    {
        public string Id { get; set; }
        public string Pem { get; set; }
        public string SubjectKeyId { get; set; }
    }

    public class GatewaySimInfo
    {
        public GatewaySimCertificate AvailableCertificate { get; set; }
        public string Iccid { get; set; }
        public GatewaySimCertificate SigningCertificate { get; set; }
        public GatewaySimType? SimType { get; set; }
    }

    public class GatewayShippingDetails
    {
        public GatewayCourier? Courier { get; set; }
        public object ShipTime { get; set; }
        public GatewayShippingStatus? Status { get; set; }
        public object StatusTime { get; set; }
        public string TrackingNumber { get; set; }
    }

    public class GatewaySuspendResponse
    {
        public string _ { get; set; }
    }

    public class GatewaySuspensionDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewaySuspensionReason? Reason { get; set; }
        public object SuspensionTime { get; set; }
    }

    public class GatewayTerminationDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewayTerminationReason? Reason { get; set; }
        public object TerminationTime { get; set; }
    }

    [GraphQlObjectType("GenericIdentity")]
    public class GenericIdentity : IIdentity
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("GenericPlace")]
    public class GenericPlace : IGraphNode, IPlace, IThingContainer
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<GenericPlaceIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class GenericPlaceIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class GeoPoint
    {
        public ICollection<decimal> Coordinates { get; set; }
        public string Type { get; set; }
    }

    public class Grant
    {
        public object ApprovalTime { get; set; }
        public ICollection<GrantPlacesAndTypes> GrantedPlacesAndTypes { get; set; }
        public string GranteeUserId { get; set; }
        public ICollection<GrantNote> GrantorNotes { get; set; }
        public string GrantorUserId { get; set; }
        public string Id { get; set; }
        public object RequestTime { get; set; }
        public ICollection<GrantRequest> Requests { get; set; }
        public GrantState? State { get; set; }
        public object UpdateTime { get; set; }
    }

    public class GrantCreateResponse
    {
        public string Id { get; set; }
    }

    public class GrantDeleteResponse
    {
        public string _ { get; set; }
    }

    public class GrantNote
    {
        public string Note { get; set; }
        public object Time { get; set; }
    }

    public class GrantPlacesAndTypes
    {
        public ICollection<string> GrantedIds { get; set; }
        public ICollection<SystemTypeKey> GrantedSystemTypes { get; set; }
    }

    public class GrantRequest
    {
        public string RequestNote { get; set; }
        public GrantRequestType? RequestType { get; set; }
        public ICollection<SystemTypeKey> SystemTypes { get; set; }
    }

    public class GrantUpdateResponse
    {
        public string _ { get; set; }
    }

    public interface IGraphNode
    {
        string ConnectedDataSourceId { get; set; }
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Description { get; set; }
        string ExactType { get; set; }
        string Id { get; set; }
        string MappingKey { get; set; }
        string Name { get; set; }
        ICollection<string> Type { get; set; }
    }

    public class Hmac256
    {
        public ICollection<string> SigningKeys { get; set; }
    }

    [GraphQlObjectType("HasAccessCredentialEdge")]
    public class HasAccessCredentialEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasAssignedGroupEdge")]
    public class HasAssignedGroupEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasAssigneeEdge")]
    public class HasAssigneeEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasBillEdge")]
    public class HasBillEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasDeviceModelEdge")]
    public class HasDeviceModelEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasHeartbeatEdge")]
    public class HasHeartbeatEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasLocationEdge")]
    public class HasLocationEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasMemberEdge")]
    public class HasMemberEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasPartEdge")]
    public class HasPartEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class HasPartUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public Building Building { get; set; }
        public object Geoshape { get; set; }
        public int? Level { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public string FirmwareVersion { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    [GraphQlObjectType("HasPointEdge")]
    public class HasPointEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasPrimaryContactEdge")]
    public class HasPrimaryContactEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("HasProviderEdge")]
    public class HasProviderEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("Heartbeat")]
    public class Heartbeat : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public Heartbeat HasHeartbeat { get; set; }
        public ICollection<HasHeartbeatEdge> HasHeartbeatEdges { get; set; }
        public string Id { get; set; }
        public ICollection<HeartbeatIdentityUnion> Identities { get; set; }
        public Account IsBilledTo { get; set; }
        public ICollection<IsBilledToEdge> IsBilledToEdges { get; set; }
        public ICollection<IsPointOfUnion> IsPointOf { get; set; }
        public ICollection<IsPointOfEdge> IsPointOfEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class HeartbeatIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class IpAllowlistMatch
    {
        public ICollection<string> AllowedIps { get; set; }
    }

    public interface IIdentity
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class Invite
    {
        public object Created { get; set; }
        public string Email { get; set; }
        public object Expiration { get; set; }
        public string Id { get; set; }
        public string InviterUserId { get; set; }
        public Org Organization { get; set; }
        public ICollection<Role> Roles { get; set; }
        public InviteStatus? Status { get; set; }
    }

    public class InviteCreateResponse
    {
        public Invite Invite { get; set; }
        public string InviteToken { get; set; }
    }

    public class InviteDeleteResponse
    {
        public string _ { get; set; }
    }

    public class InviteUpdateResponse
    {
        public Invite Invite { get; set; }
    }

    [GraphQlObjectType("IsAdjacentToEdge")]
    public class IsAdjacentToEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsBilledToEdge")]
    public class IsBilledToEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsClosedByEdge")]
    public class IsClosedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsCreatedByEdge")]
    public class IsCreatedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsFedByEdge")]
    public class IsFedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class IsFedByUnion
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<HasPartUnion> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public string Id { get; set; }
        public ICollection<CollectionIdentityUnion> Identities { get; set; }
        public ICollection<IsFedByUnion> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<string> Type { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public string FirmwareVersion { get; set; }
        public object Geoshape { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public ICollection<Thing> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
        public Org Organization { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    [GraphQlObjectType("IsLocationOfEdge")]
    public class IsLocationOfEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class IsLocationOfUnion
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<HasPartUnion> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public string Id { get; set; }
        public ICollection<CollectionIdentityUnion> Identities { get; set; }
        public ICollection<IsFedByUnion> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<string> Type { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public string FirmwareVersion { get; set; }
        public object Geoshape { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public ICollection<Thing> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
        public Org Organization { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    [GraphQlObjectType("IsMemberOfEdge")]
    public class IsMemberOfEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsPartOfEdge")]
    public class IsPartOfEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsPointOfEdge")]
    public class IsPointOfEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class IsPointOfUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public object Geoshape { get; set; }
        public int? Level { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
        public string FirmwareVersion { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    [GraphQlObjectType("IsReportedByEdge")]
    public class IsReportedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsResponsibilityOfEdge")]
    public class IsResponsibilityOfEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsResponsibleForEdge")]
    public class IsResponsibleForEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("IsServedByEdge")]
    public class IsServedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    [GraphQlObjectType("Lease")]
    public class Lease : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<LeaseIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> LeaseOf { get; set; }
        public Org Leasee { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class LeaseIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class LiveQuery
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public object LastErrorDate { get; set; }
        public object LastResult { get; set; }
        public object LastResultDate { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public string Query { get; set; }
        public LiveQueryStatus? Status { get; set; }
        public User User { get; set; }
        public object Variables { get; set; }
    }

    public class LiveQueryCreateResponse
    {
        public LiveQuery LiveQuery { get; set; }
    }

    public class LiveQueryDeleteResponse
    {
        public string _ { get; set; }
    }

    public class LiveQueryPauseResponse
    {
        public string _ { get; set; }
    }

    public class LiveQueryResumeResponse
    {
        public string _ { get; set; }
    }

    public class LiveQueryUpdateResponse
    {
        public LiveQuery LiveQuery { get; set; }
    }

    public class MtlsMatch
    {
        public CertificateData ClientCert { get; set; }
        public CertificateData IssuerCert { get; set; }
        public bool? MappedCert { get; set; }
        public CertMatch MatchCert { get; set; }
    }

    [GraphQlObjectType("ManufacturedByEdge")]
    public class ManufacturedByEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class Match
    {
        public IpAllowlistMatch IpAllowlist { get; set; }
        public MtlsMatch Mtls { get; set; }
        public bool? NoAuth { get; set; }
        public RegexMatch Regex { get; set; }
        public SignatureMatch Signature { get; set; }
        public ValueMatch Value { get; set; }
    }

    public class MetadataEntry
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class MetadataRecord
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class Mutation
    {
        public GatewayAssignResponse AssignGateway { get; set; }
        public UserAssignRoleResponse AssignRole { get; set; }
        public BuildingCreateResponse CreateBuilding { get; set; }
        public ConnectorCreateResponse CreateConnector { get; set; }
        public ConnectorAuthCreateResponse CreateConnectorAuth { get; set; }
        public ConnectorRequestCreateResponse CreateConnectorRequest { get; set; }
        public ContributionRequestCreateResponse CreateContributionRequest { get; set; }
        public FloorCreateResponse CreateFloor { get; set; }
        public GrantCreateResponse CreateGrant { get; set; }
        public InviteCreateResponse CreateInvite { get; set; }
        public LiveQueryCreateResponse CreateLiveQuery { get; set; }
        public OrgRoleGroupCreateResponse CreateOrgRoleGroup { get; set; }
        public OrgServiceAccountCreateResponse CreateOrgServiceAccount { get; set; }
        public PersonalAccessTokenCreateResponse CreatePersonalAccessToken { get; set; }
        public OrgServiceAccountCreateSecretResponse CreateSecretOrgServiceAccount { get; set; }
        public SiteCreateResponse CreateSite { get; set; }
        public SpaceCreateResponse CreateSpace { get; set; }
        public UserCreateResponse CreateUser { get; set; }
        public WebhookTargetCreateResponse CreateWebhookTarget { get; set; }
        public BuildingDeleteResponse DeleteBuilding { get; set; }
        public ConnectorDeleteResponse DeleteConnector { get; set; }
        public ConnectorAuthDeleteResponse DeleteConnectorAuth { get; set; }
        public FloorDeleteResponse DeleteFloor { get; set; }
        public GrantDeleteResponse DeleteGrant { get; set; }
        public InviteDeleteResponse DeleteInvite { get; set; }
        public LiveQueryDeleteResponse DeleteLiveQuery { get; set; }
        public OrgRoleGroupDeleteResponse DeleteOrgRoleGroup { get; set; }
        public OrgServiceAccountDeleteResponse DeleteOrgServiceAccount { get; set; }
        public PersonalAccessTokenDeleteResponse DeletePersonalAccessToken { get; set; }
        public OrgServiceAccountDeleteSecretsResponse DeleteSecretsOrgServiceAccount { get; set; }
        public SiteDeleteResponse DeleteSite { get; set; }
        public SpaceDeleteResponse DeleteSpace { get; set; }
        public WebhookReceiverDeleteResponse DeleteWebhookReceiver { get; set; }
        public WebhookTargetDeleteResponse DeleteWebhookTarget { get; set; }
        public WebhookTargetEnableResponse EnableWebhookTarget { get; set; }
        public GatewayGenerateContainerSiDsResponse GenerateContainerSiDs { get; set; }
        public LiveQueryPauseResponse PauseLiveQuery { get; set; }
        public GatewayRegisterContainerResponse RegisterGatewayContainer { get; set; }
        public UserRemoveOrgMembershipResponse RemoveOrgMembershipUser { get; set; }
        public OrgRemoveOrgUserAsyncResponse RemoveOrgUser { get; set; }
        public UserRemoveRoleResponse RemoveRole { get; set; }
        public ConnectorRestartResponse RestartConnector { get; set; }
        public LiveQueryResumeResponse ResumeLiveQuery { get; set; }
        public ConnectorStartResponse StartConnector { get; set; }
        public ConnectorStopResponse StopConnector { get; set; }
        public GatewaySuspendResponse SuspendGateway { get; set; }
        public BuildingUpdateResponse UpdateBuilding { get; set; }
        public ConnectorUpdateResponse UpdateConnector { get; set; }
        public ConnectorAuthUpdateResponse UpdateConnectorAuth { get; set; }
        public FloorUpdateResponse UpdateFloor { get; set; }
        public GrantUpdateResponse UpdateGrant { get; set; }
        public InviteUpdateResponse UpdateInvite { get; set; }
        public LiveQueryUpdateResponse UpdateLiveQuery { get; set; }
        public OrgRoleGroupUpdateResponse UpdateOrgRoleGroup { get; set; }
        public OrgServiceAccountUpdateResponse UpdateOrgServiceAccount { get; set; }
        public OrgUpdateResponse UpdateOrganization { get; set; }
        public OrgUpdateV2Response UpdateOrganizationV2 { get; set; }
        public PersonalAccessTokenUpdateResponse UpdatePersonalAccessToken { get; set; }
        public SiteUpdateResponse UpdateSite { get; set; }
        public SpaceUpdateResponse UpdateSpace { get; set; }
        public UserUpdateResponse UpdateUser { get; set; }
        public WebhookTargetUpdateResponse UpdateWebhookTarget { get; set; }
        public ConnectorUpsertConfigResponse UpsertConfigConnector { get; set; }
        public WebhookReceiverUpsertResponse UpsertWebhookReceiver { get; set; }
    }

    [GraphQlObjectType("NameIdentity")]
    public class NameIdentity : IIdentity, INameIdentityModel
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("NameIdentityModel")]
    public interface INameIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class OAuth2ClientCredentialsFlow
    {
        public string ClientId { get; set; }
        public string ClientSecret { get; set; }
        public string HeaderPrefix { get; set; }
        public string Scope { get; set; }
        public string TokenEndpoint { get; set; }
    }

    public class OneTimePriceItem
    {
        public string PriceId { get; set; }
        public Tier Tier { get; set; }
    }

    public class OneTimePriceItems
    {
        public ICollection<OneTimePriceItem> Items { get; set; }
    }

    public class Org
    {
        public OrgAuthenticationChallenge AuthenticationChallenge { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object Created { get; set; }
        public ICollection<Gateway> Gateways { get; set; }
        public string Id { get; set; }
        public ICollection<MetadataRecord> Metadata { get; set; }
        public string Name { get; set; }
        public OrgProvisioningState? ProvisioningState { get; set; }
        public ICollection<Site> Sites { get; set; }
        public OrgState? State { get; set; }
        public string StripeCustomerId { get; set; }
        public ICollection<Thing> Things { get; set; }
        public object Updated { get; set; }
        public ICollection<User> Users { get; set; }
    }

    public class OrgAuthenticationChallenge
    {
        public string Connection { get; set; }
        public bool? Enabled { get; set; }
    }

    public class OrgIsOrgNameAvailableResponse
    {
        public bool? IsAvailable { get; set; }
        public string SuggestedOrgName { get; set; }
    }

    public class OrgRemoveOrgUserAsyncResponse
    {
        public string _ { get; set; }
    }

    public class OrgRoleGroupCreateResponse
    {
        public OrgRoleGroupDto OrgRoleGroup { get; set; }
    }

    public class OrgRoleGroupDto
    {
        public DateTimeOffset? CreatedAt { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public bool? IsSynced { get; set; }
        public string Name { get; set; }
        public ICollection<string> Roles { get; set; }
        public OrgRoleGroupState? State { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class OrgRoleGroupDeleteResponse
    {
        public bool? Success { get; set; }
    }

    public class OrgRoleGroupUpdateResponse
    {
        public OrgRoleGroupDto OrgRoleGroup { get; set; }
    }

    public class OrgServiceAccountContainer
    {
        public OrgServiceAccountDto OrgServiceAccount { get; set; }
        public ICollection<OrgServiceAccountSecretHint> Secrets { get; set; }
    }

    public class OrgServiceAccountCreateResponse
    {
        public OrgServiceAccountDto OrgServiceAccount { get; set; }
    }

    public class OrgServiceAccountCreateSecretResponse
    {
        public string ClientId { get; set; }
        public string ClientSecret { get; set; }
        public object ExpirationUnix { get; set; }
        public string SecretName { get; set; }
        public string ServiceAccountName { get; set; }
    }

    public class OrgServiceAccountCustomRole
    {
        public ICollection<string> Permissions { get; set; }
    }

    public class OrgServiceAccountDto
    {
        public string ClientId { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public OrgServiceAccountCustomRole CustomRole { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public bool? IsSynced { get; set; }
        public string Name { get; set; }
        public ICollection<string> OrgRoleGroups { get; set; }
        public OrgServiceAccountState? State { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class OrgServiceAccountDeleteResponse
    {
        public bool? Success { get; set; }
    }

    public class OrgServiceAccountDeleteSecretsResponse
    {
        public string _ { get; set; }
    }

    public class OrgServiceAccountSecretHint
    {
        public object ExpirationUnix { get; set; }
        public string SecretName { get; set; }
    }

    public class OrgServiceAccountUpdateResponse
    {
        public OrgServiceAccountDto OrgServiceAccount { get; set; }
    }

    public class OrgUpdateResponse
    {
        public Org Org { get; set; }
    }

    public class OrgUpdateV2Response
    {
        public Org Org { get; set; }
    }

    [GraphQlObjectType("Organization")]
    public class Organization : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Person> HasMember { get; set; }
        public ICollection<HasMemberEdge> HasMemberEdges { get; set; }
        public ICollection<Organization> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Person> HasPrimaryContact { get; set; }
        public ICollection<HasPrimaryContactEdge> HasPrimaryContactEdges { get; set; }
        public string Id { get; set; }
        public ICollection<OrganizationIdentityUnion> Identities { get; set; }
        public ICollection<Account> IsProviderOf { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class OrganizationIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("PeopleGroup")]
    public class PeopleGroup : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Person> HasMember { get; set; }
        public ICollection<HasMemberEdge> HasMemberEdges { get; set; }
        public Org HasPart { get; set; }
        public ICollection<Person> HasPrimaryContact { get; set; }
        public ICollection<HasPrimaryContactEdge> HasPrimaryContactEdges { get; set; }
        public string Id { get; set; }
        public ICollection<PeopleGroupIdentityUnion> Identities { get; set; }
        public ICollection<Account> IsProviderOf { get; set; }
        public ICollection<Thing> IsResponsibleFor { get; set; }
        public ICollection<IsResponsibleForEdge> IsResponsibleForEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class PeopleGroupIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("Person")]
    public class Person : IGraphNode
    {
        public string AdditionalName { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public ICollection<EmailAddress> Emails { get; set; }
        public string ExactType { get; set; }
        public string FamilyName { get; set; }
        public string GivenName { get; set; }
        public ICollection<AccessCredential> HasAccessCredential { get; set; }
        public ICollection<HasAccessCredentialEdge> HasAccessCredentialEdges { get; set; }
        public ICollection<CalendarEvent> HasCalendarEvents { get; set; }
        public ICollection<CalendarInvitation> HasCalendarInvitations { get; set; }
        public string Id { get; set; }
        public ICollection<PersonIdentityUnion> Identities { get; set; }
        public ICollection<Organization> IsMemberOf { get; set; }
        public ICollection<IsMemberOfEdge> IsMemberOfEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class PersonIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class PersonalAccessToken
    {
        public object Created { get; set; }
        public string Id { get; set; }
        public string IntegrityId { get; set; }
        public object LastExchanged { get; set; }
        public string Name { get; set; }
        public ICollection<Permission> Permissions { get; set; }
        public object Updated { get; set; }
        public string UserId { get; set; }
    }

    public class PersonalAccessTokenCreateResponse
    {
        public PersonalAccessToken Pat { get; set; }
        public string Token { get; set; }
    }

    public class PersonalAccessTokenDeleteResponse
    {
        public string _ { get; set; }
    }

    public class PersonalAccessTokenIsPatNameAvailableResponse
    {
        public bool? IsAvailable { get; set; }
        public string SuggestedName { get; set; }
    }

    public class PersonalAccessTokenUpdateResponse
    {
        public PersonalAccessToken Pat { get; set; }
        public string Token { get; set; }
    }

    [GraphQlObjectType("Place")]
    public interface IPlace
    {
        ICollection<CalendarEvent> CalendarEvents { get; set; }
        ICollection<Collection> Collections { get; set; }
        string ConnectedDataSourceId { get; set; }
        ICollection<Connector> Connectors { get; set; }
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Description { get; set; }
        string ExactType { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        ICollection<IPlace> HasPart { get; set; }
        ICollection<HasPartEdge> HasPartEdges { get; set; }
        ICollection<Point> HasPoint { get; set; }
        ICollection<HasPointEdge> HasPointEdges { get; set; }
        string Id { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        ICollection<IPlace> IsAdjacentTo { get; set; }
        ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        ICollection<Thing> IsFedBy { get; set; }
        ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        ICollection<IPlace> IsPartOf { get; set; }
        ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        ICollection<Thing> IsServedBy { get; set; }
        ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        string MappingKey { get; set; }
        string Name { get; set; }
        ICollection<Point> Points { get; set; }
        ICollection<Thing> Things { get; set; }
        ICollection<string> Type { get; set; }
    }

    [GraphQlObjectType("Point")]
    public class Point : IGraphNode
    {
        public ICollection<TimeseriesAggregateRow> Aggregation { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public DatatypeKey? Datatype { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Point> HasBill { get; set; }
        public Heartbeat HasHeartbeat { get; set; }
        public ICollection<HasHeartbeatEdge> HasHeartbeatEdges { get; set; }
        public string Id { get; set; }
        public ICollection<PointIdentityUnion> Identities { get; set; }
        public Account IsBilledTo { get; set; }
        public ICollection<IsBilledToEdge> IsBilledToEdges { get; set; }
        public ICollection<IsPointOfUnion> IsPointOf { get; set; }
        public ICollection<IsPointOfEdge> IsPointOfEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<TimeseriesRow> Series { get; set; }
        public ICollection<string> StateTexts { get; set; }
        public ICollection<string> Type { get; set; }
        public Unit Unit { get; set; }
        public bool? Unused { get; set; }
        public object ValueMap { get; set; }
    }

    public class PointIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("PostalAddressIdentity")]
    public class PostalAddressIdentity : IIdentity, IPostalAddressIdentityModel
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("PostalAddressIdentityModel")]
    public interface IPostalAddressIdentityModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class ProductBundleResponse
    {
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("archived_at")]
#endif
        public object ArchivedAt { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("created_at")]
#endif
        public DateTimeOffset? CreatedAt { get; set; }
        public string Description { get; set; }
        public Interval? Interval { get; set; }
        public ICollection<ProductPriceItemResponse> Items { get; set; }
        public ICollection<MetadataEntry> Metadata { get; set; }
        public string Plan { get; set; }
        public ProductType? ProductType { get; set; }
        public string Sku { get; set; }
        public string Slug { get; set; }
        public BundleState? State { get; set; }
        public string Title { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("updated_at")]
#endif
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    public class ProductPriceItemResponse
    {
        public string LookupKey { get; set; }
        public ICollection<MetadataEntry> Metadata { get; set; }
        public OneTimePriceItems OneTimePriceItems { get; set; }
        public string PriceId { get; set; }
        public bool? QuantityEnabled { get; set; }
        public QuantityRange QuantityRange { get; set; }
        public string Slug { get; set; }
        public ICollection<Tier> Tiers { get; set; }
        public string TiersMode { get; set; }
        public PriceType? Type { get; set; }
        public object UnitAmount { get; set; }
        public string UnitAmountDecimal { get; set; }
    }

    public class QuantityRange
    {
        public object Max { get; set; }
        public object Min { get; set; }
    }

    public class Query
    {
        public ConnectorAuthResponseSecret AccessConnectorAuth { get; set; }
        public string AccessTokenFromPat { get; set; }
        public ICollection<Account> Accounts { get; set; }
        public ConnectorTypeListAvailableResponse AvailableConnectorTypes { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public ConnectorAuth ConnectorAuth { get; set; }
        public ICollection<ConnectorType> ConnectorTypes { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public ICollection<Gateway> Gateways { get; set; }
        public ICollection<UserOrgDetail> GetOrgMembershipsUser { get; set; }
        public ICollection<Grant> Grants { get; set; }
        public ICollection<Invite> Invites { get; set; }
        public OrgIsOrgNameAvailableResponse IsOrgNameAvailable { get; set; }
        public PersonalAccessTokenIsPatNameAvailableResponse IsPatNameAvailable { get; set; }
        public ICollection<Lease> Leases { get; set; }
        public ICollection<LiveQuery> LiveQueries { get; set; }
        public User Me { get; set; }
        public ICollection<OrgRoleGroupDto> OrgRoleGroups { get; set; }
        public ICollection<OrgServiceAccountContainer> OrgServiceAccounts { get; set; }
        public Org Organization { get; set; }
        public ICollection<Person> People { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<BillingProductBundleSubscriptionResponse> ProductBundleSubscriptions { get; set; }
        public ICollection<RoleManagerRoleDto> RoleManagers { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<SpaceMappingSuggestedEquivalentSpaces> SuggestEquivalentSpaces { get; set; }
        public ICollection<SpaceMappingFloorLevelSuggestion> SuggestFloorLevels { get; set; }
        public ICollection<SpaceMappingSpaceCodeSuggestion> SuggestSpaceCodes { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<PersonalAccessToken> Tokens { get; set; }
        public ICollection<Unit> Units { get; set; }
        public ICollection<User> Users { get; set; }
        public ICollection<WebhookTarget> WebhookTargets { get; set; }
        public ICollection<WorkOrder> WorkOrders { get; set; }
        public ICollection<Zone> Zones { get; set; }
    }

    public class RegexMatch
    {
        public ValueLocation Location { get; set; }
        public string Regex { get; set; }
    }

    [GraphQlObjectType("RelatesToEdge")]
    public class RelatesToEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class RelatesToUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public object Geoshape { get; set; }
        public int? Level { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
        public string AssetTrackingId { get; set; }
        public object DateInstalled { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
        public string FirmwareVersion { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
    }

    public class RoleManagerRoleDto
    {
        public DateTimeOffset? CreatedAt { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public bool? IsSynced { get; set; }
        public ICollection<MetadataRecord> Metadata { get; set; }
        public string Name { get; set; }
        public ICollection<string> Permissions { get; set; }
        public RoleManagerRoleType? RoleType { get; set; }
        public RoleManagerRoleState? State { get; set; }
        public DateTimeOffset? UpdatedAt { get; set; }
    }

    [GraphQlObjectType("ServesEdge")]
    public class ServesEdge : IEdge
    {
        public string MappingKey { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IGraphNode Node { get; set; }
    }

    public class ServesUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<BuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public object Geoshape { get; set; }
        public int? Level { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Person> HasMember { get; set; }
        public ICollection<HasMemberEdge> HasMemberEdges { get; set; }
        public ICollection<Person> HasPrimaryContact { get; set; }
        public ICollection<HasPrimaryContactEdge> HasPrimaryContactEdges { get; set; }
        public ICollection<Account> IsProviderOf { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public int? MaxOccupancy { get; set; }
        public string ParentSpaceId { get; set; }
    }

    public class SignatureMatch
    {
        public CertificateData AsymmetricKey { get; set; }
        public ValueLocation Location { get; set; }
        public string SymmetricKey { get; set; }
        public SignatureType? Type { get; set; }
    }

    [GraphQlObjectType("Site")]
    public class Site : IGraphNode, IPlace, IThingContainer
    {
        public ICollection<Building> Buildings { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<SiteIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class SiteCreateResponse
    {
        public SiteMutation Site { get; set; }
    }

    public class SiteDeleteResponse
    {
        public string _ { get; set; }
    }

    public class SiteIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class SiteMutation
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class SiteUpdateResponse
    {
        public SiteMutation Site { get; set; }
    }

    [GraphQlObjectType("Space")]
    public class Space : IGraphNode, IPlace, IThingContainer
    {
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public Floor Floor { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<SpaceIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public int? MaxOccupancy { get; set; }
        public string Name { get; set; }
        public string ParentSpaceId { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    [GraphQlObjectType("SpaceCode")]
    public class SpaceCode : IIdentity, ISpaceCodeModel
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("SpaceCodeModel")]
    public interface ISpaceCodeModel
    {
        object DateCreated { get; set; }
        object DateUpdated { get; set; }
        string Id { get; set; }
        ScopeKey? Scope { get; set; }
        string ScopeId { get; set; }
        string Value { get; set; }
    }

    public class SpaceCreateResponse
    {
        public SpaceMutation Space { get; set; }
    }

    public class SpaceDeleteResponse
    {
        public string _ { get; set; }
    }

    public class SpaceIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class SpaceMappingEquivalentSpaceSuggestion
    {
        public decimal? Confidence { get; set; }
        public SpaceMutation Space { get; set; }
    }

    public class SpaceMappingFloorLevelSuggestion
    {
        public decimal? Confidence { get; set; }
        public int? Level { get; set; }
    }

    public class SpaceMappingSpaceCodeSuggestion
    {
        public decimal? Confidence { get; set; }
        public string SpaceCode { get; set; }
    }

    public class SpaceMappingSuggestedEquivalentSpaces
    {
        public ICollection<SpaceMappingEquivalentSpaceSuggestion> Spaces { get; set; }
    }

    public class SpaceMutation
    {
        public ICollection<string> ExactType { get; set; }
        public string FloorId { get; set; }
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string ParentSpaceId { get; set; }
    }

    public class SpaceUpdateResponse
    {
        public SpaceMutation Space { get; set; }
    }

    [GraphQlObjectType("SubBuilding")]
    public class SubBuilding : IGraphNode, IPlace, IThingContainer
    {
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<SubBuildingIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class SubBuildingIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("Thing")]
    public class Thing : IGraphNode
    {
        public string AssetTrackingId { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public object DateCreated { get; set; }
        public object DateInstalled { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public ICollection<FeedsEdge> FeedsEdges { get; set; }
        public string FirmwareVersion { get; set; }
        public object Geoshape { get; set; }
        public DeviceModel HasDeviceModel { get; set; }
        public ICollection<HasDeviceModelEdge> HasDeviceModelEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public ICollection<HasLocationEdge> HasLocationEdges { get; set; }
        public ICollection<Thing> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<ThingIdentityUnion> Identities { get; set; }
        public ICollection<IsFedByUnion> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<Thing> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<PeopleGroup> IsResponsibilityOf { get; set; }
        public ICollection<IsResponsibilityOfEdge> IsResponsibilityOfEdges { get; set; }
        public bool? IsVirtual { get; set; }
        public Agent ManufacturedBy { get; set; }
        public ICollection<ManufacturedByEdge> ManufacturedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public ICollection<Point> Points { get; set; }
        public string SeeAlso { get; set; }
        public string SerialNumber { get; set; }
        public ICollection<ServesUnion> Serves { get; set; }
        public ICollection<ServesEdge> ServesEdges { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public interface IThingContainer
    {
        ICollection<Thing> Things { get; set; }
    }

    public class ThingIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    public class Tier
    {
        public object FlatAmount { get; set; }
        public string FlatAmountDecimal { get; set; }
        public object UnitAmount { get; set; }
        public string UnitAmountDecimal { get; set; }
        public object UpTo { get; set; }
    }

    public class TimeseriesAggregateRow
    {
        public decimal? Avg { get; set; }
        public int? Count { get; set; }
        public decimal? Max { get; set; }
        public decimal? Min { get; set; }
        public decimal? Sum { get; set; }
        public DateTimeOffset? Timestamp { get; set; }
    }

    public class TimeseriesRow
    {
        public object IngestionTime { get; set; }
        public DateTimeOffset? Timestamp { get; set; }
        public TimeseriesRowValue Value { get; set; }
    }

    public class TimeseriesRowValue
    {
        public bool? BoolValue { get; set; }
        public string ByteArrayValue { get; set; }
        public decimal? Float32Value { get; set; }
        public decimal? Float64Value { get; set; }
        public GeoPoint GeopointValue { get; set; }
        public int? Int32Value { get; set; }
        public object Int64Value { get; set; }
        public object Json { get; set; }
        public TimeseriesNumericalException? NumericalException { get; set; }
        public string StringValue { get; set; }
        public int? Uint32Value { get; set; }
        public object Uint64Value { get; set; }
    }

    public class Unit
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class User
    {
        public object Created { get; set; }
        public string Email { get; set; }
        public bool? EmailVerified { get; set; }
        public string Id { get; set; }
        public object LastLogin { get; set; }
        public object LoginsCount { get; set; }
        public string Name { get; set; }
        public ICollection<string> OrgRoles { get; set; }
        public Org Organization { get; set; }
        public ICollection<Role> Roles { get; set; }
        public ICollection<PersonalAccessToken> Tokens { get; set; }
        public object Updated { get; set; }
    }

    public class UserAssignRoleResponse
    {
        public User User { get; set; }
    }

    public class UserCreateResponse
    {
        public User User { get; set; }
    }

    public class UserOrgDetail
    {
        public string OrgId { get; set; }
        public ICollection<string> Roles { get; set; }
    }

    public class UserRemoveOrgMembershipResponse
    {
        public string _ { get; set; }
    }

    public class UserRemoveRoleResponse
    {
        public User User { get; set; }
    }

    public class UserUpdateResponse
    {
        public User User { get; set; }
    }

    public class ValueLocation
    {
        public EncodingType? Encoding { get; set; }
        public BodyValueLocation Form { get; set; }
        public string Header { get; set; }
        public BodyValueLocation Json { get; set; }
        public bool? MappedDefault { get; set; }
        public string QueryParameter { get; set; }
    }

    public class ValueMatch
    {
        public ValueLocation Location { get; set; }
        public string Value { get; set; }
    }

    public class WebhookReceiver
    {
        public Auth Auth { get; set; }
        public string BaseUri { get; set; }
        public WebhookReceiverCorsOptions CorsOptions { get; set; }
        public object Created { get; set; }
        public WebhookReceiverDestination Destination { get; set; }
        public string Id { get; set; }
        public string IncomingPayloadContentType { get; set; }
        public ICollection<MetadataRecord> Metadata { get; set; }
        public ICollection<HttpMethod> Methods { get; set; }
        public string Name { get; set; }
        public string OwnerId { get; set; }
        public ICollection<WebhookReceiverResponseHeadersEntry> ResponseHeaders { get; set; }
        public string ResponseMessage { get; set; }
        public string ResponseReflectedQueryParameter { get; set; }
        public string RunId { get; set; }
        public string SignalName { get; set; }
        public string SourceId { get; set; }
        public int? SuccessHttpResponseCode { get; set; }
        public object Updated { get; set; }
        public string WorkflowId { get; set; }
    }

    public class WebhookReceiverCorsOptions
    {
        public bool? AllowCredentials { get; set; }
        public ICollection<string> AllowedHeaders { get; set; }
        public ICollection<HttpMethod> AllowedMethods { get; set; }
        public ICollection<string> AllowedOrigins { get; set; }
        public ICollection<string> ExposedHeaders { get; set; }
        public int? MaxAge { get; set; }
    }

    public class WebhookReceiverCentrifugoDestination
    {
        public string Channel { get; set; }
    }

    public class WebhookReceiverDeleteResponse
    {
        public string _ { get; set; }
    }

    public class WebhookReceiverDestination
    {
        public WebhookReceiverCentrifugoDestination CentrifugoDestination { get; set; }
        public WebhookReceiverTemporalExecuteWorkflowDestination ExecuteWorkflowDestination { get; set; }
        public WebhookReceiverKafkaDestination KafkaDestination { get; set; }
        public WebhookReceiverTemporalSignalWorkfowDestination SignalWorkflowDestination { get; set; }
    }

    public class WebhookReceiverKafkaDestination
    {
        public string Key { get; set; }
        public string Topic { get; set; }
    }

    public class WebhookReceiverResponseHeadersEntry
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class WebhookReceiverTemporalExecuteWorkflowDestination
    {
        public string TaskQueue { get; set; }
        public string WorkflowId { get; set; }
    }

    public class WebhookReceiverTemporalSignalWorkfowDestination
    {
        public string RunId { get; set; }
        public string SignalName { get; set; }
        public string WorkflowId { get; set; }
    }

    public class WebhookReceiverUpsertResponse
    {
        public WebhookReceiver Receiver { get; set; }
    }

    public class WebhookTarget
    {
        public WebhookTargetCloudEventBatchedContentModeConfig BatchedContentModeConfig { get; set; }
        public WebhookTargetCloudEventContentMode? ContentMode { get; set; }
        public bool? Enabled { get; set; }
        public object EventExtensions { get; set; }
        public WebhookTargetEventFilter EventFilters { get; set; }
        public WebhookTargetHttpTarget HttpTarget { get; set; }
        public string Id { get; set; }
        public object MaxRetry { get; set; }
        public ICollection<WebhookTargetMetadataEntry> Metadata { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public User User { get; set; }
    }

    public class WebhookTargetAuth
    {
        public ApiKeyData ApiKey { get; set; }
        public BasicAuth BasicAuth { get; set; }
        public bool? NoAuth { get; set; }
        public OAuth2ClientCredentialsFlow Oauth2ClientCredentialsFlow { get; set; }
    }

    public class WebhookTargetCloudEventBatchedContentModeConfig
    {
        public Duration GracePeriod { get; set; }
        public Duration MaxDelay { get; set; }
        public object MaxSize { get; set; }
    }

    public class WebhookTargetCloudEventFilter
    {
        public ICollection<WebhookTargetCloudEventFilter> And { get; set; }
        public ICollection<WebhookTargetCloudEventFilter> Not { get; set; }
        public ICollection<WebhookTargetCloudEventFilter> Or { get; set; }
        public ICollection<string> Sources { get; set; }
        public ICollection<CloudEventSourceType> Types { get; set; }
    }

    public class WebhookTargetCreateResponse
    {
        public WebhookTarget Target { get; set; }
    }

    public class WebhookTargetDeleteResponse
    {
        public string _ { get; set; }
    }

    public class WebhookTargetEnableResponse
    {
        public bool? CurrentEnabled { get; set; }
        public string Id { get; set; }
        public bool? PreviousEnabled { get; set; }
    }

    public class WebhookTargetEventFilter
    {
        public WebhookTargetCloudEventFilter CloudEventFilter { get; set; }
        public WebhookTargetJsonExpressionFilter JsonExpressionFilter { get; set; }
        public WebhookTargetTimeseriesFilter TimeseriesFilter { get; set; }
    }

    public class WebhookTargetHttpTarget
    {
        public WebhookTargetAuth Auth { get; set; }
        public Hmac256 Hmac256 { get; set; }
        public HttpMethod? Method { get; set; }
        public string TargetUri { get; set; }
    }

    public class WebhookTargetJsonExpressionFilter
    {
        public string JsonPathExpression { get; set; }
    }

    public class WebhookTargetMetadataEntry
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class WebhookTargetTimeseriesFilter
    {
        public ICollection<string> Points { get; set; }
    }

    public class WebhookTargetUpdateResponse
    {
        public WebhookTarget Target { get; set; }
    }

    [GraphQlObjectType("WorkOrder")]
    public class WorkOrder : IGraphNode
    {
        public string ConnectedDataSourceId { get; set; }
        public object DateClosed { get; set; }
        public object DateCompleted { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public object DueDate { get; set; }
        public string ExactType { get; set; }
        public object ExternalDateCreated { get; set; }
        public object ExternalDateUpdated { get; set; }
        public PeopleGroup HasAssignedGroup { get; set; }
        public ICollection<HasAssignedGroupEdge> HasAssignedGroupEdges { get; set; }
        public ICollection<Person> HasAssignee { get; set; }
        public ICollection<HasAssigneeEdge> HasAssigneeEdges { get; set; }
        public string Id { get; set; }
        public ICollection<WorkOrderIdentityUnion> Identities { get; set; }
        public Person IsClosedBy { get; set; }
        public ICollection<IsClosedByEdge> IsClosedByEdges { get; set; }
        public Person IsCreatedBy { get; set; }
        public ICollection<IsCreatedByEdge> IsCreatedByEdges { get; set; }
        public Person IsReportedBy { get; set; }
        public ICollection<IsReportedByEdge> IsReportedByEdges { get; set; }
        public string JobPriority { get; set; }
        public string JobStatus { get; set; }
        public string JobSubStatus { get; set; }
        public string JobType { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public string ProblemDescription { get; set; }
        public string ReferenceUrl { get; set; }
        public ICollection<RelatesToUnion> RelatesTo { get; set; }
        public ICollection<RelatesToEdge> RelatesToEdges { get; set; }
        public string ResolutionDescription { get; set; }
        public string Sector { get; set; }
        public string Subject { get; set; }
        public string Summary { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class WorkOrderIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("Zone")]
    public class Zone : IGraphNode, IPlace, IThingContainer
    {
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Collection> Collections { get; set; }
        public string ConnectedDataSourceId { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<HasPartEdge> HasPartEdges { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<HasPointEdge> HasPointEdges { get; set; }
        public string Id { get; set; }
        public ICollection<ZoneIdentityUnion> Identities { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsAdjacentTo { get; set; }
        public ICollection<IsAdjacentToEdge> IsAdjacentToEdges { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<IsFedByEdge> IsFedByEdges { get; set; }
        public ICollection<IsLocationOfUnion> IsLocationOf { get; set; }
        public ICollection<IsLocationOfEdge> IsLocationOfEdges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public ICollection<IsPartOfEdge> IsPartOfEdges { get; set; }
        public ICollection<Thing> IsServedBy { get; set; }
        public ICollection<IsServedByEdge> IsServedByEdges { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class ZoneIdentityUnion
    {
        public object DateCreated { get; set; }
        public object DateUpdated { get; set; }
        public string Id { get; set; }
        public ScopeKey? Scope { get; set; }
        public string ScopeId { get; set; }
        public string Value { get; set; }
    }
    #endregion
}
