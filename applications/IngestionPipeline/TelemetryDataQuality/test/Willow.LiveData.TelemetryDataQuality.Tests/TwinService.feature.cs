// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.LiveData.TelemetryDataQuality.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Twin Service")]
    public partial class TwinServiceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TwinService.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Twin Service", "\tService for adding and retrieving twins from a memory cache", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ModelId",
                        "ConnectorId",
                        "ExternalId",
                        "Unit",
                        "Enabled",
                        "TrendInterval"});
            table1.AddRow(new string[] {
                        "TW-1",
                        "TestSensorModel",
                        "TestConnector-1",
                        "PNT123",
                        "TestUnit",
                        "true",
                        "900"});
            table1.AddRow(new string[] {
                        "TW-3",
                        "TestSensorModel",
                        "TestConnector-1",
                        "PNT456",
                        "TestUnit",
                        "true",
                        "900"});
            table1.AddRow(new string[] {
                        "TW-4",
                        "TestSensorModel",
                        "TestConnector-2",
                        "PNTx7cA",
                        "TestUnit",
                        "false",
                        "900"});
            table1.AddRow(new string[] {
                        "TW-5",
                        "TestSensorModel",
                        "TestConnector-3",
                        "",
                        "TestUnit",
                        "false",
                        "900"});
#line 5
 testRunner.Given("I have twins in the cache", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get a twin from the cache")]
        [NUnit.Framework.CategoryAttribute("Unit")]
        [NUnit.Framework.CategoryAttribute("AB#132143")]
        [NUnit.Framework.TestCaseAttribute("TW-1", "PNT123", "TestConnector-1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("TW-3", "PNT456", "TestConnector-1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("TW-4", "PNTx7cA", "TestConnector-2", "false", null)]
        public void GetATwinFromTheCache(string id, string externalId, string connectorId, string enabled, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB#132143"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("ExternalId", externalId);
            argumentsOfScenario.Add("ConnectorId", connectorId);
            argumentsOfScenario.Add("Enabled", enabled);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a twin from the cache", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 14
 testRunner.When(string.Format("I call GetTwin with Id \'{0}\'", externalId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "ModelId",
                            "ConnectorId",
                            "ExternalId",
                            "Unit",
                            "Enabled",
                            "TrendInterval"});
                table2.AddRow(new string[] {
                            string.Format("{0}", id),
                            "TestSensorModel",
                            string.Format("{0}", connectorId),
                            string.Format("{0}", externalId),
                            "TestUnit",
                            string.Format("{0}", enabled),
                            "900"});
#line 15
 testRunner.Then("I should get the following twin:", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get a twin that does not exist")]
        [NUnit.Framework.CategoryAttribute("Unit")]
        [NUnit.Framework.CategoryAttribute("AB#132143")]
        [NUnit.Framework.TestCaseAttribute("TW-2", null)]
        [NUnit.Framework.TestCaseAttribute("TW-6", null)]
        [NUnit.Framework.TestCaseAttribute("TW-7", null)]
        public void GetATwinThatDoesNotExist(string id, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "AB#132143"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a twin that does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 27
 testRunner.When(string.Format("I call GetTwin with Id \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("I should get no twin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
