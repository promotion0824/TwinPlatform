// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.LiveData.TelemetryStreaming.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RetrievingSubscriptionsFromTableStorageFeature : object, Xunit.IClassFixture<RetrievingSubscriptionsFromTableStorageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StorageTablesSubscriptionService.feature"
#line hidden
        
        public RetrievingSubscriptionsFromTableStorageFeature(RetrievingSubscriptionsFromTableStorageFeature.FixtureData fixtureData, Willow_LiveData_TelemetryStreaming_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Retrieving subscriptions from table storage", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieves matching subscriptions only")]
        [Xunit.TraitAttribute("FeatureTitle", "Retrieving subscriptions from table storage")]
        [Xunit.TraitAttribute("Description", "Retrieves matching subscriptions only")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB#90735")]
        public void RetrievesMatchingSubscriptionsOnly()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB#90735"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieves matching subscriptions only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "PartitionKey",
                            "ConnectorId",
                            "ExternalId"});
                table1.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
                table1.AddRow(new string[] {
                            "test-sub2",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
                table1.AddRow(new string[] {
                            "test-sub2",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "123456789"});
                table1.AddRow(new string[] {
                            "test-sub",
                            "23165b82-5c27-4bd1-bb3d-53ee96086199",
                            "701625AO0"});
#line 5
 testRunner.Given("I have a table storage with the following subscriptions:", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 testRunner.When("I call GetSubscriptions with connector ID \'64cb468d-0229-4956-8ddf-c586be43edd0\' " +
                        "and external ID \'701625AO0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubscriberId",
                            "ConnectorId",
                            "ExternalId"});
                table2.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
                table2.AddRow(new string[] {
                            "test-sub2",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
#line 12
 testRunner.Then("I should get the following subscriptions:", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieving subscriptions from table storage")]
        [Xunit.TraitAttribute("FeatureTitle", "Retrieving subscriptions from table storage")]
        [Xunit.TraitAttribute("Description", "Retrieving subscriptions from table storage")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB#90735")]
        public void RetrievingSubscriptionsFromTableStorage()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB#90735"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieving subscriptions from table storage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "PartitionKey",
                            "ConnectorId",
                            "ExternalId"});
                table3.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
#line 19
 testRunner.Given("I have a table storage with the following subscriptions:", ((string)(null)), table3, "Given ");
#line hidden
#line 22
 testRunner.When("I call GetSubscriptions with connector ID \'64cb468d-0229-4956-8ddf-c586be43edd0\' " +
                        "and external ID \'701625AO0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubscriberId",
                            "ConnectorId",
                            "ExternalId"});
                table4.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
#line 23
 testRunner.Then("I should get the following subscriptions:", ((string)(null)), table4, "Then ");
#line hidden
#line 26
 testRunner.And("the metadata object will be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieving subscriptions from table storage with metadata")]
        [Xunit.TraitAttribute("FeatureTitle", "Retrieving subscriptions from table storage")]
        [Xunit.TraitAttribute("Description", "Retrieving subscriptions from table storage with metadata")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.TraitAttribute("Category", "AB#90735")]
        public void RetrievingSubscriptionsFromTableStorageWithMetadata()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "AB#90735"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieving subscriptions from table storage with metadata", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "PartitionKey",
                            "ConnectorId",
                            "ExternalId",
                            "TestField1",
                            "TestField2"});
                table5.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0",
                            "TestValue1",
                            "TestValue2"});
#line 30
 testRunner.Given("I have a table storage with the following subscriptions:", ((string)(null)), table5, "Given ");
#line hidden
#line 33
 testRunner.When("I call GetSubscriptions with connector ID \'64cb468d-0229-4956-8ddf-c586be43edd0\' " +
                        "and external ID \'701625AO0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubscriberId",
                            "ConnectorId",
                            "ExternalId"});
                table6.AddRow(new string[] {
                            "test-sub",
                            "64cb468d-0229-4956-8ddf-c586be43edd0",
                            "701625AO0"});
#line 34
 testRunner.Then("I should get the following subscriptions:", ((string)(null)), table6, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "TestField1",
                            "TestField2"});
                table7.AddRow(new string[] {
                            "TestValue1",
                            "TestValue2"});
#line 37
 testRunner.And("the metadata object will be have the following properties:", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RetrievingSubscriptionsFromTableStorageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RetrievingSubscriptionsFromTableStorageFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
