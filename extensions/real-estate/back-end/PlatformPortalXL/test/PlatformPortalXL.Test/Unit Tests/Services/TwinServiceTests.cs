using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoFixture.Xunit2;
using FluentAssertions;
using Microsoft.Extensions.Configuration;
using Moq;
using PlatformPortalXL.Dto;
using PlatformPortalXL.Features.Pilot;
using PlatformPortalXL.Features.Twins;
using PlatformPortalXL.Services;
using PlatformPortalXL.Services.Assets;
using PlatformPortalXL.Services.Twins;
using PlatformPortalXL.ServicesApi.DigitalTwinApi;
using PlatformPortalXL.ServicesApi.DirectoryApi;
using PlatformPortalXL.ServicesApi.SiteApi;
using Xunit;

namespace PlatformPortalXL.Test.Unit_Tests.Services
{
    public class TwinServiceTests
    {
        [Theory]
        [AutoData]
        public async Task GetTwinRelationships_Should_Not_Add_Building_When_Building_Is_Already_In_Relationships(
            Guid siteId,
            string twinId,
            TwinDto siteTwin,
            List<TwinRelationshipDto> relationships)
        {
            siteTwin.Id = relationships.First().TargetId;

            var digitalTwinService = new Mock<IDigitalTwinAssetService>();
            var connectorService = new Mock<IConnectorService>();
            var digitalTwinApiService = new Mock<IDigitalTwinApiService>();
            var directoryApiService = new Mock<IDirectoryApiService>();
            var siteApiService = new Mock<ISiteApiService>();
            var configuration = new Mock<IConfiguration>();

            digitalTwinApiService.Setup(x => x.GetTwinRelationships(siteId, twinId)).ReturnsAsync(relationships);
            digitalTwinApiService.Setup(x => x.GetTwinIncomingRelationships(siteId, twinId, It.IsAny<string[]>())).ReturnsAsync(relationships);
            digitalTwinApiService.Setup(x => x.GetTwinRelationshipsByQuery(siteId, twinId, It.IsAny<string[]>(), It.IsAny<string[]>(), It.IsAny<int>())).ReturnsAsync(relationships);
            digitalTwinApiService.Setup(x => x.GetTwinByUniqueId(siteId, siteId)).ReturnsAsync(siteTwin);

            var sut = new TwinService(digitalTwinService.Object, connectorService.Object, digitalTwinApiService.Object, configuration.Object);

            var result = await sut.GetTwinRelationships(siteId, twinId, new TwinRelationshipsRequest());

            result.Should().NotContain(x => x.Id == "AUTOGENERATED-BUILDING-RELATIONSHIP");
        }

        [Theory]
        [AutoData]
        public async Task GetTwinRelationships_Should_Add_Building_When_Building_Is_Not_In_Relationships(Guid siteId,
            string twinId,
            List<TwinRelationshipDto> relationships,
            TwinDto siteTwin,
            TwinDto twin)
        {
            var digitalTwinService = new Mock<IDigitalTwinAssetService>();
            var connectorService = new Mock<IConnectorService>();
            var digitalTwinApiService = new Mock<IDigitalTwinApiService>();
            var configuration = new Mock<IConfiguration>();
            digitalTwinApiService.Setup(x => x.GetTwinRelationships(siteId, twinId)).ReturnsAsync(relationships);
            digitalTwinApiService.Setup(x => x.GetTwinIncomingRelationships(siteId, twinId, It.IsAny<string[]>())).ReturnsAsync(relationships);
            digitalTwinApiService.Setup(x => x.GetTwinRelationshipsByQuery(siteId, twinId, It.IsAny<string[]>(), It.IsAny<string[]>(), It.IsAny<int>())).ReturnsAsync(new List<TwinRelationshipDto>());

            digitalTwinApiService.Setup(x => x.GetTwinByUniqueId(siteId, It.IsAny<Guid>())).ReturnsAsync(siteTwin);
            digitalTwinApiService.Setup(x => x.GetTwin<TwinDto>(siteId, twinId)).ReturnsAsync(twin);

            var sut = new TwinService(digitalTwinService.Object, connectorService.Object, digitalTwinApiService.Object,  configuration.Object);

            var result = await sut.GetTwinRelationships(siteId, twinId, new TwinRelationshipsRequest());

            result.Should().Contain(x => x.Id == "AUTOGENERATED-BUILDING-RELATIONSHIP");
        }
    }
}
