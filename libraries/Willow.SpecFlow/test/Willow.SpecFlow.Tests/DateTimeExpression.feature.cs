// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Willow.SpecFlow.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestDateTimeAndDateTimeOffsetExpressionsFeature : object, Xunit.IClassFixture<TestDateTimeAndDateTimeOffsetExpressionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DateTimeExpression.feature"
#line hidden
        
        public TestDateTimeAndDateTimeOffsetExpressionsFeature(TestDateTimeAndDateTimeOffsetExpressionsFeature.FixtureData fixtureData, Willow_SpecFlow_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Test DateTime and DateTimeOffset Expressions", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test DateTime Expressions")]
        [Xunit.TraitAttribute("FeatureTitle", "Test DateTime and DateTimeOffset Expressions")]
        [Xunit.TraitAttribute("Description", "Test DateTime Expressions")]
        [Xunit.InlineDataAttribute("NOW", "2024-04-18 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1d", "2024-04-19 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1day", "2024-04-19 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1days", "2024-04-19 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1d", "2024-04-17 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1day", "2024-04-17 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1days", "2024-04-17 14:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1h", "2024-04-18 15:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1hour", "2024-04-18 15:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1hours", "2024-04-18 15:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1h", "2024-04-18 13:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1hour", "2024-04-18 13:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1hours", "2024-04-18 13:24:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1m", "2024-04-18 14:25:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1min", "2024-04-18 14:25:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1mins", "2024-04-18 14:25:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1m", "2024-04-18 14:23:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1min", "2024-04-18 14:23:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1mins", "2024-04-18 14:23:00", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1s", "2024-04-18 14:24:01", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1sec", "2024-04-18 14:24:01", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1secs", "2024-04-18 14:24:01", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1s", "2024-04-18 14:23:59", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1sec", "2024-04-18 14:23:59", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1secs", "2024-04-18 14:23:59", new string[0])]
        [Xunit.InlineDataAttribute("TODAY", "2024-04-18 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1d", "2024-04-19 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1day", "2024-04-19 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1days", "2024-04-19 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1d", "2024-04-17 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "2024-04-17 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1days", "2024-04-17 00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1h", "2024-04-18 01:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1hour", "2024-04-18 01:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1hours", "2024-04-18 01:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1h", "2024-04-17 23:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1hour", "2024-04-17 23:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1hours", "2024-04-17 23:00:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1m", "2024-04-18 00:01:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1min", "2024-04-18 00:01:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1mins", "2024-04-18 00:01:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1m", "2024-04-17 23:59:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1min", "2024-04-17 23:59:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1mins", "2024-04-17 23:59:00", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1s", "2024-04-18 00:00:01", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1sec", "2024-04-18 00:00:01", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1secs", "2024-04-18 00:00:01", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1s", "2024-04-17 23:59:59", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1sec", "2024-04-17 23:59:59", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1secs", "2024-04-17 23:59:59", new string[0])]
        [Xunit.InlineDataAttribute("", "", new string[0])]
        public void TestDateTimeExpressions(string expression, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Expression", expression);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test DateTime Expressions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("the current time is \'2024-04-18 14:24:00Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When(string.Format("I evaluate the expression \'{0}\'", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then(string.Format("the result should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test DateTimeOffset Expressions")]
        [Xunit.TraitAttribute("FeatureTitle", "Test DateTime and DateTimeOffset Expressions")]
        [Xunit.TraitAttribute("Description", "Test DateTimeOffset Expressions")]
        [Xunit.InlineDataAttribute("NOW", "2024-04-18 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1d", "2024-04-19 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1day", "2024-04-19 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1days", "2024-04-19 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1d", "2024-04-17 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1day", "2024-04-17 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1days", "2024-04-17 14:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1h", "2024-04-18 15:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1hour", "2024-04-18 15:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1hours", "2024-04-18 15:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1h", "2024-04-18 13:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1hour", "2024-04-18 13:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1hours", "2024-04-18 13:24:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1m", "2024-04-18 14:25:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1min", "2024-04-18 14:25:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1mins", "2024-04-18 14:25:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1m", "2024-04-18 14:23:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1min", "2024-04-18 14:23:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1mins", "2024-04-18 14:23:00Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1s", "2024-04-18 14:24:01Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1sec", "2024-04-18 14:24:01Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW + 1secs", "2024-04-18 14:24:01Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1s", "2024-04-18 14:23:59Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1sec", "2024-04-18 14:23:59Z", new string[0])]
        [Xunit.InlineDataAttribute("NOW - 1secs", "2024-04-18 14:23:59Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY", "2024-04-18 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1d", "2024-04-19 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1day", "2024-04-19 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1days", "2024-04-19 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1d", "2024-04-17 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1day", "2024-04-17 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1days", "2024-04-17 00:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1h", "2024-04-18 01:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1hour", "2024-04-18 01:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1hours", "2024-04-18 01:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1h", "2024-04-17 23:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1hour", "2024-04-17 23:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1hours", "2024-04-17 23:00:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1m", "2024-04-18 00:01:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1min", "2024-04-18 00:01:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1mins", "2024-04-18 00:01:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1m", "2024-04-17 23:59:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1min", "2024-04-17 23:59:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1mins", "2024-04-17 23:59:00Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1s", "2024-04-18 00:00:01Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1sec", "2024-04-18 00:00:01Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY + 1secs", "2024-04-18 00:00:01Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1s", "2024-04-17 23:59:59Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1sec", "2024-04-17 23:59:59Z", new string[0])]
        [Xunit.InlineDataAttribute("TODAY - 1secs", "2024-04-17 23:59:59Z", new string[0])]
        [Xunit.InlineDataAttribute("", "", new string[0])]
        public void TestDateTimeOffsetExpressions(string expression, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Expression", expression);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test DateTimeOffset Expressions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
 testRunner.Given("the current time is \'2024-04-18 14:24:00Z\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
 testRunner.When(string.Format("I parse the expression \'{0}\' to a DateTimeOffset", expression), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then(string.Format("the result should be \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TestDateTimeAndDateTimeOffsetExpressionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TestDateTimeAndDateTimeOffsetExpressionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
